<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-24T20:01:45+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby on Railsを仕事にしていくための第一歩]]></title>
    <link href="http://morizyun.github.io/blog/ruby-rails-non-beginner-guide-book/"/>
    <updated>2015-11-08T23:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ruby-rails-non-beginner-guide-book</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00P0UR1CA/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00P0UR1CA&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00P0UR1CA&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00P0UR1CA" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />最近仕事でRailsのコードレビューをする時間が長くって、いろいろ指摘するんですが、
Railsって「Railsチュートリアル」には書いてないのに覚えないと仕事にならないこと多すぎだなと気付かされます。
どこでどんなふうにすれば、プロになろうとしている人が最短距離で知識を獲得できるかはわからないですが、
今思っている特に大事だなと思うことつらつらと書いていきます。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>プログラミングの重要な要素</h2>

<p>まず、Railsの前にプログラミングで全般的に特に重要と思っている要素を紹介します。</p>

<pre>
- リーダブルなコード
  - ネーミングルールについて
  - 言語・フレームワークのルール
  - 変数のスコープについて
  - プロジェクトの設計思想
  - オブジェクト指向・コードの再利用性
- 正しいテストケースを作る
</pre>


<p>プロジェクトによって変わるので、全ては書きませんが、ぜひ意識してどこを学ぶべきかを考えてみてください。</p>

<h2>ネーミングルールについて</h2>

<ul>
<li>動詞・名詞を正しく使い分けて下さい(英語離れるまで大変ですが、頑張ってください＞＜)</li>
<li>名前は「他のチームメンバーにも意味がわかる英語の名前」にして下さい</li>
<li>プロジェクト内の周りのメソッド・変数うがどんな意味を持っているか考えて見てください</li>
</ul>


<h2>コーディングガイドライン</h2>

<p>Ruby/Railsの有名なコーディングガイドラインは世の中に沢山あるので、ぜひ読んでください。</p>

<ul>
<li><a href="https://github.com/bbatsov/ruby-style-guide">The Ruby Style Guide (bbatsov)</a></li>
<li><a href="https://github.com/bbatsov/rails-style-guide">The Rails Style Guide (bbatsov)</a></li>
<li><a href="https://github.com/cookpad/styleguide/blob/master/ruby.ja.md">CookPad Ruby コーディング規準</a></li>
<li><a href="https://github.com/fortissimo1997/ruby-style-guide/blob/japanese/README.ja.md">The Ruby Style Guide (fortissimo1997)</a></li>
<li><a href="https://github.com/satour/rails-style-guide/blob/master/README-jaJA.md">The Rails Style Guide (satour)</a></li>
</ul>


<h2>変数のスコープについて</h2>

<p>変数のスコープにおいてプログラムの読みやすさはすごく大切です。
ローカル変数、インスタンス変数、クラス変数のスコープを理解して使い分けて下さい。
スコープの広い変数をむやみに使うとほかの人がコードを読みにくくなり、バグの温床になります。</p>

<h2>オブジェクト指向について</h2>

<ul>
<li><a href="http://qiita.com/hirokidaichi/items/591ad96ab12938878fe1">オブジェクト指向を手に入れるまでの奇跡</a></li>
<li><a href="http://tdak.hateblo.jp/entry/20140406/1396773476">オブジェクト指向について</a></li>
<li><a href="http://www.itmedia.co.jp/im/articles/0703/06/news125.html">5分で分るオブジェクト指向</a></li>
</ul>


<h2>その他必須で読んで欲しい本・記事</h2>

<h3>書籍</h3>

<ul>
<li><a href="http://www.amazon.co.jp/dp/4873115655">リーダブルコード</a></li>
<li><a href="http://www.amazon.co.jp/dp/4873113679">初めてのRuby</a></li>
<li><a href="https://leanpub.com/everydayrailsrspec-jp">EveryDay Rails(RSpec)</a></li>
</ul>


<h3>記事</h3>

<ul>
<li><a href="http://qiita.com/jnchito/items/dedb3b889ab226933ccf">RubyやRailsでリファクタリングに使えそうなイディオムとか便利メソッドとか</a></li>
<li><a href="http://at-grandpa.hatenablog.jp/entry/2013/11/01/072636">MVCの勘所</a></li>
<li><a href="http://betterspecs.org/jp/">RSpecの書き方</a></li>
</ul>


<h2>Rails/Ruby Tips</h2>

<p>ここからは、細かめのTipsです。よく指摘するところを中心に書きます。</p>

<h3>Active Record</h3>

<ul>
<li>pluck を上手に活用して下さい(ARのオブジェクトを作らないのでSQLのコストが減ります)

<ul>
<li><a href="http://blog.livedoor.jp/sasata299/archives/51847390.html">Rails3.2から導入されたpluckメソッドのパフォーマンスが素晴らしい件 - (ﾟ∀ﾟ)o彡 sasata299's blog</a></li>
</ul>
</li>
<li>ログを見て、無駄なSQLがないかを常に考えてください</li>
<li>indexが適切に効かないと、パフォーマンスが悪くなります。常にパフォーマンスを意識してください</li>
</ul>


<h3>Rails - View</h3>

<ul>
<li>共通的に使う可能性のあるは Decorator(ActiveDecorator等を利用) 側に書いて下さい</li>
<li>Viewのロジックは出来る限り減らして下さい</li>
<li>haml/slimは構造化しやすいという点で便利！</li>
</ul>


<h3>Rails - i18n</h3>

<p>適材適所でi18nを活用してください。</p>

<ul>
<li><a href="http://railsguides.jp/i18n.html">Rails国際化(I18n) API | Rails ガイド</a></li>
<li><a href="http://morizyun.github.io/blog/i18n-english-rails-ruby-many-languages/">Railsの多言語化対応 i18nのやり方を整理してみた！</a></li>
<li><a href="http://ruby-rails.hatenadiary.com/entry/20150226/1424937175">Railsのi18nの基本的な使い方まとめ - Rails Webook</a></li>
</ul>


<h3>N+1問題の対策 - Bullet</h3>

<p>RailsのActiveRecord(findやwhere)は便利ですが、DB(SQL)の側から見ると
非効率的なクエリを発生させることがあります。
これを監視してくれるのが、『<strong><a href="https://github.com/flyerhzm/bullet">Gem Bullet</a></strong>』です。
このGemを入れておくと開発環境で N+1が発生した時に警告を出してくれます。</p>

<ul>
<li><a href="http://www.techscore.com/blog/2012/12/25/rails%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E7%B4%B9%E4%BB%8B-n1%E5%95%8F%E9%A1%8C%E3%82%92%E6%A4%9C%E5%87%BA%E3%81%99%E3%82%8B%E3%80%8Cbullet%E3%80%8D/">Railsライブラリ紹介: N+1問題を検出する「bullet」</a></li>
<li><a href="http://morizyun.github.io/blog/speed-up-rails-bullet/">[Rails 高速化] ページキャッシュ、N+1対策、SQLチューニング</a></li>
</ul>


<h3>Profiler</h3>

<p>Viewが遅い時にボトルネックを探すためのツールです。
速度改善をする場合はプロファイラーか、ログを取ってボトルネックを計測して実施して下さい。</p>

<ul>
<li><a href="https://github.com/MiniProfiler/rack-mini-profiler">MiniProfiler/rack-mini-profiler - GitHub</a></li>
<li><a href="http://spring-mt.hatenablog.com/entry/2015/01/24/112454">railsアプリでstackprofを使ってボトルネックを探す + JSON::Schema(2.2.1)の高速化 - CubicLouve</a></li>
</ul>


<h3>Ruby/Railsの細かいTips</h3>

<ul>
<li>Ruby の定数は 書き換え可能です。immutable な場合はかならず、最後に .freeze をつけて下さい

<ul>
<li><a href="http://qiita.com/yukiyan/items/39f945c55b6dc5e11ed7">Rubyで定数を扱う場合はfreezeするべき</a></li>
</ul>
</li>
<li>Timezoneもしっかり意識して実装すると後々はまらないと思います

<ul>
<li><a href="http://qiita.com/jnchito/items/cae89ee43c30f5d6fa2c">RubyとRailsにおけるTime, Date, DateTime, TimeWithZoneの違い</a></li>
</ul>
</li>
<li>ActiveSupport::StringInquirerを使うとコードが読みやすくなります。適材適所で利用を検討してください。

<ul>
<li><a href="http://d.hatena.ne.jp/holysugar/20110513/p1">今更ながらシリーズ(2) StringInquirer - HWPS別館</a></li>
</ul>
</li>
</ul>


<h2>参考書籍</h2>

<p>その他読んでおくといいよって本です。</p>

<ul>
<li><a href="http://www.amazon.co.jp/dp/4774145963">良いコードを書く技術</a></li>
<li><a href="http://www.amazon.co.jp/dp/4873114799">プログラマが知るべき97のこと</a></li>
<li><a href="http://www.amazon.co.jp/dp/4822284654">オブジェクト指向でなぜ作るのか</a></li>
<li><a href="http://www.amazon.co.jp/dp/4774142042">Webを支える技術</a></li>
<li><a href="http://www.amazon.co.jp/dp/4048869558">プログラマの考え方が面白いほど身につく本</a></li>
</ul>


<p>あとは『<strong><a href="http://blog.jnito.com/entry/2014/09/29/074949">プログラマ歴12年の僕が選んだ「10年経っても役立つ技術書17選」 - give IT a try</a></strong>』
にプログラマーが基礎を身につける上で役に立ちそうな本が紹介されています。こちらも良かったら読んでみてください<sup>^</sup></p>

<h2>本当に初心者な人向けに</h2>

<p>ちょっと上の内容がハードだなと思う人向けには拙著
『<strong><a href="http://morizyun.github.io/blog/rails-beginner-first-step-guide/">ぼくのかんがえたさいきょうのRailsファースト・ガイド - 酒と泪とRubyとRailsと</a></strong>』
をよかったら読んでみてください。</p>

<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://goo.gl/0HPyuh">pull-request-のフォーマットを決めるとレビューの効率が3倍よくなる</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[読みやすいコーディングの心得[リーダブルコード]]]></title>
    <link href="http://morizyun.github.io/blog/readable-code-good-programing/"/>
    <updated>2015-10-18T09:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/readable-code-good-programing</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873115655/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873115655&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873115655&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873115655" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />読みやすいコードは、一緒にコーディングするチームのためだけではなく、
自分のためにもとても重要です。今回は「読みやすいコード」を書くための要素をまとめてみました！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>一番大切にすべきことは読みやすさ</h2>

<p>プログラミングでは、コードを書く時間よりもコードを読む時間の方が多くなります。
複数人で開発をしていると他人の書いたコードを読むことも増えるでしょう。
だから、コードは理解しやすさはプログラマーが最も大切にすべき指標の一つです。</p>

<p>プログラミングが読みやすければ、こんなメリットがあります。</p>

<pre>
- 他の人がコード読みやすくなって、開発する時間が増える
- コードの読み間違いが減って、バグを生み出しにくくなる
</pre>


<h2>名前で他の人が最短時間で理解できるようにコードを書く</h2>

<ul>
<li>モージュール名・クラス名・変数名を <strong>短いコメントと考えて</strong> 情報を埋め込む</li>
<li>相手に意図を伝えるために名前には、 <strong>明確な単語</strong> を選ぶ</li>
<li>エンティティの <strong>目的や値</strong> が明確になるようにする</li>
<li>変数名に <strong>値の単位や制限、危険・注意を喚起する情報</strong> を載せる</li>
<li>変数の <strong>スコープ(影響範囲)</strong> を意識する。スコープの大きな変数には長い名前をつける</li>
<li>プロジェクトや言語の規約を守る。 <strong>フォーマットをうまく活用する</strong></li>
</ul>


<h2>一貫性のあるやり方で「整形」する</h2>

<p>一貫性のあるやり方でレイアウトを揃えると、他人がソースコードをずっと理解しやすくなる。
例えば次のようなことである。</p>

<pre>
* 縦の線を真っ直ぐにする(列を整列させる)
* 適切な位置で改行する
* 並び順に一貫したルールを持つ(アルファベット順、種類別、重要度など)
* 空行を使ってコードを論理的な段落(似ているグループ)に分ける
</pre>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// 例)</span>
</span><span class='line'><span class="nx">TcpConnectionSimulator</span><span class="p">(</span>
</span><span class='line'>  <span class="mi">500</span><span class="p">,</span>  <span class="err">/&lt;em&gt; Kbps &lt;/em&gt;/</span>
</span><span class='line'>  <span class="mi">80</span><span class="p">,</span>   <span class="err">/&lt;em&gt; millisecs latency &lt;/em&gt;/</span>
</span><span class='line'>  <span class="mi">200</span><span class="p">,</span>  <span class="err">/&lt;em&gt; jitter &lt;/em&gt;/</span>
</span><span class='line'>  <span class="mi">1</span>     <span class="o">/&lt;</span><span class="nx">em</span><span class="o">&gt;</span> <span class="nx">packet</span> <span class="nx">loss</span> <span class="o">&lt;</span><span class="sr">/em&gt;/</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>コメントは書き手の意図を読み手に知らせるためにある</h2>

<p>コメントは書き手の意図を読み手に伝えるための重要な情報の一つです。
プロジェクトの規模や、言語の特性によってコメントの量は変わりますが、
大切なことは、「<strong>読み手の立場</strong>」に立ってコメントを残すことだと思います。</p>

<ul>
<li>コードからわかることをコメントに書かない</li>
<li>コードを書いている時の <strong>自分の考え</strong> を記録する</li>
<li><strong>コードの欠陥・ハマりそうな罠</strong> を知らせる(TODO/FIXME/HACK/XXXなど)</li>
<li>読む人が <strong>質問</strong> しそうなことを書いておく</li>
<li>全体像を <strong>要約</strong> したコメントを残す</li>
<li>コメントの曖昧さを排除する、動作を明確に記述する( <strong>実例</strong> を残す)</li>
</ul>


<h2>制御フローを読みやすくする</h2>

<ul>
<li>条件式は左側に <strong>変化する</strong> 値、右側にあまり <strong>変化しない</strong> 値を置く</li>
<li>基本は、if/elseを使う。三項演算子は <strong>簡潔</strong> になる時だけ使う</li>
<li>関数からできる限り <strong>早く返す</strong></li>
<li>ネストを <strong>浅くする</strong> ことで、読み手の負荷を減らす</li>
<li>巨大な式は <strong>分割</strong> して、読み手が1つ1つ飲み込めるようにする</li>
</ul>


<h2>変数と読みやすさとの関係</h2>

<ul>
<li>コードの理解を助けない邪魔な変数は作らない</li>
<li>変数の <strong>スコープを小さくする</strong> (変数が見えるコードの行数をできるだけ短くする)</li>
<li>変数を操作する場所をできるだけ減らす(イミュータブルはトラブルになる傾向が少ない)</li>
</ul>


<h2>読みやすさを意識したリファクタリング</h2>

<ul>
<li><strong>ライブラリ</strong> (標準ライブラリ、APIやパッケージ)を有効に活用する</li>
<li>ロジックを <strong>簡単な言葉</strong> で説明できるようなコードにする</li>
<li><strong>一度に1つのことだけ処理する</strong> ように関数(クラス)を分割する</li>
<li>できるだけコードを <strong>小さく保つ</strong> 、必要になるまで作らない(You Ain't Gonna Need It./YAGNI)</li>
<li><strong>汎用的なコード</strong> を独立したライブラリにすることで、プロジェクトを小さく保つ</li>
</ul>


<h2>テストを読みやすくする</h2>

<ul>
<li><strong>テストにやさしいコードを設計</strong> する</li>
<li>テストコードもメンテナンスコストがかかる。だから、テストコードは必要なテストだけにする</li>
<li><strong>バグの発見・修正</strong> が容易になるように、エラーメッセージを読みやすくする</li>
<li>コードを効果的にテストする最も<strong>単純</strong>な入力をテストに使う</li>
<li>テストの関数に<strong>名前</strong>をつけて、何をテストしているかわかるようにする</li>
</ul>


<h2>コードを読みやすく保ち続ける</h2>

<p>本書に書いてあることと少し逆行しますが、プロジェクトが将来どんなふうに進むかを
意識してコードが「読みやすくあり続ける」ために設計・実装を行っていきたいです。
そうすることで開発しやすいコードが保ち続けられると思います！</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>
]]></content>
  </entry>
  
</feed>
