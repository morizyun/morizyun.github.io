<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Capistrano | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/capistrano/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-02-08T22:07:00+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[無料で werckerで RspecのCI & Capistrano Deploy]]></title>
    <link href="http://morizyun.github.io/blog/wercker-ci-rspec-capistrano-deploy-auto/"/>
    <updated>2015-01-25T11:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/wercker-ci-rspec-capistrano-deploy-auto</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00R48BEEW/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00R48BEEW&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00R48BEEW&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00R48BEEW" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />プライベートなプロジェクトでもRspecをデプロイのたびに実行したくて、『<strong><a href="http://wercker.com/">wercker</a></strong>』を使い始めましてた。
個人的には、Bitbucketのプライベートリポジトリを使って、RSpecで継続的インテグレーションしつつ、CapistranoでDeployできる
一連のプロセスが無料でスピーディに実現できるのでプライベートプロジェクトにめっちゃオススメです！</p>

<br style="clear:both;"/>


<!-- more -->


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>競合サービスとの比較</h2>

<p>無料で使いはじめることができるCIツールには、『<a href="https://circleci.com/">Circle CI</a>』や
『<a href="https://magnum-ci.com/">Magnum CI</a>』などがありますが、日本語の情報が多く、Bitbucketのプライベートリポジトリが使える点を
考えて、『<strong><a href="http://wercker.com/">wercker</a></strong>』を選択しました。</p>

<h2>前提: アプリの環境について</h2>

<p>今回は以下のアプリ構成を対象としています。</p>

<pre>
- アプリ構成
  - Ruby 2.2.0
  - Rails 4.2.0
  - RSpec 3.1.0

- デプロイ先のサーバー構成
  - CentOS
  - RVM

- リモートリポジトリ
  - Bitbucket
</pre>


<h2>weckerでユーザーを作成 &amp; アプリ登録</h2>

<p>(1) GitHubかBitBucketにリポジトリを作ってアプリのコードをプッシュ</p>

<p>(2) 『<strong><a href="http://wercker.com/">wercker</a></strong>』でユーザー登録</p>

<p>(3) werckerで、GitHubかBitBucketのアカウントと連携</p>

<p>(4) werckerにアプリケーションのリポジトリを登録</p>

<p>(5) GitHub or BitBucket側で『<strong>werckerbot</strong>』ユーザーをコラボレーターに追加</p>

<p>ユーザー登録のフローに関しては、『<strong><a href="http://blog.mah-lab.com/2014/01/08/rails-wercker-heroku-deploy/">Githubのプライベートリポジトリでも無料で使えるCI、Werckerを使ってrails newからHerokuのデプロイまでやってみる</a></strong>』
がわかりやすくてオススメっす！</p>

<h2>wercker.ymlの設定</h2>

<p>werckerでは、RailsプロジェクトのRootパスに<code>wercker.yml</code>を作成すると
そのステップにそって、スクリプトを実行することができます。</p>

<p>ちなみに僕は上記の『<strong>アプリ構成</strong>』でRSpecとCapistranoでデプロイするスクリプトはこんな感じです。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>box: wercker/rvm
</span><span class='line'>services:
</span><span class='line'>  - wercker/postgresql
</span><span class='line'>build:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;steps:
</span><span class='line'>    - rvm-use:
</span><span class='line'>        version: 2.2.0
</span><span class='line'>
</span><span class='line'>    <span class="c"># A step that executes `bundle install` command</span>
</span><span class='line'>    - bundle-install:
</span><span class='line'>        <span class="nb">jobs</span>: 4
</span><span class='line'>
</span><span class='line'>    <span class="c"># A step that prepares the database.yml using the database in services</span>
</span><span class='line'>    - rails-database-yml:
</span><span class='line'>        service: postgresql
</span><span class='line'>
</span><span class='line'>    <span class="c"># A custom script step, name value is used in the UI</span>
</span><span class='line'>    <span class="c"># and the code value contains the command that get executed</span>
</span><span class='line'>    - script:
</span><span class='line'>        name: <span class="nb">echo </span>ruby information
</span><span class='line'>        code: |
</span><span class='line'>            <span class="nb">echo</span> <span class="s2">&quot;ruby version $(ruby --version) running&quot;</span>
</span><span class='line'>            <span class="nb">echo</span> <span class="s2">&quot;from location $(which ruby)&quot;</span>
</span><span class='line'>            <span class="nb">echo</span> -p <span class="s2">&quot;gem list: $(gem list)&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Add more steps here:</span>
</span><span class='line'>    - script:
</span><span class='line'>            name: rspec
</span><span class='line'>            code: bundle <span class="nb">exec </span>rspec --color -f d
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;deploy:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;steps:
</span><span class='line'>    - rvm-use:
</span><span class='line'>        version: 2.2.0
</span><span class='line'>    - bundle-install:
</span><span class='line'>        <span class="nb">jobs</span>: 4
</span><span class='line'>    - script:
</span><span class='line'>        name: make .ssh directory
</span><span class='line'>        code: mkdir -p <span class="s2">&quot;$HOME/.ssh&quot;</span>
</span><span class='line'>    - create-file:
</span><span class='line'>        name: write ssh key
</span><span class='line'>        filename: <span class="nv">$HOME</span>/.ssh/id_rsa
</span><span class='line'>        overwrite: <span class="nb">true</span>
</span><span class='line'><span class="nb">        </span>hide-from-log: <span class="nb">true</span>
</span><span class='line'><span class="nb">        </span>content: <span class="nv">$WERCKER_SSH_KEY_PRIVATE</span> <span class="c"># 独自鍵設定の場合は、$DEPLOY_KEY</span>
</span><span class='line'>    - script:
</span><span class='line'>        name: <span class="nb">set </span>permissions <span class="k">for </span>ssh key
</span><span class='line'>        code: chmod 0400 <span class="nv">$HOME</span>/.ssh/id_rsa
</span><span class='line'>    - cap:
</span><span class='line'>        stage: <span class="nv">$WERCKER_DEPLOYTARGET_NAME</span>
</span><span class='line'>        tasks: deploy
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>環境変数の設定</h2>

<h3>(1) デプロイ用のブランチ名とターゲット名を設定</h3>

<p>wercker => アプリ => Settings => Deploy Target
に Deploy Targetで「production」を作成し、branch名「master」を
設定してください。</p>

<h3>(2) サーバーの認証鍵の設定</h3>

<p>こちらは任意の設定ですが、オススメの鍵情報の設定は、『wercker => アプリ => Settings => SSH Keys』
からwerckerデプロイ専用の鍵を作って設定する方法です。</p>

<p>もし何らかの事情で独自の鍵情報を使いたい場合には、『wercker => アプリ => Settings => PIPLINE』
に独自の環境変数<code>DEPLOY_KEY</code>(例)を作って、秘密鍵を登録しています。</p>

<h2>werckerでRSpecを実行</h2>

<p>あとはいつも通り、gitにソースコードをプッシュすると、自動的にwerckerでCIが実行されます。</p>

<p>CIが成功すると、werckerからDEPLOYボタンが押せるようになるので、それを実行するとcapistranoのタスクを実行してくれます。</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Special Thanks</h2>

<p><a href="http://blog.mah-lab.com/2014/01/08/rails-wercker-heroku-deploy/">Githubのプライベートリポジトリでも無料で使えるCI、Werckerを使ってrails newからHerokuのデプロイまでやってみる | mah365</a></p>

<p><a href="http://milk1000cc.hatenablog.com/entry/20131130/1385810747">wercker + Capistrano で自動デプロイ - milk1000cc's blog</a></p>

<p><a href="http://deeeet.com/writing/2014/10/16/wercker/">Werckerの仕組み，独自のboxとstepのつくりかた | SOTA</a></p>

<p><a href="http://masutaka.net/chalow/2014-10-04-1.html">Werckerのデプロイボタンはなんだかんだ言って便利だった / マスタカの ChangeLog メモ</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[capistranoでサーバのログをストリーム表示 capistrano-colorized-stream]]></title>
    <link href="http://morizyun.github.io/blog/log-stream-capistrano-rails/"/>
    <updated>2013-05-31T20:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/log-stream-capistrano-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4899773501/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4899773501&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4899773501&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774155942" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Capistranoを使って複数サーバのログをストリーム表示させるためのGem『<strong><a href="https://github.com/sonots/capistrano-colorized-stream">capistrano-colorized-stream</a></strong>』の紹介です。複数サーバを監視していたり、ログをちょっと見るのにSSHでログインするのが面倒なときなどに活用出来ます。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>ログ表示のサンプル</h2>

<p>ログ表示のサンプルです。</p>

<p><img src="https://f.cloud.github.com/assets/2290461/68476/308c50de-5f35-11e2-8f5d-61b1dd62626a.png" width="640" height="358" alt="capistrano-colorized-stream"></p>

<p>サーバごとに色付けされるので見やすいですよね！</p>

<h2>Gemのインストール</h2>

<p><code>Gemfile</code>に以下を追加して、コンソールで<code>bundle</code>を実行してください。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;capistrano/s</span><span class="n">tream</span><span class="err">で色付け表示</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;gem &#39;capistrano-colorized-stream&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>基本動作</h2>

<p>サーバの<code>/var/log/syslog</code>をストリーム表示させたい場合について。<br/>
apistranoの<code>deploy</code>ファイル内で以下のコードを追加。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/colorized_stream&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;task :syslog do</span>
</span><span class='line'><span class="sr">  stream &quot;tail -f /</span><span class="n">var</span><span class="o">/</span><span class="n">log</span><span class="o">/</span><span class="n">syslog</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p>あとは以下のコマンドを実行するとサーバのログがストリーム表示されるようになります！</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>cap syslog
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>公式/関連サイト</h2>

<p>このGemのアイデアをブログにされていた@niku4iさんの記事はこちら。</p>

<p><strong><a href="http://orihubon.com/blog/2012/02/09/streaming-log-with-capistrano/">Streaming Log with Capistrano - ni-blog</a></strong></p>

<p>capistrano-colorized-streamの公式GitHubはこちら。</p>

<p><a href="https://github.com/sonots/capistrano-colorized-stream" class="button big primary" title="selenium RubyBindings">sonots/capistrano-colorized-stream · GitHub</a></p>
]]></content>
  </entry>
  
</feed>
