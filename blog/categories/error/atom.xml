<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Error | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/error/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-31T09:53:20+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rambulance Rails 4.2時代の簡単 404/500エラー対応]]></title>
    <link href="http://morizyun.github.io/blog/rambulance-error-handling-ruby-gem-rails/"/>
    <updated>2015-02-01T11:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rambulance-error-handling-ruby-gem-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/477416366X/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=477416366X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=477416366X&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=477416366X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />最近作っているRailsアプリで、404/500エラーの対応をしている時に知ったgem 『<strong><a href="https://github.com/yuki24/rambulance">yuki24/rambulance</a></strong>』
の紹介です。</p>

<p>一言で言うと、ものすごく簡単にRailsのエラーハンドリングを行ってくれつつ、エラーページを構築できるgemです。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>インストール手順</h2>

<p>いつもどおり<code>Gemfile</code>に以下を追加。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Error handling&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;gem <span class="s1">&#39;rambulance&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>そして以下のコマンドを実行してインストールしてください。(pathは適宜変更)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install --path vendor/bundle --jobs<span class="o">=</span>4
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>環境設定</h2>

<p>エラーページのviewや、設定ファイルを生成してくれます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g rambulance:install&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;generating templates:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;create  app/views/errors/bad_request.html.haml&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;create  app/views/errors/forbidden.html.haml&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;create  app/views/errors/internal_server_error.html.haml&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;create  app/views/errors/not_found.html.haml&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;create  app/views/errors/unprocessable_entity.html.haml&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;create  app/views/errors/bad_request.json.jbuilder&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;create  app/views/errors/forbidden.json.jbuilder&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;create  app/views/errors/internal_server_error.json.jbuilder&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;create  app/views/errors/not_found.json.jbuilder&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;create  app/views/errors/unprocessable_entity.json.jbuilder&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;#&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;generating initializer:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;create  config/initializers/rambulance.rb&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>エラーごとに表示するページを変更</h2>

<p>エラーごとに表示するページを変更するには、<code>config/initializers/rambulance.rb</code>を適宜変更してください。
また、個人的にlayoutは<code>nil</code>にしておくほうがはまりにくいと思います！</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;エラーページのハンドリング方法はこんな感じ&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">config</span><span class="o">.</span><span class="n">rescue_responses</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1"># &quot;ActiveRecord::RecordNotUnique&quot; =&gt; :unprocessable_entity,</span>
</span><span class='line'>  <span class="c1"># &quot;CanCan::AccessDenied&quot;          =&gt; :forbidden,</span>
</span><span class='line'>  <span class="c1"># &quot;Pundit::NotAuthorizedError&quot;    =&gt; :forbidden,</span>
</span><span class='line'>  <span class="c1"># &quot;YourCustomException&quot;           =&gt; :not_found</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;エラーページのレイアウトはnilにしておくのがオススメ&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">config</span><span class="o">.</span><span class="n">layout_name</span> <span class="o">=</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>開発環境での確認方法</h2>

<p><code>config/environments/development.rb</code>に以下を追記したら、開発環境でエラーが出た際にrambulanceのエラー画面が表示されます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;--------------------------------&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Error</span> <span class="no">Handling</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;--------------------------------&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">config</span><span class="o">.</span><span class="n">consider_all_requests_local</span> <span class="o">=</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>エラー処理を独自実装したい場合</h2>

<p>もしエラー処理を独自実装したい場合は以下のコマンドでエラー処理用のひな形を生成してくれます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g rambulance:exceptions_app&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;create  app/handlers/exceptions_app.rb&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ちなみに、最初はエラー通知をAirbrakeで自分でコードを書いて通知させていたんですが、作者の<strong><a href="https://twitter.com/yuki24">@yuki24</a></strong>
から、Airbrakeのミドルウェアがやってくれるから、自作しなくていいという話を教えてもらいました。有難うございます！</p>

<p>まだ、使い始めて日が浅いので間違い等あればコメントよろしくお願いします！</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>変更来歴</h2>

<p>(2015-01-31 11:55) 新規作成
(2015-02-01 11:30) Airbrakeの自作通知ハンドラーを削除</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsの404/500エラーページ、簡単作成手順]]></title>
    <link href="http://morizyun.github.io/blog/custom-error-404-500-page/"/>
    <updated>2015-01-25T11:25:00+09:00</updated>
    <id>http://morizyun.github.io/blog/custom-error-404-500-page</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4048867725/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4048867725&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4048867725&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4048867725" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Railsアプリで簡単に自分で作った404/500エラーページを表示させる手順です。404/500エラーページもユーザビリティの面やコンバージョンの面で非常に重要ですよね！</p>

<p>あるRailsアプリでルーティング系のエラーはルートにリダイレクトするようにしていたのですが、SEO的にはNGだと知りました。『<strong>ソフト404エラー</strong>』と呼ばれており、ルーティングがないのに404ステータスを返さないのは検索エンジンさん的には無しだそうです。ということで、Webサービスを作るときにはルーティングと、エラー時の挙動をしっかり制御したほうがいいと反省中です。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>routes.rbでのルーティングの修正</h2>

<p><code>config/initializers/production.rb</code></p>

<h2>ApplicationControllerにエラー発生時のメソッドを追加</h2>

<p><code>app/controllers/application_controller.rb</code>にエラー発生時のためのメソッドを追加。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="c1"># 例外ハンドル</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">!</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">development?</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;rescue_from Exception,                        with: :render_500</span>
</span><span class='line'><span class="sr">rescue_from ActiveRecord::RecordNotFound,     with: :render_404</span>
</span><span class='line'><span class="sr">rescue_from ActionController::RoutingError,   with: :render_404</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">routing_error</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;raise ActionController::RoutingError.new(params[:path])</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">render_404</span><span class="p">(</span><span class="n">e</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;logger.info &quot;Rendering 404 with exception: </span><span class="si">#{</span><span class="n">e</span><span class="o">.</span><span class="n">message</span><span class="si">}</span><span class="sr">&quot; if e</span>
</span><span class='line'>
</span><span class='line'><span class="sr">if request.xhr?</span>
</span><span class='line'><span class="sr">  render json: { error: &#39;404 error&#39; }, status: 404</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  format = params[:format] == :json ? :json : :html</span>
</span><span class='line'><span class="sr">  render template: &#39;errors/e</span><span class="n">rror_404</span><span class="s1">&#39;, formats: format, status: 404, layout: &#39;</span><span class="n">application</span><span class="s1">&#39;, content_type: &#39;</span><span class="n">text</span><span class="o">/</span><span class="n">html</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">end</span>
</span><span class='line'><span class="s1">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;  end&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;  def render_500(e = nil)&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;pre&gt;&lt;code&gt;logger.info &quot;Rendering 500 with exception: #{e.message}&quot; if e</span>
</span><span class='line'><span class="s1">Airbrake.notify(e) if e # Airbrake/Errbitを使う場合はこちら</span>
</span><span class='line'>
</span><span class='line'><span class="s1">if request.xhr?</span>
</span><span class='line'><span class="s1">  render json: { error: &#39;</span><span class="mi">500</span> <span class="n">error</span><span class="s1">&#39; }, status: 500</span>
</span><span class='line'><span class="s1">else</span>
</span><span class='line'><span class="s1">  format = params[:format] == :json ? :json : :html</span>
</span><span class='line'><span class="s1">  render template: &#39;</span><span class="n">errors</span><span class="o">/</span><span class="n">error_500</span><span class="s1">&#39;, formats: format, status: 500, layout: &#39;</span><span class="n">application</span><span class="s1">&#39;, content_type: &#39;</span><span class="n">text</span><span class="o">/</span><span class="n">html</span><span class="err">&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>errors/error_404</code>、<code>errors/error_500</code>は動的にページを生成する場合の設定方法です。ちなみに静的なページにしたい場合は上のコードの<code>render</code>の部分を以下のように変更。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>render file: Rails.root.join<span class="o">(</span><span class="s1">&#39;public/404.html&#39;</span><span class="o">)</span>, status: 404, layout: <span class="nb">false</span>, content_type: <span class="s1">&#39;text/html&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>カスタムエラー用のViewの作成</h2>

<p><code>app/views/errors/error_404.html.haml</code>と<code>app/views/errors/error_500.html.haml</code>を作成して404/500エラー時のViewを作成。</p>

<p>たったこれだけで、404/500エラー発生時のユーザーの印象を改善できると思います。ぜひチャレンジしてみて下さい！</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Special Thanks</h2>

<p><strong><a href="http://memo.yomukaku.net/entries/8">Railsでカスタムな404エラーのページを出力する方法 - memo.yomukaku.net</a></strong></p>

<p><strong><a href="http://ar156.dip.jp/tiempo/publish/52">Rails3の全体的な例外ハンドル - Tiempo</a></strong></p>

<p><strong><a href="http://stackoverflow.com/questions/2385799/how-to-redirect-to-a-404-in-rails">http status code 404 - How to redirect to a 404 in Rails? - Stack Overflow</a></strong></p>

<h2>更新履歴</h2>

<p>(12-07 15:40) 変なフォーマットを指定された時の対応</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenSSLエラー Certificate Verify Failed[RVMエラー][Rails][Mac限定]]]></title>
    <link href="http://morizyun.github.io/blog/rvm-ruby-rails-certificate-verify-failed/"/>
    <updated>2013-06-21T07:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rvm-ruby-rails-certificate-verify-failed</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4797371838/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4797371838&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4797371838&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4797371838" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />RVM環境のRailsで<code>https</code>プロトコルのURLにアクセスをしたところ下記のエラーが発生しました。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">openssl</span><span class="o">::</span><span class="n">ssl</span><span class="o">::</span><span class="n">sslerror</span><span class="p">:</span> <span class="n">ssl_connect</span> <span class="n">returned</span><span class="o">=</span><span class="mi">1</span> <span class="n">errno</span><span class="o">=</span><span class="mi">0</span> <span class="n">state</span><span class="o">=</span><span class="n">sslv3</span> <span class="n">read</span> <span class="n">server</span> <span class="n">certificate</span> <span class="n">b</span><span class="p">:</span> <span class="n">certificate</span> <span class="n">verify</span> <span class="n">failed</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ということで対策法を見つけたので、念のためメモしておきます。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>RVMのSSL証明書を更新</h2>

<p>まずは、RVMを最新に更新。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm get head
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>つづいて、RVMのSSL証明書を更新。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rvm osx-ssl-certs update all&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Updating certificates...と出れば成功&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>これで私の環境下では<code>https</code>にアクセスできるようになりました。</p>

<h2>自動的にSSL証明書を更新する</h2>

<p>SSL証明書は定期的にダメになるっぽいです。なので、自動でSSLを更新するように設定する方法です。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo rvm osx-ssl-certs cron install
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Special Thanks</h2>

<p><strong><a href="http://railsapps.github.io/openssl-certificate-verify-failed.html">OpenSSL Errors and Rails – Certificate Verify Failed · RailsApps</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ruby] Reactorパターンについて]]></title>
    <link href="http://morizyun.github.io/blog/reactor-pattern-ruby/"/>
    <updated>2013-06-20T16:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/reactor-pattern-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4844333755/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4844333755&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4844333755&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4844333755" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Reactorパターンとは、複数の入力による同時並行なリクエストを扱うための並列プログラミングパターンのことです。ネットワークなどのI/O待ち時間の影響を最低限にすることができるそうです。</p>

<p>例えばWebサーバは複数のユーザーのブラウザからリクエストを受けます。この複数のリクエストをうまく一つづつ捌くときなどに活躍してくれます。</p>

<p>今回はこのReactorパターンを勉強した際のメモ的記事です。ツッコミ大歓迎です！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>EventMachine</h2>

<p>RubyのReactorパターンの実装を協力にたすけてくれるフレームワークが「<strong>EventMachine</strong>」です。EventMachineはソケットの受信待機、ネットワーク接続の確立、タイマー処理、長時間かかるタスクをバックグラウンドなスレッドに回すことができるスレッドプールを提供してくれます。</p>

<h2>EventMachine/em-http-request</h2>

<p>では、EventMachineとEventMachineでのHTTPによる通信をサポートしてくれるGem「<strong><a href="https://github.com/igrigorik/em-http-request">em-http-request</a></strong>」をつかって複数のWebサイトにアクセスするサンプルソースを作っていきます。</p>

<p>まずは、Gem <code>em-http-request</code>をinstall。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="n">install</span> <span class="n">em</span><span class="o">-</span><span class="n">http</span><span class="o">-</span><span class="n">request</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>次にWebサイトにアクセスするサンプルソースのコード。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;eventmachine&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;em-http-request&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;URL = &#39;https:/</span><span class="o">/</span><span class="n">twitter</span><span class="o">.</span><span class="n">com</span><span class="s1">&#39;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;EM.run do</span>
</span><span class='line'><span class="s1">  1.upto(5) do |i|&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;pre&gt;&lt;code&gt;# 5回URLを取得するリクエストを出す</span>
</span><span class='line'><span class="s1">http = EM::HttpRequest.new(URL).get(</span>
</span><span class='line'><span class="s1">  :path =&amp;gt; &#39;</span><span class="o">/</span><span class="s1">&#39;,</span>
</span><span class='line'><span class="s1">  :query =&amp;gt; &#39;</span><span class="err">&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># レスポンスが帰ってきたら呼び出される</span>
</span><span class='line'><span class="n">call_back</span> <span class="o">=</span> <span class="nb">proc</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">http</span><span class="o">.</span><span class="n">response</span>
</span><span class='line'>  <span class="no">EM</span><span class="o">.</span><span class="n">stop</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">5</span> <span class="c1"># 5回レスポンスを取得したら終了</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">http</span><span class="o">.</span><span class="n">callback</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">call_back</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>テストの際は、自分のサーバに対して行うことをおすすめします。</p>

<p>実際はもう少し例を増やしてまとめたかったんですが、まだまだ勉強不足な点を痛感中。
<strong>Special Thanks</strong>に書いたサイトさん方はとってもわかりやすいんでよかったら、そちらもご覧ください。</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Special Thanks</h2>

<p><a href="http://osamunmun.blogspot.jp/2013/03/ruby-eventmachine.html">osamunmunのblog: [Ruby] Eventmachineを使った非同期処理</a></p>

<p><a href="http://keijinsonyaban.blogspot.jp/2010/12/eventmachine.html">見えないチカラ: 【翻訳】EventMachine入門</a></p>

<p><a href="http://satoryu-diary.cloudfoundry.com/20121113.html#f20121113-01-02">今更だけど、em-http-requestの使い方をまとめておく - Satoryu's Diary(2012-11-13)</a></p>
]]></content>
  </entry>
  
</feed>
