<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-02-08T22:13:39+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rubyのprotected methodってどんなときに使うの？]]></title>
    <link href="http://morizyun.github.io/blog/protected-refinements-sendagaya.rb/"/>
    <updated>2016-02-01T23:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/protected-refinements-sendagaya.rb</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774178020/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774178020&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774178020&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774178020" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />2/1(月)に開催された「<strong><a href="https://sendagayarb.doorkeeper.jp/">Sendagaya.rb</a></strong>」に参加してきたので、その際に教えてもらった、「protected」ってどんなときに使うのってお話です。
間違っている可能性も過分にありますので、間違ってたら偉い人教えて下さい。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>public、private、protected について</h2>

<p><strong><a href="http://docs.ruby-lang.org/ja/1.9.3/doc/spec=2fdef.html#limit">クラス／メソッドの定義</a></strong></p>

<pre>
- public に設定されたメソッドは制限なしに呼び出せます
- private に設定されたメソッドは関数形式でしか呼び出せません
- protected に設定されたメソッドは、そのメソッドを持つオブジェクトがselfであるコンテキスト(メソッド定義式やinstance_eval)でのみ呼び出せます
</pre>


<p>サンプルですが、
「<strong><a href="http://tenderlovemaking.com/2012/09/07/protected-methods-and-ruby-2-0.html">Protected Methods and Ruby 2.0 | Tenderlovemaking</a></strong>」
を拝借させていただきつつ紹介。</p>

<p>```ruby</p>

<h1>public protected, private メソッドを持つクラス</h1>

<p>class MyClass
  # Internal Visibility
  def sample_instance_method</p>

<pre><code># public
puts public_method #=&gt; OK
puts self.public_method #=&gt; OK

# protected
puts protected_method #=&gt; OK
puts self.protected_method #=&gt; OK

# private
puts private_method #=&gt; OK
# privateメソッドはselfをつけてはいけない
puts self.private_method #=&gt; raises NoMethodError
</code></pre>

<p>  end</p>

<p>  def public_method; 'public_method' end</p>

<p>  protected
  def protected_method; 'protected_method' end</p>

<p>  private
  def private_method; 'private_method' end
end</p>

<h1>Internal Visibility</h1>

<p>MyClass.new.sample_instance_method</p>

<h1>External Visibility</h1>

<p>my_class = MyClass.new
puts my_class.public_method    # => OK
puts my_class.protected_method # => raises NoMethodError
puts my_class.private_method   # => raises NoMethodError
```</p>

<p>じゃあどんなときに、<code>protected</code>を使えるかというと;</p>

<p>```ruby
class Sample
  def == other</p>

<pre><code>if self.class == other.class
  internal == other.internal
else
  super
end
</code></pre>

<p>  end</p>

<p>  protected
  def internal; :sample; end
end</p>

<p>Sample.new == Sample.new #=> true
```</p>

<p>このように <code>==</code> メソッドを作る時などに、レシーバをつけつつ、外部に内部のデータのgetterを公開したくない場合などに有効そう。</p>

<h2>あとがき</h2>

<p>考えたことなかったです。めっちゃ勉強になりました！</p>

<h2>Sendagaya.rb最高！</h2>

<p>2/1(月)の、<strong><a href="https://sendagayarb.doorkeeper.jp/">Sendagaya.rb</a></strong>はこんなことをしました。</p>

<ul>
<li>メタプログラミングRubyの輪読(2章)</li>
<li>ActiveRecord 5.0.0.beta1.1のCHANGELOGを読む</li>
</ul>


<p><strong><a href="https://twitter.com/tkawa">@tkawa</a></strong>さんの解説がめっちゃ丁寧で分かりやすかったです！</p>

<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メタプログラミング Ruby 第2版 / 第2章 オブジェクトモデル [勉強メモ]]]></title>
    <link href="http://morizyun.github.io/blog/meta-programing-ruby-book-chapter2-review/"/>
    <updated>2016-02-01T23:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/meta-programing-ruby-book-chapter2-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />メタプログラミングRubyを読んでいます。完全自分用のメモ記事です。
第2章で特に参考になった部分を中心に書いています。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>メタプログラミングとは</h2>

<p>コードを記述するためのコードを書くことである</p>

<h2>2章</h2>

<h3>オープンクラス</h3>

<p>```ruby
require "monetize"</p>

<p>standard_price = 100.to_money('USD')
standard_price.format #=> $100.00
```</p>

<p>とある場合、 <code>to_money</code> は以下のように <code>Numeric</code> クラスを拡張して実装されている。</p>

<p>```ruby
class Numeric
  def to_money(currency = nil)</p>

<pre><code>Monetize.from_numeric(self, currency || Money.default_currency)
</code></pre>

<p>  end
end
```</p>

<p>Rubyは標準クラスでも気軽に拡張できる。
既存のクラスを再オープンして、気軽に拡張できる。これをオープンクラスという。
安易なパッチはバグを誘発するため、モンキーパッチともいう。</p>

<p>しかし例えば拡張したメソッドが標準クラスのメソッドだった場合、その影響範囲が大きくなってしまう。
モンキーパッチの代替案としては、<code>Refinements</code> などを使うことである。</p>

<h3>Classの親クラスは Module</h3>

<p><code>ruby
Class.superclass #=&gt; Module
</code></p>

<p>Class はオブジェクトの生成やクラスを継承するためのインスタンスメソッド new, allocate superclass を追加したモジュールである。</p>

<h3>load と require の違い</h3>

<pre>
- load => loadはコードを実行するために使う。呼び出す度にファイルを実行する
- require => requireはライブラリをインポートするために使う。ファイルは一度しか読み込まない。
</pre>


<h3>モジュールの継承関係</h3>

<p>継承チェーンはクラスからスーパークラスに向かって進む。
それだけではなく、継承チェーンにはモジュールも含まれる。</p>

<p>```ruby
module M1
  def my_method</p>

<pre><code>'M1#my_method()'
</code></pre>

<p>  end
end</p>

<p>module M2
  def my_method_second</p>

<pre><code>'M2#my_method_second()'
</code></pre>

<p>  end
end</p>

<p>class C
  include M1
  prepend M2
end</p>

<p>class D &lt; C; end</p>

<h1>継承関係を見るメソッド</h1>

<p>puts D.ancestors.to_s # => [D, M2, C, M1, Object, Kernel, BasicObject]
```</p>

<p>このようにM1やKernelなどのModuleも継承関係に含まれている事がわかる。</p>

<p>ちなみに、モジュールがすでにチェーンに存在していた場合は、2回目の挿入を無視する。
(何度も継承チェーンに同じオブジェクトが含まれることはない)</p>

<h3>Rubyにおける private について</h3>

<p>```ruby
class C
  def public_method_no_self</p>

<pre><code>private_method
</code></pre>

<p>  end</p>

<p>  def public_method_with_self</p>

<pre><code>self.private_method
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def private_method</p>

<pre><code>'called private method'
</code></pre>

<p>  end
end</p>

<p>puts C.new.public_method_no_self</p>

<p>puts C.new.public_method_with_self
```</p>

<h3>Refinementsについて</h3>

<p>module で限定されたスコープの中でのみ、Stringを限定して拡張できる。</p>

<p>```ruby
module StringExtensions
  refine String do</p>

<pre><code>def reverse
  'esrever'
end
</code></pre>

<p>  end
end</p>

<p>module Strings
  using StringExtensions</p>

<p>  puts 'my_string'.reverse #=> esrever
end</p>

<p>puts 'my_string'.reverse #=> gnirts_ym
```</p>

<p>これにより、モンキーパッチで発生するようなグローバルな変更を避けることができる。
ただし、<code>Refinements</code>は新しい機能で、将来挙動が変わる可能性がある。
そのことを理解したうえで、プログラムを書くべきである。</p>

<h3>まとめ</h3>

<ul>
<li>オブジェクトは複数のインスタンス変数とクラスへのリンクで構成</li>
<li>インスタンス目ドッドはオブジェクトの Class に住んでいる</li>
<li>クラスは Class クラスのオブジェクトである。クラスは単なる定数である</li>
<li>Class は Module のサブクラスである</li>
<li>Module は基本的にはメソッドをまとめたものである</li>
<li>クラスは new でインスタンス化したり、 superclass で階層構造を作ったりできる</li>
<li>クラスはそれぞれ、BasicObject まで続く継承チェーンを持っている</li>
<li>クラスにモジュールをinclude(prepend)すると、そのクラスの継承チェーンの真上(下)にモジュールが挿入される</li>
<li>メソッドを呼び出すときには、レシーバがselfになる</li>
<li>モジュール(あるいはクラス)を定義するときには、そのモジュールがselfになる</li>
<li>インスタンス変数は常にselfのインスタンス変数とみなされる</li>
</ul>


<h2>Tips: トップレベル</h2>

<p><code>ruby
self #=&gt; main トップレベルでのselfを表すオブジェクト
self.class #=&gt; Object
</code></p>

<h2>refinementsの使いドコロの難しさ</h2>

<p><code>refinements</code>は便利だけど、メソッドの一覧で取得できない場合があり、直感的ではないのでいずれこの仕様は変わる可能性がありそう。</p>

<p>```ruby
class MyClass
  def my_method</p>

<pre><code>'original method'
</code></pre>

<p>  end</p>

<p>  def fuga</p>

<pre><code>"fuga"  
</code></pre>

<p>  end
end</p>

<p>module MyClassExtensions
  refine MyClass do</p>

<pre><code>def my_method
'refinement method'
end

def hoge
  'hogehoge'
end
</code></pre>

<p>  end
end</p>

<p>module Foo
  using MyClassExtensions
  puts (MyClass.new.methods - Object.instance_methods).to_s #=> :hoge がメソッドにない
end
```</p>

<h2>サンプルソース</h2>

<p>何かの役に立つこともあるかもなので、リポジトリも公開しておきます。</p>

<p><strong><a href="https://github.com/morizyun/meta_programming_ruby2">morizyun/meta_programming_ruby2 - GitHub</a></strong></p>

<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://blog.jnito.com/entry/20120315/1331754912">JavaやC#の常識が通用しないRubyのprivateメソッド - give IT a try</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveModelを使って、Classにバリデーションなどの便利機能を追加 [Rails4.2]]]></title>
    <link href="http://morizyun.github.io/blog/activemodel-rails-basic-usage/"/>
    <updated>2016-01-11T21:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/activemodel-rails-basic-usage</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00NM7VROQ/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00NM7VROQ&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00NM7VROQ&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00NM7VROQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
RailsのModelで便利に使っているバリデーションなどの機能をオブジェクトに追加する際には、<code>include ActiveModel::Model</code> がお手軽で便利ですよというお話です。
ちょっとボケて失念してしまっていたので、念のためメモです。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>できること</h2>

<p>この <code>include ActiveModel::Model</code> でできることはこちら。</p>

<ul>
<li><code>Hoge.new({fuga: pugi})</code> みたいなイニシャライズができる</li>
<li>attributeのバリデーションを作れる</li>
<li><code>form_for</code> などで使える</li>
</ul>


<h2>実装例</h2>

<p>オブジェクトの実装はこちら。</p>

<p>```ruby</p>

<h1>app/forms/non_model.rb</h1>

<p>class Form::NonModel
  # ------------------------------------------------------------------
  # Modules
  # ------------------------------------------------------------------
  include ActiveModel::Model # Modelの便利機能とか</p>

<p>  # ------------------------------------------------------------------
  # Attributes
  # ------------------------------------------------------------------
  attr_accessor :foo, :bar</p>

<p>  # ------------------------------------------------------------------
  # Validations
  # ------------------------------------------------------------------
  validates :foo, presence: true
  validates :bar, presence: true
end
```</p>

<p>オブジェクトを使う際はこちら。</p>

<p>```ruby</p>

<h1>バリデーションOKのオブジェクト</h1>

<p>vaiid_form = Form::NonModel.new(foo: 'foooo', bar: 'baaaan!')
vaiid_form.valid? #=> true</p>

<h1>バリデーションNGのオブジェクト</h1>

<p>invalid_form = Form::NonModel.new(foo: 'foooo')
invalid_form.valid? #=> false
invalid_form.errors #=> #&lt;ActiveModel::Errors:0x007fe6bb19df58 @base=#&lt;Form::NonModel:0x007fe6beec6038 @errors=#&lt;ActiveModel::Errors:0x007fe6bb19df58 ...>, @foo="foooo", @validation_context=nil>, @messages={:bar=>["を入力してください。"]}>
```</p>

<p>地味だけど、便利です。Fat Modelを避けるために、責務に応じたオブジェクトを作る際に適用範囲は広いです。</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>あどがき</h2>

<p>「<strong><a href="http://qiita.com/kbaba1001/items/e265ad1e40f238931468">Ruby - Rails のアーキテクチャ設計を考える - Qiita</a></strong>」も勉強になる。
チームへの導入コスト等も考えつつ、検討していきたい！</p>

<h2>Special Thanks</h2>

<ul>
<li><a href="http://tanihiro.hatenablog.com/entry/2014/01/09/193720">【ruby】ActiveModelを使ってDBと関係ないFormを作成する【Rails】 - tanihiro.log</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【Rails初学者向け】Nokogiriをつかって他のWebサイトから情報を取得しよう]]></title>
    <link href="http://morizyun.github.io/blog/nokogiri-scraping-ruby-rails-begineer/"/>
    <updated>2016-01-01T21:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/nokogiri-scraping-ruby-rails-begineer</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4797376279/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4797376279&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4797376279&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4797376279" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
ここでは、Rails初学者向けにWebサイトから情報を収集してくるチュートリアルを紹介します。
Nokogiriを使ったサンプルアプリを作ります！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Nokogiriの基本的な説明</h2>

<p><strong><a href="http://morizyun.github.io/blog/ruby-nokogiri-scraping-tutorial/">Nokogiri を使った Rubyスクレイピング</a></strong></p>

<h2>プロジェクトを作成</h2>

<h3>ローカル開発の場合</h3>

<p>ターミナルで以下のコマンドを実行してください。</p>

<p>```</p>

<h1>新しいRailsアプリを作成</h1>

<p>rails new web_scraping_sample --skip-bundle</p>

<h1>web_scraping_sample のフォルダに移動</h1>

<p>cd web_scraping_sample
```</p>

<h3>Cloud 9の場合</h3>

<ul>
<li>『<strong><a href="https://c9.io/">Cloud9</a></strong>』にログインして新しいworkspaceを作成</li>
<li>公開していい場合は public 、公開したくない場合は private のRailsアプリを作成してください</li>
</ul>


<h2>Gemfileに以下を追加</h2>

<p>プロジェクト直下のGemfileを開いて以下を追加して下さい。</p>

<p>```ruby</p>

<h1>Web Scraping</h1>

<p>gem 'nokogiri'
```</p>

<p>追加したらターミナルで以下のコマンドを実行します。</p>

<p><code>
bundle install --jobs=4 --path=vendor/bundle
</code></p>

<p>Ruby Gemライブラリをインターネットから持ってきて、自動でローカルに保存します。</p>

<h2>rake タスクの作成</h2>

<p>Rakeタスクを作成します。ターミナルで以下のコマンドを実行してください。</p>

<p>```</p>

<h1>railsコマンドで rake タスク を作成(generate)します</h1>

<p>rails g task scrape
```</p>

<p>すると、<code>lib/tasks/scrape.rake</code> が作成されます。</p>

<p>ちなみに、<code>Rake</code> とはRubyで記述されたプログラムをコマンドプロンプト(ターミナル)から呼び出し、実行することができる仕組みのことです。</p>

<p>rakeタスクをもう少し知りたい場合は、「<strong><a href="http://qiita.com/mosson/items/9a9b0703ac4c76ebfd4e">Rakeタスクをつくる</a></strong>」がオススメです！</p>

<h2>取得スクリプトを書く</h2>

<p>今回は NaverまとめのTechページからタイトルの一覧を取得する手順です。</p>

<p><code>lib/tasks/scrape.rake</code>を開いて以下の内容を追記してください。</p>

<p>```ruby</p>

<h1>URLにアクセスするためのライブラリの読み込み</h1>

<p>require 'open-uri'</p>

<p>namespace :scrape do</p>

<p>  desc 'NaverまとめのTechページからタイトルを取得'
  task :naver_title => :environment do</p>

<pre><code># スクレイピング先のURL
url = 'http://matome.naver.jp/tech'

charset = nil
html = open(url) do |f|
  charset = f.charset # 文字種別を取得
  f.read # htmlを読み込んで変数htmlに渡す
end

# htmlをパース(解析)してオブジェクトを作成
doc = Nokogiri::HTML.parse(html, nil, charset)

doc.xpath('//li[@class="mdTopMTMList01Item"]').each do |node|
  # タイトルの取得
  puts node.css('h3').inner_text
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>これを実行すると以下の様になります。</p>

<p>```
bundle exec rake scrape:naver_title</p>

<h1>=> 写真撮って探しものができるアプリ3選</h1>

<h1>=> 洋楽好き必見！！音楽の世界が広がるアプリ７選</h1>

<h1>=> スマホやPCの「ブルーライト」の量が破壊的！健康対策は大丈夫？</h1>

<h1>=> 趣味はかどるわー！ディープなSNSがこんなにあった(ﾟдﾟ)</h1>

<h1>=> ちょっとしたシーンで役立つ１０のショートカットキー</h1>

<h1>=> ネイルでスマホを操れる？『爪センサー』が画期的</h1>

<h1>=> 壁を有効活用したい・・！お洒落な「壁掛けアイテム」たち</h1>

<h1>=> Googleも開始。「パスワードなし」でログインの時代キタ？</h1>

<h1>=> イヤホンの音がクリアに…！身近ガジェットの簡単お手入れ法</h1>

<h1>=> 日本にもこれ欲しい！海外で発売されている斬新な便利グッズ</h1>

<h1>=> 次々と数億円を集めるスタートアップが魅力的だった</h1>

<h1>=> ３Dじゃない方のプリンターも面白いのがたくさんあった</h1>

<h1>=> なにこれスゴい！自転車を盗んだヤツを見つける最新グッズ</h1>

<h1>=> トラックボールで作業効率UP！もうマウスなんて使わない！</h1>

<h1>=> 可視化でわかりやすく！医療の見える化が思った以上に見えている！</h1>

<h1>=> 眠れない夜にさよなら「本当に熟睡出来る」評判の快眠アプリ5選</h1>

<h1>=> エネループの代わりになる「おしゃれな」充電池たち</h1>

<h1>=> なにこれすごい…アメリカ軍の開発が未来を先取りしてる</h1>

<h1>=> 手に着けるだけのリストバンド型ガジェットで健康を記録する</h1>

<h1>=> AppleWatchピンチ？進化したスマートウォッチのいま</h1>

<p>```</p>

<h2>Nokogiriで参考になりそうなサイト</h2>

<p>実際にNokogiriのコードを書くときに役に立ちそうなチートシート的なサイトを紹介しておきます。</p>

<ul>
<li><strong><a href="http://d.hatena.ne.jp/otn/20090509/p1">スクレイピングのためのNokogiri利用メモ</a></strong></li>
</ul>


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Special Thanks</h2>

<p><strong><a href="http://www.u-ziq.com/blog/2007/12/ruby_on_rails.html">初心者向けのRuby on Railsの用語説明</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「ぼくのかんがえたさいきょうの Rails スタートダッシュ」というタイトルで発表してきました！]]></title>
    <link href="http://morizyun.github.io/blog/rails-learning-start-dash-slide/"/>
    <updated>2015-12-30T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rails-learning-start-dash-slide</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774178020/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774178020&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774178020&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774178020" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
2015/12/22に社内勉強会で「ぼくのかんがえたさいきょうの Rails スタートダッシュ」というタイトルで発表をしてきました！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>発表スライド</h2>

<p>まずは発表スライドはこちら！</p>

<iframe src="http://morizyun.github.io//www.slideshare.net/slideshow/embed_code/key/h23sQZZPbyzwK6" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<h2>特に伝えたかったこと</h2>

<ul>
<li>Web開発は、git/javascript/css/ruby/CI等々覚えることたくさんで大変</li>
<li>新しい技術もどんどん生まれていくので、学び続けることが大切</li>
<li>学び続けるためには、「楽しむこと」。楽しめるものを見つけよう</li>
<li>Railsは日本語ドキュメント充実してるから、Web 開発を始めたいなという人におすすめ</li>
</ul>


<h2>オススメリンク</h2>

<ul>
<li>(開発環境)

<ul>
<li><strong><a href="http://morizyun.github.io/blog/yosemite-mac-rails-setup-rbenv-ruby/">Mac / Rails開発環境構築手順</a></strong></li>
<li><strong><a href="https://c9.io/">Windows / Cloud9</a></strong></li>
</ul>
</li>
<li>(最初) <strong><a href="http://morizyun.github.io/blog/rails-beginner-first-step-guide/">ぼくのかんがえたさいきょうのRailsファーストガイド</a></strong></li>
<li>(脱初心者) <strong><a href="http://morizyun.github.io/blog/ruby-rails-non-beginner-guide-book/">Ruby on Rails を仕事にしていくための第一歩(Rails Tutorialの巻末掲載)</a></strong></li>
<li>(神ポスト) <strong><a href="http://qiita.com/jnchito/items/dedb3b889ab226933ccf">RubyやRailsでリファクタリングに 使えそうなイディオムとか便利メソッドとか</a></strong></li>
<li>(オススメ書籍) <strong><a href="http://www.amazon.co.jp/gp/product/4873115655/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4873115655&amp;linkCode=as2&amp;tag=morizyun00-22">リーダブルコード</a></strong></li>
<li>(オススメ書籍) <strong><a href="https://leanpub.com/everydayrailsrspec-jp">Everyday Rails - RSpecに よるRailsテスト入門</a></strong></li>
<li>(Gemの検索) <strong><a href="https://www.ruby-toolbox.com/">The Ruby toolbox</a></strong></li>
</ul>


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>
]]></content>
  </entry>
  
</feed>
