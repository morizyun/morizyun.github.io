<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web Server | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/web-server/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-02-10T00:15:15+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[セッションに関するセキュリティリスクについて勉強してみた！]]></title>
    <link href="http://morizyun.github.io/blog/session-web-service/"/>
    <updated>2015-04-27T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/session-web-service</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00R0XW0E4/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00R0XW0E4&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00R0XW0E4&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00R0XW0E4" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
Webサービスに関するセキュリティについて基礎をちゃんと理解したくて勉強をはじめました。
基本的には、『<strong><a href="http://railsguides.jp/security.html">Rails セキュリティガイド — Rails ガイド</a></strong>』
を一から読みながら、大事なところを写経しています。無料なのにめっちゃわかりやすくてはかどります！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>セッションとは</h2>

<p>「リクエストとそのリクエスト元を結びつけるための仕組み」です。
コンピュータがネットワーク通信において、『接続(ログイン)してから切断(ログオフ)』
するまでの一連の動作や時間をさして、 <strong>セッション</strong> と呼びます。
このセッションによって、特定のユーザーがどのような状態にあるかを追跡する事ができます。</p>

<h2>セッションハイジャック</h2>

<p>ユーザのセッションidを盗むと、攻撃者がそのユーザーと偽ってWebアプリケーションを利用
できてしまいます。これを <strong>セッションハイジャック</strong> と呼びます。</p>

<h2>セッションの取り扱いに関するガイドライン</h2>

<p>セッションには巨大なオブジェクトを格納しない。idだけをセッションで保存して、データは
サーバ側に保存すること。また、セッションには重要なデータを保存しない。ユーザーによって
データの改竄や削除が容易なため。</p>

<h2>CookieStoreセッションに対する再生攻撃</h2>

<p>Cookie側に重要なデータを保存して暗号化するのもNG。過去のCookieを再現すること自体は
容易なため、悪意のあるユーザーに古いCookieを再現されてしまい、重要なデータが改竄される
可能性がある。</p>

<p>有効な対策としては、ログイン成功時に古いセッションを破棄して、新しいセッションを生成する。</p>

<h2>Railsのセッション管理</h2>

<pre>
# Cookieでの保存(CookieStore、デフォルト)
セッションの中身を_application_sessionというCookieに保存する。Rails4以降は暗号化している。
クライアント側で操作できてしまうので、過去の状態に戻す等の不正が考えられる。

# DBへの保存
ActiveRecordSessionStoreなどのGemを使うとDBにセッションの中身を保存できる。
サーバ側に保存することでCookieStoreの問題を解消できるがDBへの負荷が上がってしまう。

# メモリへの保存
DalliなどのGemを使うとMemcachedやRedisなどにセッションを保存できる。
DBよりも高速に処理できるが、複数サーバの環境では一箇所のMemcachedやRedisを共有する必要がある。
</pre>


<h2>セッション固定攻撃</h2>

<p>セッションが有効期限切れになるタイミングで、攻撃者が標的のセッションを自分のものと置き換えます。
具体的には、XSSを使ってJavaScriptのコードインジェクションによって置き換えます。
もし、サーバー側がそのセッションを破棄せずに使い続けるような仕様になっている場合は
そのセッションが攻撃者のものと一致した状態でログイン処理を行う。
結果として、攻撃者は標的ユーザーになりすますことができます。</p>

<p>これを防ぐためにログイン時にセッションを破棄して新しいセッションを生成することです。
Railsであれば以下のコマンドを実行すればセッションを破棄することができます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">reset_session</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>セッションに有効期限をつける</h2>

<p>セッションを無期限にした場合、CSRFやセッションハイジャック、セッション固定などの攻撃の機会を増やしてしまいます。
これを防ぐためには、セッションに有効期限を持つようにすることです。ただし、Cookieでセッションを管理する
場合は、ブラウザ内で簡単に有効期限を変更できてしまいます。そのため、セッションの有効期限はサーバーサイド
で管理することが望ましいと言われています。</p>

<h2>CSRF (Cross Site Request Forgeries)</h2>

<p>攻撃の主な流れ。</p>

<pre>
1) 攻撃者が、攻撃用のWebページを作成して WWW上に公開する
2) 第三者が、攻撃用のWebページにアクセスする
3) 第三者が、HTTPリクエストによって、攻撃者のの意図した操作が行われる
</pre>


<h2>Webサイト側のCSRFへの対策</h2>

<p>Webサイト(開発者)側のCSRFへの対策。</p>

<pre>
1) 暗号論的擬似乱数をCookie値とformのhidden値に発行する
2) 一方の値は、偽造を防ぐために暗号学的ハッシュ関数に通す
3) HTTP POST時にその両方の値が一致するかを検証する
</pre>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p><strong><a href="http://thinkit.co.jp/free/tech/9/2/1.html">[ThinkIT] 第2回：セッション管理 (1/4)</a></strong></p>

<p><strong><a href="http://shindolog.hatenablog.com/entry/2014/11/02/164118">Railsのセッション管理方法について - Programming log - Shindo200</a></strong></p>

<p><strong><a href="http://railsguides.jp/security.html">Rails セキュリティガイド — Rails ガイド</a></strong></p>

<p><strong><a href="http://bakera.jp/glossary/%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E5%9B%BA%E5%AE%9A%E6%94%BB%E6%92%83">セッション固定攻撃 | 鳩丸ぐろっさり (用語集)</a></strong></p>
]]></content>
  </entry>
  
</feed>
