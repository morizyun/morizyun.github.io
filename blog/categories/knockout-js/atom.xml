<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Knockout.js | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/knockout-js/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-02-08T22:07:00+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Knockout.js x Rails 4.2 入門ガイド]]></title>
    <link href="http://morizyun.github.io/blog/knockout-js-rails-introduction/"/>
    <updated>2015-08-15T15:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/knockout-js-rails-introduction</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774156116/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774156116&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774156116&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774156116" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />最近仕事の関係で「<strong><a href="http://knockoutjs.com/">Knockout.js</a></strong>」
について勉強をしています。knockout.jsを選定した理由はレビューしてくれる経験者がチームに居たからです。
JSは不得手なので、アドバイスをくれる同僚がいるのはほんとうに有難い限りです。</p>

<p>Knockout.jsのメリットは次の2つだと考えています。</p>

<pre>
- 機能が絞りこまれているので、学習コストが低い
- IE6+などの古いブラウザに対応しているので導入しやすい
</pre>


<p>今回はRailsに「<strong><a href="http://knockoutjs.com/">Knockout.js</a></strong>」を組み込んだサンプルを幾つか紹介していきます。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>サンプルソース</h2>

<p>今回説明するサンプルのソースコードはGitHubで公開しています。</p>

<p><strong><a href="https://github.com/morizyun/knockout_rails_sample">morizyun/knockout_rails_sample</a></strong></p>

<h2>Rails プロジェクトの作成</h2>

<p><code>bash
rails new app_name --skip-turbolinks --skip-bundle
</code></p>

<h2>Gemfileへの追加</h2>

<p>Gemfileに以下を追加。</p>

<p>```ruby</p>

<h1>knockout.js</h1>

<p>gem 'knockoutjs-rails'
```</p>

<p>Gemをインストール</p>

<p><code>bash
bundle install --path=vendor/bundle
</code></p>

<h2>Knockout.jsの読み込み設定</h2>

<p><code>app/assets/javascripts/application.js</code>に以下を追加。</p>

<p><code>javascript
//= require knockout
</code></p>

<h2>サンプルソースの導入</h2>

<p>ここからは<code>Knockout.js</code>のサンプルソースです。
簡単にこんなことができるんだなぁくらいの紹介です。</p>

<h2>Text の監視・出力</h2>

<p>Textを監視して、出力するスクリプト。まずは<code>CoffeeScript</code>。</p>

<p>```coffeescript
textViewModel = ->
  self = this
  self.message = ko.observable("")
  return</p>

<p>ko.applyBindings textViewModel
```</p>

<p>続いてView側。</p>

<p>```html
<input type="value" data-bind="value: message, valueUpdate: 'afterkeydown'"/></p>

<br/>


<br/>


<p><span data-bind="text: message"></span>
```</p>

<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/fzag5Oay79.gif" /></p>

<h2>HTML の監視・出力</h2>

<p>HTMLを監視して、出力するスクリプト。まずは、<code>CoffeeScript</code>。</p>

<p>```coffeescript
htmlViewModel = ->
  self = this
  self.message = ko.observable("")
  self.messageHtml = ko.computed((-></p>

<pre><code>"&lt;em&gt;" + self.message() + "&lt;/em&gt;"
</code></pre>

<p>  ), self)
  return</p>

<p>ko.applyBindings htmlViewModel
```</p>

<p>続いてView側。</p>

<p>```html
<input type="value" data-bind="value: message, valueUpdate: 'afterkeydown'"/></p>

<br/>


<br/>


<div data-bind="html: messageHtml"></div>


<p>```</p>

<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/Id0f8lTlCf.gif" /></p>

<h2>表示&amp;非表示 の制御</h2>

<p>表示&amp;非表示を制御するスクリプト。まずは、<code>CoffeeScript</code>。</p>

<p>```coffeescript
visibleViewModel = ->
  self = this
  self.isTrue = true
  self.isFalse = false
  return</p>

<p>ko.applyBindings visibleViewModel
```</p>

<p>続いてView側。</p>

<p>```html</p>

<div data-bind="visible: isTrue">
    Visible Sample Text for isTrue
</div>


<div data-bind="visible: isFalse">
    Visible Sample Text for isFalse
</div>


<p>```</p>

<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/visible_sample.png" width="300" /></p>

<h2>CSS の制御</h2>

<p>CSSを制御するスクリプト。まずは、<code>CoffeeScript</code>。</p>

<p>```coffeescript
cssViewModel = ->
  self = this
  self.isError = true
  return</p>

<p>ko.applyBindings cssViewModel
```</p>

<p>続いてView側。</p>

<p>```html</p>





<div data-bind="css: {error: isError}">
    CSS Sample Text
</div>


<p>```</p>

<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/css_sample.png" width="200" /></p>

<h2>attr (htmlタグの属性) の制御</h2>

<p>htmlタグの属性を制御するスクリプト。まずは、<code>CoffeeScript</code>。</p>

<p>```coffeescript
attrViewModel = ->
  self = this
  self.hrefAttr = ko.observable(</p>

<pre><code>href: 'http://www.google.co.jp'
title: 'Google'
</code></pre>

<p>  )
  return</p>

<p>ko.applyBindings attrViewModel
```</p>

<p>続いてView側。</p>

<p>```html
<a href data-bind="attr: hrefAttr"></p>

<pre><code>Attr Sample Text
</code></pre>

<p></a>
```</p>

<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/attr_sample.png" width="200" /></p>

<h2>checkbox (htmlタグ) の制御</h2>

<p>checkboxを制御するスクリプト。まずは、<code>CoffeeScript</code>。</p>

<p>```coffeescript
checkboxViewModel = ->
  self = this
  self.items = ko.observableArray([</p>

<pre><code>'hoge'
'piyo'
</code></pre>

<p>  ])
  return</p>

<p>ko.applyBindings checkboxViewModel
```</p>

<p>続いてView側。</p>

<p>```html</p>

<div>
    <input type="checkbox" value="hoge" data-bind="checked: items" /> : hoge
</div>


<div>
    <input type="checkbox" value="fuga" data-bind="checked: items" /> : fuga
</div>


<div>
    <input type="checkbox" value="piyo" data-bind="checked: items" /> : piyo
</div>


<p>```</p>

<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/checkbox_sample.png" width="300" /></p>

<h2>foreach (繰り返し) の制御</h2>

<p>foreach(繰り返し)を制御するスクリプト。まずは、<code>CoffeeScript</code>。</p>

<p>```coffeescript
foreachViewModel = ->
  self = this
  self.items = ko.observableArray([</p>

<pre><code>'hoge'
'fuga'
'piyo'
</code></pre>

<p>  ])</p>

<p>  self.addItem = -></p>

<pre><code>self.items.push('add')
</code></pre>

<p>  self.removeItem = -></p>

<pre><code>self.items.pop()
</code></pre>

<p>  return</p>

<p>ko.applyBindings foreachViewModel
```</p>

<p>続いてView側。</p>

<p>```html</p>

<ul data-bind="foreach: { data: items, as: 'item' }">
    <li><span data-bind="text: $index"></span> : <span data-bind="text: item"></span></li>
</ul>




<div>
    <button data-bind="click: addItem">Add Item</button>
</div>


<div>
    <button data-bind="click: removeItem">Remove Item</button>
</div>


<p>```</p>

<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/foreach_sample.gif" width="300" /></p>

<h2>select (htmlタグ) の制御</h2>

<p>select (htmlタグ)を制御するスクリプト。まずは、<code>CoffeeScript</code>。</p>

<p>```coffeescript
selectViewModel = ->
  self = this
  self.items = ko.observableArray([{</p>

<pre><code>id: 11
name: 'HOGE'
</code></pre>

<p>  }, {</p>

<pre><code>id: 22
name: 'FUGA'
</code></pre>

<p>  }, {</p>

<pre><code>id: 33
name: 'PIYO'
</code></pre>

<p>  }])</p>

<p>  self.toId = (item) -></p>

<pre><code>"id_" + item.id
</code></pre>

<p>  self.toLabel =  (item) -></p>

<pre><code>"label_" + item.name
</code></pre>

<p>  return</p>

<p>ko.applyBindings selectViewModel
```</p>

<p>続いてView側。</p>

<p>```html</p>

<div>
  <select data-bind="options: items, optionsValue: toId, optionsText: toLabel"></select>
</div>


<p>```</p>

<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/select_sample.png" width="300" /></p>

<h2>template の管理</h2>

<p>template の管理に関するスクリプト。まずは、<code>CoffeeScript</code>。</p>

<p>```coffeescript
templateViewModel = ->
  self = this
  self.templateModel = ko.observable({ message: 'Hello Template!!' })
  return</p>

<p>ko.applyBindings templateViewModel
```</p>

<p>続いてView側。</p>

<p>```html</p>

<div data-bind="template: {name: 'sampleTemplate', data: templateModel}"></div>




<script type="text/html" id="sampleTemplate">
    <i data-bind="text: message"></i>
</script>


<p>```</p>

<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/template_sample.png" width="200" /></p>

<h2>カスタムバインディング(custombinding) の制御</h2>

<p>カスタムバインディング(custombinding) の制御に関するスクリプト。まずは、<code>CoffeeScript</code>。</p>

<p><code>coffeescript
ko.bindingHandlers.myBinding = init: (element, valueAccessor, allBindings) -&gt;
  param = valueAccessor()
  element.innerText = 'Custom Binding param = ' + param
</code></p>

<p>続いてView側。</p>

<p>```html</p>

<div data-bind="myBinding: 101"></div>


<p>```</p>

<p><img src="http://morizyun.github.io/images/knockout-js-rails-introduction/custombinding_sample.png" width="300" /></p>

<h2>本格的に勉強していくのに役立ちそうな資料</h2>

<p>ここから、Knockout.jsを勉強していくのにあたって役に立ちそうな資料のリンクを書いておきます。</p>

<ul>
<li><strong><a href="http://learn.knockoutjs.com/#/?tutorial=intro">learn.knockoutjs.com</a></strong></li>
<li><strong><a href="http://kojs.sukobuto.com/docs/">ドキュメント | Knockout.js 日本語ドキュメント</a></strong></li>
<li><strong><a href="http://qiita.com/advent-calendar/2014/knockoutjs">KnockoutJS Advent Calendar 2014 - Qiita</a></strong></li>
</ul>


<h2>あとがき</h2>

<p>全体としては、確かに学習コストが少なくて簡単に使い始められそうな印象です。
特定のことをやろうとした時にjQueryよりもわかりやすくコードを書けると思います。</p>

<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>
]]></content>
  </entry>
  
</feed>
