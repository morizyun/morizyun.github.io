<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: elasticsearch | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/elasticsearch/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-02-02T11:11:14+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elasticsearch Sever勉強メモ 基本的な概念や基本API、マッピングについて]]></title>
    <link href="http://morizyun.github.io/blog/elasticsearch-server-basic-api/"/>
    <updated>2016-01-04T23:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/elasticsearch-server-basic-api</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00J4KDYZU/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00J4KDYZU&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00J4KDYZU&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00J4KDYZU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />『<strong><a href="http://www.amazon.co.jp/gp/product/B00J4KDYZU/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=B00J4KDYZU&amp;linkCode=as2&amp;tag=morizyun00-22">Elasticsearch Sever</a></strong>』を読んで勉強をしたことの俺得メモです。今回は基本的な概念や基本API、マッピングについてです。</p>

<p>英語ですが、公式ドキュメント『<strong><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html">Elasticsearch Reference [2.1]</a></strong>』も充実しているのでななめ読みしています！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>curlを使うときに便利なjq</h2>

<p>コマンドラインでのJSONの整形に「<strong><a href="https://stedolan.github.io/jq/">jq</a></strong>」が便利でした。良かったらぜひ。</p>

<p><code>
brew install jq
</code></p>

<p>こんな感じでcurlの結果をパイプで渡すと、結果を見やすく整形してくれます。</p>

<p><code>
curl -XPUT http://localhost:9200/post -d '{ "title" : "manual post title 1", "body" : "manual post body 1" }' | jq
</code></p>

<p>詳しい使い方は公式のチュートリアル『<strong><a href="https://stedolan.github.io/jq/tutorial/">Tutorial - jq</a></strong>』あたりがおすすめです</p>

<h2>Elasticsearch の基本概念</h2>

<h3>Elasticsearchの論理的な構成要素</h3>

<p>検索で使うデータの構成要素のイメージ。</p>

<pre>
- インデックス
  - ドキュメントの集合体。リレーショナルDBのテーブルのようなもの。格納された値は、全文検索に最適化される。
- ドキュメントタイプ
  - 1つのインデックス内に複数のオブジェクトを格納できる。その区分のこと。
- ドキュメント
  - リレーショナルDBのレコードのようなもの。型(type)は自動で決まることも、強制することもできる
</pre>


<h3>Elasticsearchの物理的な構成要素</h3>

<p>インデックスを物理的に構成する要素。</p>

<pre>
- クラスタ(cluster)
  - 複数サーバで協調して動かした場合のサーバ群をクラスタと呼ぶ。
- ノード(node)
  Elasticsearchのプロセスをノードと呼ぶ。クラスタの構成要素。
- シャード(shard)
  - 大量のドキュメントを処理するために、小さな部分インデックスに分割して複数のサーバに格納する。これをシャードという。
  - デフォルトでは5つのPrimary Shardと各Primary Shardごとに1つのReplica Shardに分類される
  - Primary Shard
    - インデックスの書き込みと参照処理で利用される
  - Replica Shard
    - クエリのスループットや高可用性を実現するためにシャードを完全にコピーしたレプリカを作ることができる
    - クラスタ内では自動的にプライマリとなるシャードを選定することができる
</pre>


<p><code>Replica Shard</code>は動的に数を変更可能だが、<code>Primary Shard</code>は一度インデックスを作成すると変更できません。</p>

<h2>Elasticsearchの基本的なAPI</h2>

<p>Elasticsearchはいろんな操作を行うためのAPIがそろっています。いくつか触りを紹介します。</p>

<pre>
- インスタンス情報に関するAPI
  - curl -XGET http://localhost:9200/

- インデックス(データの論理的な構造)の操作に関するAPI
  - インデックスの作成
    - curl -XPOST http://localhost:9200/post
  - インデックスの構造取得
    - curl -XGET http://localhost:9200/post
  - インデックスの削除
    - curl -XDELETE http://localhost:9200/post

- ドキュメント(インデックスの中のデータ)の操作に関するAPI
  - ドキュメントの新規作成
    - curl -XPOST http://localhost:9200/post/post -d '{ "id" : 1, "title" : "manual post title 1" }'
  - ドキュメントの更新
    - curl -XPUT http://localhost:9200/post/1 -d '{ "id" : 1, "title" : "manual post title 1" }'
  - ドキュメントの取得
    - curl -XGET http://localhost:9200/post/1
  - ドキュメントの削除
    - curl -XDELETE http://localhost:9200/post/1
</pre>


<h2>マッピングについて</h2>

<p>スキーママッピングとは、インデックスの構造を定義を行うことです。</p>

<p>公式ドキュメント「<strong><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html">Mapping | Elasticsearch</a></strong>」がおすすめ。</p>

<h3>マッピングファイルの作成</h3>

<p>マッピング情報を格納する <code>blog.json</code> を作成します。</p>

<p>構造として配下のようになっています。</p>

<pre>
- ドキュメントタイプ : articles (記事)
- articles のフィールド情報
  - id : 一意の識別子(整数型)
  - title: タイトル(文字列)
</pre>


<p>では実際のファイルです。</p>

<p>```json</p>

<h1>blog.json</h1>

<p>{</p>

<pre><code>"mappings" : {
    "articles" : {
        "properties" : {
            "id" : { "type" : "long", "store" : "yes" },
            "title" : { "type" : "string", "store" : "yes", "index" : "analyzed" }
        }
    }
}
</code></pre>

<p>}
```</p>

<p>ファイルを作ったら以下のコマンドでインデックス作成 &amp; マッピングの定義を実行。</p>

<p><code>
$ curl -XPOST 'http://localhost:9200/blog' -d @blog.json | jq
</code></p>

<p><code>@blog.json</code> は curl の <code>blog.json</code> を指定するための設定。</p>

<h3>マッピングのフィールドの型定義</h3>

<p>触りだけだけどこんな感じの基本型(Core Type)がある。</p>

<pre>
- String : 文字列。アナライザを細かく指定できる。
- Number : 数値。floatやdoubleなどの方がある。
- Date : 日付。フォーマットはいろいろ指定できる。
- Booelean : 真偽値を扱う。
- Binary : BASE64形式のバイナリデータ。画像などを格納するために使う。
</pre>


<p>それぞれの型情報に対して、更に属性情報を定義できる。</p>

<p>以下は共通的な型情報です。</p>

<pre>
- index
  - "analyzed" => 検索可能なフィールド
  - "no" => 検索できないフィールド
  - "not_analized" => アナライザによって処理されないが、完全一致での検索はできる
- store
  - "yes" フィールドにインデックスの元の値を保存する
  - "no" フィールドにインデックスの元の値を保存しない。_sourceを使うと値を取得できる。
- boost
  - フィールドがドキュメントでどのくらい重要かを表す
- null_value
  - 値がない場合に、デフォルトで登録される値
- include_in_all
  - フィールドが _allに含まれるかどうかを設定するフィールド
</pre>




<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearchを使ったRailsサンプルアプリの作成]]></title>
    <link href="http://morizyun.github.io/blog/elasticsearch-rails-tutorial/"/>
    <updated>2016-01-03T21:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/elasticsearch-rails-tutorial</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00J4KDYZU/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00J4KDYZU&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00J4KDYZU&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00J4KDYZU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
検索機能を実装するときによく使われているElasticsearchをRailsで使うためのサンプルアプリの作成の手順を作りました。入門レベルです！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Elasticsearchの導入</h2>

<p>拙著『<strong><a href="/blog/elasticsearch-kibana-setup-mac/">Elasticsearch 2.1 + Kibana 4.1 + Marvel のMacへのセットアップ</a></strong>』を良ければご参考ください。</p>

<h2>Rails サンプルアプリ</h2>

<p>Railsのサンプルアプリを作成します。今回は <code>Article</code>(記事) のモデルを持つことにします。</p>

<p>```</p>

<h1>Railsアプリの作成</h1>

<p>rails new elasticsearch_sample --skip-bundle</p>

<h1>フォルダを移動</h1>

<p>cd elasticsearch_sample</p>

<h1>DBの作成</h1>

<p>rake db:create</p>

<h1>article テーブルの定義を作成</h1>

<p>bundle exec rails g scaffold article title:string body:text</p>

<h1>article テーブルを作成</h1>

<p>bundle exec rake db:migrate
```</p>

<p>GemfileにElasticsearch用のgemを追加します。</p>

<p>```ruby</p>

<h1>Gemfile</h1>

<h1>Elasticsearch</h1>

<p>gem 'elasticsearch-model', git: 'git://github.com/elasticsearch/elasticsearch-rails.git'
gem 'elasticsearch-rails', git: 'git://github.com/elasticsearch/elasticsearch-rails.git'
```</p>

<p>追加したらターミナルで以下のコマンドを実行してgemをインストールします。</p>

<p><code>
bundle install --jobs=4 --path=vendor/bundle
</code></p>

<h2>ModelにElasticsearchを使うための設定</h2>

<p>次に<code>Article</code>モデルにElasticsearchを使うための設定をします。</p>

<p>```ruby</p>

<h1>app/models/article.rb</h1>

<p>class Article &lt; ActiveRecord::Base
  include ArticleSearchable
end
```</p>

<p>今回はconcernにElasticsearchに関する処理を切り出します。</p>

<p>```ruby</p>

<h1>app/models/concerns/article_searcable.rb</h1>

<p>module ArticleSearchable
  extend ActiveSupport::Concern</p>

<p>  included do</p>

<pre><code>include Elasticsearch::Model

# インデックスするフィールドの一覧
INDEX_FIELDS = %w(title body).freeze

# インデックス名
index_name "es_sample_article_#{Rails.env}"

# マッピング情報
settings do
  mappings dynamic: 'false' do # 動的にマッピングを生成しない
    indexes :title, analyzer: 'kuromoji', type: 'string'
    indexes :body,  analyzer: 'kuromoji', type: 'string'
  end
end

# インデックスするデータを生成
# @return [Hash]
def as_indexed_json(option = {})
  self.as_json.select { |k, _| INDEX_FIELDS.include?(k) }
end
</code></pre>

<p>  end</p>

<p>  module ClassMethods</p>

<pre><code># indexの作成メソッド
def create_index!
  client = __elasticsearch__.client
  client.indices.delete index: self.index_name rescue nil
  client.indices.create(index: self.index_name,
                        body: {
                            settings: self.settings.to_hash,
                            mappings: self.mappings.to_hash
                        })
end
</code></pre>

<p>  end
end
```</p>

<p>インデックス名には環境情報をつけておきます。</p>

<p>理由はlocalでのテストをしやすくするためです。</p>

<h2>index作成のrakeタスクを作成</h2>

<p>続いてindexを作成するrake タスクを作ります。</p>

<p>まずはrakeタスクを作成するために、以下のコマンドをターミナルで実行します。</p>

<p><code>
rails g task elasticsearch
</code></p>

<p>作成されたrakeタスクを以下の様に変更します。</p>

<p>```ruby</p>

<h1>lib/tasks/elasticsearch.rake</h1>

<p>namespace :elasticsearch do
  desc 'Elasticsearch のindex作成'
  task :create_index => :environment do</p>

<pre><code>Article.create_index!
</code></pre>

<p>  end</p>

<p>  desc 'Article を Elasticsearch に登録'
  task :import_article => :environment do</p>

<pre><code>Article.import
</code></pre>

<p>  end
end
```</p>

<p>ではインデックスを作成します。</p>

<p><code>
bundle exec rake elasticsearch:create_index
</code></p>

<p><code>http://localhost:9200/_plugin/head/</code> にアクセスして「es_sample_article_development => info => Metadata」
の中身が以下の様になっていたら成功です！</p>

<p><img src="https://farm2.staticflickr.com/1510/24062169671_9781dc7e17_z.jpg" width="556" height="640"></p>

<p>ちなみに、curlコマンドでもマッピングを確認できます。
ターミナルで以下のコマンドを実行してみてください。</p>

<p>```
curl -XGET 'localhost:9200/es_sample_article_development/_mapping/article?pretty=true'
{
  "es_sample_article_development" : {</p>

<pre><code>"mappings" : {
  "article" : {
    "dynamic" : "false",
    "properties" : {
      "body" : {
        "type" : "string",
        "analyzer" : "kuromoji"
      },
      "title" : {
        "type" : "string",
        "analyzer" : "kuromoji"
      }
    }
  }
}
</code></pre>

<p>  }
}
```</p>

<h2>サンプルデータの作成</h2>

<p>サンプルデータを作成します。</p>

<p>```ruby</p>

<h1>db/seeds.rb</h1>

<p>ActiveRecord::Base.transaction do
  # ===========================
  # 記事(Article)
  # ===========================
  Article.delete_all
  10.times do |idx|</p>

<pre><code>Article.create!(
    title: "タイトル #{idx}",
    body: "本文 #{idx}"
)
</code></pre>

<p>  end
end
```</p>

<p>Elasticsearchにデータを登録します。</p>

<p>```</p>

<h1>サンプルデータの生成</h1>

<p>bundle exec rake db:seed</p>

<h1>Elasticsearchへの登録</h1>

<p>bundle exec rake elasticsearch:import_article
```</p>

<p><code>http://localhost:9200/_plugin/head/</code> から「Structured Query」を選択して色々いじるとデータが格納されていることがわかると思います！</p>

<p><img src="https://farm2.staticflickr.com/1607/24037229962_fc29541c95.jpg" width="500" height="346"></p>

<p>ちなみに、<code>rails console</code> からでも色々試せるのでぜひ色々遊んでみてください！</p>

<p>```ruby
Article.search('9').results.count</p>

<h1>=> 1</h1>

<p>Article.search('9').results.first</p>

<h1>=> #&lt;Elasticsearch::Model::Response::Result:0x007fb7ebac0a08 @result=#&lt;Hashie::Mash <em>id="10" </em>index="es_sample_article_development" <em>score=1.1972358 </em>source=#&lt;Hashie::Mash body="本文 9" created_at="2016-01-03T11:02:46.578Z" id=10 title="タイトル 9" updated_at="2016-01-03T11:02:46.578Z"> _type="article">></h1>

<p>Article.search(query: {term: {title: "5"} }).records.first</p>

<h1>=> Article Load (0.1ms)  SELECT "articles".* FROM "articles" WHERE "articles"."id" = 6</h1>

<h1>=> #<Article id: 6, title: "タイトル 5", body: "本文 5", created_at: "2016-01-03 11:02:46", updated_at: "2016-01-03 11:02:46"></h1>

<p>```</p>

<h2>とりあえず一覧の検索を実装</h2>

<p><code>articles_controller</code> の <code>index</code> を以下のように変更。</p>

<p>```ruby</p>

<h1>app/controllers/articles_controller.rb</h1>

<p>class ArticlesController &lt; ApplicationController
  def index</p>

<pre><code>@articles =if params[:search]
             Article.search(params[:search]).records
           else
             Article.all
           end
</code></pre>

<p>  end
end
```</p>

<p>viewも以下を追加。</p>

<p>```ruby</p>

<h1>app/views/articles/index.html.erb</h1>

<p>&lt;%= form_tag articles_path, :method => :get do %></p>

<pre><code>&lt;%= text_field_tag :search, params[:search] %&gt;
&lt;%= submit_tag 'Search', :name =&gt; nil %&gt;
</code></pre>

<p>&lt;% end %>
```</p>

<p><code>http://localhost:3000/articles</code> にアクセスすれば検索できると思います！</p>

<p><img src="https://farm6.staticflickr.com/5799/24038700492_75081a1440.jpg" width="500" height="317"></p>

<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://qiita.com/k-shogo/items/8657e0a5fdf20a25bba0">Ruby - railsから全文検索エンジンelasticsearchを利用する - Qiita</a></strong></li>
<li><strong><a href="http://qiita.com/moriyaman/items/373107a3870c33229bac">既存のRailsアプリの検索にElasticSearchを導入してみる - Qiita</a></strong></li>
<li><strong><a href="http://qiita.com/yuku_t/items/d749111f589c88c8315b">Elasticsearch - Qiitaがquery-stringっぽい構文を自前実装した理由 - Qiita</a></strong></li>
<li><strong><a href="http://qiita.com/mosson/items/9a9b0703ac4c76ebfd4e">Rails - Rakeタスクをつくる - Qiita</a></strong></li>
<li><strong><a href="http://ruby-rails.hatenadiary.com/entry/20151018/1445142266">RailsでElasticsearch: 全文検索を実装 - Rails Webook</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elasticsearch 2.1 + Kibana 4.3 + Marvel のMacへのセットアップ]]></title>
    <link href="http://morizyun.github.io/blog/elasticsearch-kibana-setup-mac/"/>
    <updated>2016-01-02T21:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/elasticsearch-kibana-setup-mac</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00MPDUQQI/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00MPDUQQI&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00MPDUQQI&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00MPDUQQI" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
Mac Yosemiteに以下の環境構築する手順をまとめました！</p>

<ul>
<li>全文検索エンジンの『<strong><a href="https://www.elastic.co/products/elasticsearch">Elasticsearch 2.1</a></strong>』</li>
<li>Elasticsearchのデータ表示のツール『<strong><a href="https://www.elastic.co/products/kibana">Kibana 4.3.1</a></strong>』</li>
<li>Elasticsearchの管理ツール『<strong><a href="https://www.elastic.co/products/marvel">Marvel</a></strong>』</li>
</ul>


<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Elasticsearchとは</h2>

<p>ElasticSearchは、Apache Lucene 上で稼働するオープンソースの全文検索システムのことです。
REST APIを使うことができ、jsonでやり取りを行う事ができる。</p>

<h2>Elasticsearch のインストール</h2>

<p>Macの場合は、まずはJavaのインストールです。
<strong><a href="http://www.amazon.co.jp/gp/bestsellers/computers/2151977051/ref=pd_zg_hrsr_computers_1_3_last">Java SE - Downloads | Oracle</a></strong>
からファイルをダウンロードして、インストールします。</p>

<p>次に『<strong><a href="https://www.elastic.co/downloads/past-releases/">Download Elasticsearch | Elastic</a></strong>』からファイルをダウンロードします。</p>

<p>```ruby
brew install elasticsearch</p>

<h1>自動起動の設定</h1>

<p>ln -sfv /usr/local/opt/elasticsearch/*.plist ~/Library/LaunchAgents
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.elasticsearch.plist
```</p>

<p><code>http://localhost:9200/_plugin/head/</code>が見れたら動いていると思います！</p>

<p><img src="https://farm2.staticflickr.com/1600/24036707412_4258a9701a.jpg" width="500" height="376"></p>

<h2>日本語対応で elasticsearch-analysis-kuromoji をインストール</h2>

<p>ターミナルで以下を実行。</p>

<p><code>
plugin install analysis-kuromoji
</code></p>

<p><code>vi /usr/local/etc/elasticsearch/elasticsearch.yml</code>でファイルを開いて以下を追加。デフォルトで kurmoji を使うようにします。</p>

<p>```</p>

<h6>############################ Custom</h6>

<h1>Using kuromoji in default</h1>

<p>index.analysis.analyzer.default.type: custom
index.analysis.analyzer.default.tokenizer: kuromoji_tokenizer
```</p>

<p>ということでElasticsearchを再起動します。</p>

<p><code>
launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.elasticsearch.plist
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.elasticsearch.plist
</code></p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>データビジュアライゼーション Kibana</h2>

<p>ミーハーなので データのビジュアライゼーションツール『<strong><a href="https://www.elastic.co/products/kibana">Kibana</a></strong>』
もインストールします。後で使うかもくらいですww</p>

<p>まずはnodeとnmpが必要となります。もしまだの場合は、
『<strong><a href="http://qiita.com/tagosaku324/items/bf1fe149c38c99728c72">macでNode.jsの環境設定 - Qiita</a></strong>』
を参考にしながらインストールしてみてください。</p>

<p>```ruby</p>

<h1>最新版のURLに置き換えてください</h1>

<p>wget https://download.elastic.co/kibana/kibana/kibana-4.3.1-darwin-x64.tar.gz
tar zxvf kibana-4.3.1-darwin-x64.tar.gz
mv kibana-4.3.1-darwin-x64 kibana
cd kibana</p>

<h1>kibana のサーバを起動</h1>

<p>bin/kibana
```</p>

<p><code>http://localhost:5601/</code> にアクセスするとKibanaの画面が見れると思います。</p>

<p><img src="https://farm6.staticflickr.com/5659/23996427772_e8904e5b3a.jpg" width="500" height="340"></p>

<p>こんな感じの画面が見れれば成功だと思います！</p>

<h2>Elasticsearchの管理プラグイン Mervel</h2>

<p>つづいて、Elasticsearchの管理プラグイン「<strong><a href="https://www.elastic.co/products/marvel">Marvel</a></strong>」をインストールします。
クラスタやインデックスのキャッシュヒット、ドキュメント数などを閲覧できます。</p>

<p>```</p>

<h1>Elasticsearchの plugin をインストール</h1>

<h1>インストール手順: https://www.elastic.co/downloads/marvel</h1>

<p>plugin install license
plugin install marvel-agent</p>

<h1>Kibanaのプラグインとして Marvelをインストール</h1>

<p>cd kibana
./bin/kibana plugin -i elasticsearch/marvel/latest
```</p>

<p>インストールしたら、 ElasticsearchとKibanaを再起動させてください。そして</p>

<p><code>http://localhost:5601/app/marvel</code> にアクセスすると Marvelの画面が見れ得ると思います。</p>

<p><img src="https://farm6.staticflickr.com/5799/24038862862_1fe60fe02e.jpg" width="500" height="365"></p>

<h2>ありがとうございました！</h2>

<blockquote class="twitter-tweet" lang="ja"><p lang="ja" dir="ltr"><a href="https://twitter.com/zyunnosuke">@zyunnosuke</a> 2.xからはkuromojiのインストールはこのようになっています。1.7を選択した理由はそれ以外にもあるんでしょうか？ <a href="https://t.co/M3DOakc4Um">https://t.co/M3DOakc4Um</a></p>&mdash; Jun Ohtani (@johtani) <a href="https://twitter.com/johtani/status/683263779988082688">2016, 1月 2</a></blockquote>


<script async src="http://morizyun.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>ということで、 <a href="https://twitter.com/johtani">@johtani</a> さんのおかげで、無事2.1系で手順をかけました。ありがとうございました＾＾</p>

<br style="clear:both;"/>


<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://qiita.com/watermint/items/fc04baa184be8cbfb251">Using ELK(ElasticSearch 1.4.2 + Logstash 1.4.2 + Kibana 4 Beta3) - Qiita</a></strong></li>
<li><strong><a href="http://qiita.com/atsuya046/items/c53987153487f05e31fd">MacでElasticsearch(1.5.x) + Kuromojiをインストール - Qiita</a></strong></li>
<li><strong><a href="http://ruby-rails.hatenadiary.com/entry/20151018/1445142266">RailsでElasticsearch: 全文検索を実装 - Rails Webook</a></strong></li>
</ul>


<h2>変更来歴</h2>

<p>(2016-01-02 21:40) 新規作成
(2016-01-03 19:40) 記述ミスの修正</p>
]]></content>
  </entry>
  
</feed>
