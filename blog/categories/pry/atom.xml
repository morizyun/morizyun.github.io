<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Pry | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/pry/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-02-02T11:11:14+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pryが真の力を発揮してくれる19個のコマンドとコマンドの自作方法[Rails]]]></title>
    <link href="http://morizyun.github.io/blog/pry-command-rails-ruby/"/>
    <updated>2014-04-16T20:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/pry-command-rails-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00AT1E76S/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00AT1E76S&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00AT1E76S&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00AT1E76S" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />開発の効率を大きく向上してくれるgem Pryをさらに使いこなすための便利なコマンド19個をまとめてみました。標準のコマンドをしっかり理解してPryの使いこなしを目指します！</p>

<p><strong>(04/16 20:55) オススメの記事を追加 その2</strong></p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>オススメ記事</h2>

<p><strong><a href="http://qiita.com/fakestarbaby/items/4a2fe11a817077a2ab96">Pry の簡易的なコマンドまとめ</a></strong><br/>
Pry の設定ファイルや、関連 Gem の簡易的なコマンドをまとめてくれている記事。この記事をひと通り読んだあとに、設定をいじると捗るかも！</p>

<p><strong><a href="http://qiita.com/yusabana/items/8ce54577d959bb085b37">Rails4 今のところ最強なデバッグツール達</a></strong><br/>
開発やテスト環境で使っているGemfileの紹介。pryについてもかなり丁寧に書かれています！</p>

<p><strong><a href="http://www.atmarkit.co.jp/ait/articles/1403/26/news030.html">Ruby 2.1の基本構文／基本文法まとめ＆Pryの使い方</a></strong><br/>
オープンソースのオブジェクト指向プログラミング言語「Ruby」の文法を一から学ぶための入門連載。</p>

<h2>(1) help</h2>

<p><code>help</code>はコマンドの一覧と英語での説明を表示してくれるコマンドです。
何をおいてもこれを覚えておけば、コマンドに困ることはないと思いますw</p>

<h2>(2) cd と ls</h2>

<p><code>cd</code>はオブジェクトへの移動。<br/>
<code>ls</code>はオブジェクトのメソッドや、変数の表示。<br/>
Pryの基本中の基本のコマンドですが超便利・超重要です！</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="no">Object</span><span class="p">):</span><span class="mi">1</span><span class="o">&gt;</span> <span class="n">images</span> <span class="o">=</span> <span class="no">Image</span><span class="o">.</span><span class="n">all</span>           <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="no">ImageSite</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">10</span><span class="o">.</span><span class="mi">4</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">images</span><span class="o">&lt;</span><span class="sr">/code&gt;.* FROM &lt;code&gt;images&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="no">Object</span><span class="p">):</span><span class="mi">1</span><span class="o">&gt;</span> <span class="n">cd</span> <span class="n">images</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="c1">#&lt;Array&gt;):2&gt; ls</span>
</span><span class='line'><span class="no">Enumerable</span><span class="c1">#methods: all?  any?  chunk ...</span>
</span><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">methods</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">pry</span><span class="o">&lt;</span><span class="sr">/strong&gt;</span>
</span><span class='line'><span class="sr">locals: _  &lt;em&gt;dir&lt;/em</span><span class="o">&gt;</span>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">ex</span><span class="o">&lt;</span><span class="sr">/em&gt;  &lt;em&gt;file&lt;/em</span><span class="o">&gt;</span>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="k">in</span><span class="o">&lt;</span><span class="sr">/em&gt;  &lt;em&gt;out&lt;/em</span><span class="o">&gt;</span>  <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">pry</span><span class="o">&lt;</span><span class="sr">/em&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>(3) 特別なローカル情報</h2>

<p>次はSpecial Locals(特別なローカル情報)を表示するための7つのコマンドです。使いこなせれば結構便利です。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;_ : １つ前のコマンドの結果&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;pry<span class="o">(</span>main<span class="o">)</span>&gt; 5 + <span class="nv">5</span>
</span><span class='line'><span class="o">=</span>&gt; 10
</span><span class='line'>pry<span class="o">(</span>main<span class="o">)</span>&gt; _ + <span class="nv">10</span>
</span><span class='line'><span class="o">=</span>&gt; 20&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;&lt;em&gt;ex&lt;/em&gt; : 前に発生した例外情報&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;pry<span class="o">(</span>main<span class="o">)</span>&gt; 4 + <span class="s2">&quot;j&quot;</span>
</span><span class='line'>TypeError: String can<span class="s1">&#39;t be coerced into Fixnum</span>
</span><span class='line'><span class="s1">from (pry):2:in `+&#39;</span>
</span><span class='line'>pry<span class="o">(</span>main<span class="o">)</span>&gt; &lt;em&gt;ex&lt;/em&gt;
</span><span class='line'><span class="o">=</span>&gt; <span class="c">#&amp;lt;TypeError: String can&#39;t be coerced into Fixnum&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;&lt;em&gt;in&lt;/em&gt; : 入力値&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;&lt;em&gt;out&lt;/em&gt; : 出力値&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="o">[</span>25<span class="o">]</span> pry<span class="o">(</span>main<span class="o">)</span>&gt; 1 + <span class="nv">1</span>
</span><span class='line'><span class="o">=</span>&gt; 2
</span><span class='line'><span class="o">[</span>26<span class="o">]</span> pry<span class="o">(</span>main<span class="o">)</span>&gt; 2 + <span class="nv">3</span>
</span><span class='line'><span class="o">=</span>&gt; 5
</span><span class='line'>pry<span class="o">(</span>main<span class="o">)</span>&gt; &lt;em&gt;out&lt;/em&gt;<span class="o">[</span>25<span class="o">]</span> + &lt;em&gt;out&lt;/em&gt;<span class="o">[</span>26<span class="o">]</span>
</span><span class='line'><span class="o">=</span>&gt; 7&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;&lt;em&gt;dir&lt;/em&gt; : ディレクトリパス&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;&lt;em&gt;file&lt;/em&gt; : ファイルパス&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;pry<span class="o">(</span>main<span class="o">)</span>&gt; show-method pry&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;From: /Users/john/ruby/projects/pry/lib/pry/core_extensions.rb @
</span><span class='line'>....&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;pry<span class="o">(</span>main<span class="o">)</span>&gt; &lt;em&gt;file&lt;/em&gt;
</span><span class='line'><span class="o">=</span>&gt; <span class="s2">&quot;/Users/john/ruby/projects/pry/lib/pry/core_extensions.rb&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>(4) find-method</h2>

<p><code>find-method</code>はメソッドを検索してくれます。</p>

<p><img src="http://farm9.staticflickr.com/8331/8405063800_bb71c9b09a.jpg" width="500" height="311" alt="Pry find-method"></p>

<h2>(5) show-models</h2>

<p>MySQLのテーブル定義を参照できるのが、<code>show-models</code>です。</p>

<p><img src="http://farm9.staticflickr.com/8091/8403913615_a95c024696_n.jpg" width="246" height="320" alt="pry show-models"></p>

<h2>(6) show-routes</h2>

<p><img src="http://farm9.staticflickr.com/8351/8405024764_549697d8ac.jpg" width="500" height="115" alt="pry show-routes"></p>

<p>コマンドは次のとおりです。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>show-routes <span class="c">#&amp;lt;= ルーティングの一覧を表示</span>
</span><span class='line'>show-routes --grep new <span class="c">#&amp;lt;= newに絞って表示</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>rake routes</code>より高速です！</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>(7) show-middlewares</h2>

<p>参照しているmiddlewareの一覧を表示してくれるのが、<code>show-middlewares</code>です。<br/></p>

<p><img src="http://farm9.staticflickr.com/8089/8403944403_a0c7961965.jpg" width="500" height="285" alt="Pry show-middlewares"></p>

<h2>(8) reload!</h2>

<p><code>reload!</code>はRails環境全体をリロードしてくれます。</p>

<p><img src="http://farm9.staticflickr.com/8189/8403974843_14cec55a46_n.jpg" width="320" height="100" alt="Pry reload!"></p>

<h2>(9) 自作のPryコマンドの追加</h2>

<p>Pryコマンドの自作もできます。
プロジェクト専用のPryコマンドを作成する場合は、<code>.pryrc</code>をプロジェクト直下に作成。<br/>
共通して使うPryコマンドを作成する場合は、<code>~/.pryrc</code>を作成。<br/>
作成したファイルに下記のように追加。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">command_set</span> <span class="o">=</span> <span class="no">Pry</span><span class="o">::</span><span class="no">CommandSet</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;コマンドの名前&quot;</span><span class="p">,</span> <span class="s2">&quot;コマンドの説明&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="err">引数</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; # ここに処理を書く</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">Pry.config.commands.import my_command_set</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ちなみに、<a href="https://gist.github.com/1297510">このGist</a>には次のような便利なコマンドがありました。</p>

<table>
<thead>
<tr>
<th>コマンド </th>
<th align="left"> 意味・機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>copy </td>
<td align="left"> 引数をクリップボードにコピー</td>
</tr>
<tr>
<td>clear </td>
<td align="left"> 現在のPryの表示をクリア</td>
</tr>
<tr>
<td>sql </td>
<td align="left"> 引数のSQLを実行</td>
</tr>
<tr>
<td>caller_method </td>
<td align="left"> 呼び出し元のメソッドを表示</td>
</tr>
</tbody>
</table>


<p>この4つのコマンドを使いたい場合は、下を.pryrcに追加して下さい。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>%w<span class="o">[</span>rubygems pp logger<span class="o">]</span>.each <span class="k">do</span> |gem|
</span><span class='line'>  begin&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;require gem
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  rescue LoadError
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>Pry.config.editor <span class="o">=</span> <span class="s2">&quot;mate -w&quot;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Default Command Set, add custom methods here:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;default_command_set <span class="o">=</span> Pry::CommandSet.new <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nb">command</span> <span class="s2">&quot;copy&quot;</span>, <span class="s2">&quot;Copy argument to the clip-board&quot;</span> <span class="k">do</span> |str|&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt; IO.popen<span class="o">(</span><span class="s1">&#39;pbcopy&#39;</span>, <span class="s1">&#39;w&#39;</span><span class="o">)</span> <span class="o">{</span> |f| f &amp;lt;&amp;lt; str.to_s <span class="o">}</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="nb">command</span> <span class="s2">&quot;clear&quot;</span> <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;system <span class="s1">&#39;clear&#39;</span>
</span><span class='line'><span class="k">if </span>ENV<span class="o">[</span><span class="s1">&#39;RAILS_ENV&#39;</span><span class="o">]</span>
</span><span class='line'>  output.puts <span class="s2">&quot;Rails Environment: &quot;</span> + ENV<span class="o">[</span><span class="s1">&#39;RAILS_ENV&#39;</span><span class="o">]</span>
</span><span class='line'>end
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="nb">command</span> <span class="s2">&quot;sql&quot;</span>, <span class="s2">&quot;Send sql over AR.&quot;</span> <span class="k">do</span> |query|&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;if ENV<span class="o">[</span><span class="s1">&#39;RAILS_ENV&#39;</span><span class="o">]</span> <span class="o">||</span> defined?<span class="o">(</span>Rails<span class="o">)</span>
</span><span class='line'>  pp ActiveRecord::Base.connection.select_all<span class="o">(</span>query<span class="o">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span>pp <span class="s2">&quot;Pry did not require the environment, try `pconsole`&quot;</span>
</span><span class='line'>end
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  end
</span><span class='line'>  <span class="nb">command</span> <span class="s2">&quot;caller_method&quot;</span> <span class="k">do</span> |depth|&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;depth <span class="o">=</span> depth.to_i <span class="o">||</span> 1
</span><span class='line'><span class="k">if</span> /^<span class="o">(</span>.+?<span class="o">)</span>:<span class="o">(</span><span class="se">\d</span>+<span class="o">)(</span>?::in <span class="sb">`</span><span class="o">(</span>.*<span class="o">)</span><span class="err">&#39;</span><span class="o">)</span>?/ <span class="o">=</span>~ <span class="nb">caller</span><span class="o">(</span>depth+1<span class="o">)</span>.first
</span><span class='line'>  <span class="nv">file</span>   <span class="o">=</span> Regexp.last_match<span class="o">[</span>1<span class="o">]</span>
</span><span class='line'>  <span class="nv">line</span>   <span class="o">=</span> Regexp.last_match<span class="o">[</span>2<span class="o">]</span>.to_i
</span><span class='line'>  <span class="nv">method</span> <span class="o">=</span> Regexp.last_match<span class="o">[</span>3<span class="o">]</span>
</span><span class='line'>  output.puts <span class="o">[</span>file, line, method<span class="o">]</span>
</span><span class='line'>end
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  end
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Pry.config.commands.import default_command_set
</span><span class='line'>Pry.config.should_load_plugins <span class="o">=</span> <span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>(10) urlヘルパーが生成するpath/urlの確認</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">product_index_path</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt; &quot;/</span><span class="n">product</span><span class="s2">&quot;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;app.admin_product_index_url&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;h1&gt;=&gt; &quot;</span><span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">www</span><span class="o">.</span><span class="n">example</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">product</span><span class="s2">&quot;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>(11) リクエストしてコントローラの呼び出し</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">app</span><span class="o">.</span><span class="n">get</span> <span class="s2">&quot;http://0.0.0.0:300/&quot;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt; 200&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">app</span><span class="o">.</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt; レスポンスのhtmlが表示&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>(12) viewヘルパーの呼び出し</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">helper</span><span class="o">.</span><span class="n">number_to_currency</span><span class="p">(</span><span class="mi">7777777</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt; &quot;7,777,777円&quot;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">helper</span><span class="o">.</span><span class="n">image_tag</span> <span class="s2">&quot;https://www.google.co.jp/images/srpr/logo4w.png&quot;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt; &quot;&lt;img alt=\&quot;Logo4w\&quot; src=\&quot;https:/</span><span class="o">/</span><span class="n">www</span><span class="o">.</span><span class="n">google</span><span class="o">.</span><span class="n">co</span><span class="o">.</span><span class="n">jp</span><span class="o">/</span><span class="n">images</span><span class="o">/</span><span class="n">srpr</span><span class="o">/</span><span class="n">logo4w</span><span class="o">.</span><span class="n">png</span><span class="p">\</span><span class="s2">&quot; /&gt;&quot;</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Pry公式Wiki</h2>

<p>Pryは公式のWikiが充実しているので、もし良かったらぜひ見てみて下さい！</p>

<p><a href="https://github.com/pry/pry/wiki" class="button big primary">pry/pry Wiki</a></p>

<h2>こちらもどうぞ：Pryをさらに強力にしてくれる拡張機能</h2>

<p>Pryの拡張機能の紹介は、拙作の<strong>「<a href="/blog/pry-tips-rails-ruby/">Pryの秘めた力を最大限引き出す4つの拡張機能</a>」</strong>をご参照下さい！</p>

<h2>Special Thanks</h2>

<p><a href="http://blog.happyelements.co.jp/2012/10/rubyist-pry-rails-irb-up.html.html">Happy Elements Labs: Rubyist必携 pry-railsを使いこなせば幸せになれる</a></p>

<p><a href="http://qiita.com/items/eeb5dee96e44fca54a2e">rails console の tips #Ruby #Rails - Qiita</a></p>

<h2>変更来歴</h2>

<p>(01/23 11:15) 新規作成<br/>
(03/26 23:05) 『urlヘルパーが生成するpath/urlの確認、リクエストしてコントローラの呼び出し、viewヘルパーの呼び出し』を追加<br/>
(04/05 22:35) オススメの記事を追加<br/>
(04/16 20:55) オススメの記事を追加 その2<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pryの秘めた力を最大限引き出す4つの拡張機能[Rails]]]></title>
    <link href="http://morizyun.github.io/blog/pry-tips-rails-ruby/"/>
    <updated>2013-01-22T13:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/pry-tips-rails-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774154881/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774154881&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774154881&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774154881" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Railsを開発する上で欠かせない、<code>rails console</code>の強化版gem Pryをさらに強化するための拡張機能の紹介です。Pryは単に<code>rails c</code>だけではなく、デバックやドキュメント調査、スタックのチェック、テーブルの中身のチェックなどを強力にサポートしてくれます！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>モデルの中身を綺麗に表示</h2>

<p>Gem <code>hirb</code>を使うとpry画面でスタックの確認や階層の移動ができるようになります。<br/>
(これはPry限定ではなく、irbでもつかえるっぽいです)</p>

<p><img src="http://farm9.staticflickr.com/8046/8403445691_d637cb25e0_c.jpg" width="800" height="348" alt="hirb rails"></p>

<h3>使い方</h3>

<p>(1) 以下のコマンドを実行してGemをインストール(もしくはgem install)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>group :development, :test <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;# PryでのSQLの結果を綺麗に表示
</span><span class='line'>gem <span class="s1">&#39;hirb&#39;</span>
</span><span class='line'>gem <span class="s1">&#39;hirb-unicode&#39;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;end
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>(2) <code>~/.pryrc</code>に以下を追加</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;hirbの設定&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;begin
</span><span class='line'>  require <span class="s1">&#39;hirb&#39;</span>
</span><span class='line'>rescue LoadError
</span><span class='line'>  <span class="c"># Missing goodies, bummer</span>
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;if defined? Hirb
</span><span class='line'>  <span class="c"># Slightly dirty hack to fully support in-session Hirb.disable/enable toggling</span>
</span><span class='line'>  Hirb::View.instance_eval <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;def enable_output_method
</span><span class='line'>  @output_method <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>  @old_print <span class="o">=</span> Pry.config.print
</span><span class='line'>  Pry.config.print <span class="o">=</span> proc <span class="k">do</span> |output, value|
</span><span class='line'>    Hirb::View.view_or_page_output<span class="o">(</span>value<span class="o">)</span> <span class="o">||</span> @old_print.call<span class="o">(</span>output, value<span class="o">)</span>
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def disable_output_method
</span><span class='line'>  Pry.config.print <span class="o">=</span> @old_print
</span><span class='line'>  @output_method <span class="o">=</span> nil
</span><span class='line'>end
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  Hirb.enable
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>(3) Pry画面内でSQLを内部で発行するActiveRecordのコマンドを実行すると、結果が整形されて表示</p>

<p><a href="https://github.com/cldwalker/hirb" class="button big primary">cldwalker/hirb · GitHub</a></p>

<h2>デバッグコマンド</h2>

<p>Gem <code>pry-debugger</code>を使うと、pry画面でデバックコマンド使えるようになります。</p>

<p><img src="http://farm9.staticflickr.com/8515/8403061927_d09d929c58_c.jpg" width="800" height="605" alt="pry-debugger"></p>

<h3>使い方</h3>

<p>(1) 以下のコマンドを実行してGemをインストール(もしくはgem install)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>group :development, :test <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;# pry画面でデバックコマンドを実行
</span><span class='line'>gem <span class="s1">&#39;pry-debugger&#39;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;end
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>(2) <code>~/.pryrc</code>にコマンドのショートカット(下記)を追加する</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;pry-debuggerのショートカット&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Pry.commands.alias_command <span class="s1">&#39;c&#39;</span>, <span class="s1">&#39;continue&#39;</span>
</span><span class='line'>Pry.commands.alias_command <span class="s1">&#39;s&#39;</span>, <span class="s1">&#39;step&#39;</span>
</span><span class='line'>Pry.commands.alias_command <span class="s1">&#39;n&#39;</span>, <span class="s1">&#39;next&#39;</span>
</span><span class='line'>Pry.commands.alias_command <span class="s1">&#39;f&#39;</span>, <span class="s1">&#39;finish&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>(3) ソース内のデバックしたい箇所に<code>binding.remote_pry</code>を追加。</p>

<p>(4) デバック箇所を含む処理を実行。</p>

<p>(5) コンソールで<code>bundle exec pry-remote</code>を実行。</p>

<h3>コマンド一覧</h3>

<table>
<thead>
<tr>
<th>コマンド(ショートカット) </th>
<th align="left"> 意味・機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>step(s) </td>
<td align="left"> 矢印の指している関数の内部に入って1行進める</td>
</tr>
<tr>
<td>next(n) </td>
<td align="left"> 現在の関数内で1行進める</td>
</tr>
<tr>
<td>finish(f) </td>
<td align="left"> 現在の関数から抜ける</td>
</tr>
<tr>
<td>continue(c) </td>
<td align="left"> デバッグから抜けてプログラムを実行する</td>
</tr>
<tr>
<td>break </td>
<td align="left"> 新しいブレークポイントをセットする</td>
</tr>
</tbody>
</table>


<p><a href="https://github.com/nixme/pry-debugger" class="button big primary">Nixme/pry-debugger · GitHub</a></p>

<h2>ドキュメント/ソースコード参照</h2>

<p>Gem <code>pry-doc</code>を使うとpry画面でドキュメント参照ができるようになります。</p>

<p><img src="http://farm9.staticflickr.com/8236/8404222032_101f20a03e.jpg" width="500" height="390" alt="Pry-debugger"></p>

<h3>使い方</h3>

<p>(1) 以下のコマンドを実行してGemをインストール(もしくはgem install)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>group :development, :test <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;# pry画面でのドキュメント/ソース表示
</span><span class='line'>gem <span class="s1">&#39;pry-doc&#39;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;end
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>(2) Pry画面内でドキュメントの参照時には<code>? hoge</code>、ソースコードの参照時には<code>$ fuga</code>を実行</p>

<h3>コマンド一覧</h3>

<table>
<thead>
<tr>
<th>コマンド(ショートカット) </th>
<th align="left"> 意味・機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>show-doc(?) fuga </td>
<td align="left"> fugaのドキュメントを表示</td>
</tr>
<tr>
<td>show-source($) hoge </td>
<td align="left"> hogeのソースコードを表示</td>
</tr>
</tbody>
</table>


<p><a href="https://github.com/banister/pry-doc" class="button big primary">banister/pry-doc · GitHub</a></p>

<h2>スタックの確認</h2>

<p>Gem <code>pry-stack_explorer</code>を使うとpry画面でスタックの確認や階層の移動ができるようになります。</p>

<p><img src="http://farm9.staticflickr.com/8359/8403378857_214d050ff2_c.jpg" width="800" height="451" alt="スクリーンショット 2013-01-22 11.51.21"></p>

<h3>使い方</h3>

<p>(1) 以下のコマンドを実行してGemをインストール(もしくはgem install)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>group :development, :test <span class="k">do</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;# pry画面でのstack表示
</span><span class='line'>gem <span class="s1">&#39;pry-stack_explorer&#39;</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;end
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>(2) Pry画面内で<code>show-stack</code>を実行するとスタックが表示</p>

<h3>コマンド一覧</h3>

<table>
<thead>
<tr>
<th>コマンド(ショートカット) </th>
<th align="left"> 意味・機能</th>
</tr>
</thead>
<tbody>
<tr>
<td>show-stack </td>
<td align="left"> スタックを表示</td>
</tr>
<tr>
<td>up </td>
<td align="left"> 親のフレームに移動</td>
</tr>
<tr>
<td>down </td>
<td align="left"> calleeフレーム(参照されている側)に移動</td>
</tr>
<tr>
<td>frame </td>
<td align="left"> 詳細フレームに移動</td>
</tr>
</tbody>
</table>


<p><a href="https://github.com/pry/pry-stack_explorer" class="button big primary">pry/pry-stack_explorer · GitHub</a></p>

<h2>こちらもどうぞ：これでPryをさらに使いこなせる19個のコマンド</h2>

<p>Pryのコマンドの紹介は、拙作の<strong>「<a href="/blog/pry-command-rails-ruby/">Pryが真の力を発揮してくれる19個のコマンドとコマンドの自作方法</a>」</strong>をご参照下さい！</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Special Thanks</h2>

<p><a href="http://blog.ainam.me/2012/03/20/summary-of-pry-plugins/">Rubyのデバッグに役立つ便利なPryの拡張まとめましましブログ | ましましブログ</a></p>

<p><a href="http://blog.happyelements.co.jp/2012/10/rubyist-pry-rails-irb-up.html.html">Happy Elements Labs: Rubyist必携 pry-railsを使いこなせば幸せになれる</a></p>

<p><a href="http://qiita.com/items/2b36068cdf2e40e75c2d">ググるよりもまずはpry #Ruby #Rails #pry - Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec/Spork/Guard/Growl/Rails 3.2.11で作る - プリチーなTDD環境！]]></title>
    <link href="http://morizyun.github.io/blog/guard-spork-rspec-tdd/"/>
    <updated>2012-11-29T01:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/guard-spork-rspec-tdd</id>
    <content type="html"><![CDATA[<p><a href="blog/categories/pry/atom.xml" title="by morizyun, on Flickr"><img src="http://farm9.staticflickr.com/8339/8240550113_9fab04bc18_m.jpg" width="200" height="200" alt="Where?" style="float: left; margin: 0 20px 20px 0;"></a></p>

<p>「ぷりちー」なRailsのTDD環境をオレオレ定義してみました！</p>

<pre>
* Guardをつかったファイル更新監視
* RSpec/Spork/LiveReload/Powが自動で動作
* Growlでテスト結果の通知をで行う(For Mac)
</pre>


<p>今回はこのTDD環境の構築手順を書いてみます。</p>

<!-- more -->


<br style="clear:both;"/>


<h2>Gemfileの更新</h2>

<p><code>Gemfile</code>に以下の内容を追加して、<code>bundle install</code>を実行。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># viewやcssの変更を監視してブラウザを自動的にリロードする</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard-livereload&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;em-websocket&#39;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;group :test do</span>
</span><span class='line'><span class="sr">  # HTTP requests用のモックアップを作ってくれる</span>
</span><span class='line'><span class="sr">  gem &#39;webmock&#39;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># 便利マッチャー集</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;shoulda-matchers&quot;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;group :development, :test do</span>
</span><span class='line'><span class="sr">  # ファイルの変更を監視してPowサーバを再起動</span>
</span><span class='line'><span class="sr">  gem &#39;guard-pow&#39;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># Rspec</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # fixtureの代わり</span>
</span><span class='line'><span class="sr">  gem &quot;factory_girl_rails&quot;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># テスト環境のテーブルをきれいにする</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;database_cleaner&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # 設定をロードしたサーバーによってテストを高速化</span>
</span><span class='line'><span class="sr">  gem &#39;spork&#39;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># ファイルの変更を検知する。OSX用</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rb-fsevent&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # テスト結果をGrowlで通知する(Lion向け)</span>
</span><span class='line'><span class="sr">  #gem &#39;growl&#39;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># テスト結果を通知センターに表示する(Mountain Lion向け)</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;terminal-notifier-guard&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # ファイルの変更を監視してテストを自動化</span>
</span><span class='line'><span class="sr">  gem &#39;guard-rspec&#39;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># 設定ファイルの変更を監視してテストサーバーを再起動</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard-spork&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # Gemfileを監視して、変更があったら自動でbundle installを実行</span>
</span><span class='line'><span class="sr">  gem &#39;guard-bundler&#39;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># Railsコンソールの多機能版</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;pry-rails&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # pryの入力に色付け</span>
</span><span class='line'><span class="sr">  gem &#39;pry-coolline&#39;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># コードに&quot;binding.remote_pry(rspec内ではbinding.pry_remote)&quot; =&gt; pry-remoteでpryに入れます。</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;pry-remote&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;pry-debugger&quot;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;pry-doc&quot;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;pry-stack_explorer&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # PryでのSQLの結果を綺麗に表示</span>
</span><span class='line'><span class="sr">  gem &#39;hirb&#39;</span>
</span><span class='line'><span class="sr">  gem &#39;hirb-unicode&#39;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># pryの色付けをしてくれる</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;awesome_print&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>application.rbの設定</h2>

<p><code>config/application.rb</code>内の<code>class Application &lt; Rails::Application</code>内に以下の内容を追加。(設定は任意で変更してください)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;generatorの設定&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;config.generators <span class="k">do</span> |g|
</span><span class='line'>  g.test_framework  :rspec, :fixture <span class="o">=</span>&gt; <span class="nb">true</span>
</span><span class='line'><span class="nb">  </span>g.fixture_replacement :factory_girl, :dir <span class="o">=</span>&gt; <span class="s2">&quot;spec/factories&quot;</span>
</span><span class='line'>  g.view_specs <span class="nb">false</span>
</span><span class='line'><span class="nb">  </span>g.controller_specs <span class="nb">false</span>
</span><span class='line'><span class="nb">  </span>g.helper_specs <span class="nb">false</span>
</span><span class='line'><span class="nb">  </span>g.routing_specs <span class="nb">false</span>
</span><span class='line'><span class="nb">  </span>g.request_specs <span class="nb">false</span>
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>config/environments/test.rbの設定</h2>

<p><code>config/environments/test.rb</code>に以下の内容を追加。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>AppName::Application.configure <span class="k">do</span>
</span><span class='line'>  <span class="c"># Spork 使用時にクラスをキャッシュしないようにする</span>
</span><span class='line'>  <span class="k">if </span>defined?<span class="o">(</span>Spork<span class="o">)</span> &amp;amp;&amp;amp; Spork.using_spork?&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;config.cache_classes <span class="o">=</span> <span class="nb">false</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  <span class="k">else</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;config.cache_classes <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>RSpecの設定</h2>

<p>RailsへのRSpecのインストールと雛形を作成。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails generate rspec:install
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>.rspec</code>にはrspec コマンドの引数を記述できます。以下のとおり編集。<br/>
(詳細は rspec --helpを参照)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;--color --drb -f d&#39;</span> &gt; .rspec
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>rspecの設定ファイル<code>spec/spec_helper.rb</code>を次のように変更。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;spork&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;webmock/rspec&quot;</span>
</span><span class='line'><span class="no">WebMock</span><span class="o">.</span><span class="n">allow_net_connect!</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;uncomment the following line to use spork with the debugger&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="nb">require</span> <span class="s1">&#39;spork/ext/ruby-debug&#39;</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Spork.prefork do</span>
</span><span class='line'><span class="sr">  # Loading more in this block will cause your tests to run faster. However,</span>
</span><span class='line'><span class="sr">  # if you change any configuration or code from libraries loaded here, you&#39;ll</span>
</span><span class='line'><span class="sr">  # need to restart spork for it take effect.</span>
</span><span class='line'><span class="sr">  ENV[&quot;RAILS_ENV&quot;] ||= &#39;test&#39;</span>
</span><span class='line'><span class="sr">  require File.expand_path(&quot;../</span><span class="o">.</span><span class="n">.</span><span class="o">/</span><span class="n">config</span><span class="o">/</span><span class="n">environment</span><span class="s2">&quot;, &lt;strong&gt;FILE&lt;/strong&gt;)</span>
</span><span class='line'><span class="s2">  require &#39;rspec/rails&#39;</span>
</span><span class='line'><span class="s2">  require &#39;rspec/autorun&#39;</span>
</span><span class='line'><span class="s2">  require &#39;shoulda-matchers&#39;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  # Requires supporting ruby files with custom matchers and macros, etc,</span>
</span><span class='line'><span class="s2">  # in spec/support/ and its subdirectories.</span>
</span><span class='line'><span class="s2">  Dir[Rails.root.join(&quot;</span><span class="n">spec</span><span class="o">/</span><span class="n">support</span><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*/&lt;</span><span class="sr">/em&gt;.rb&quot;)].each {|f| require f}&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;config.infer_base_class_for_anonymous_controllers = false</span>
</span><span class='line'><span class="sr">config.use_transactional_fixtures = true</span>
</span><span class='line'><span class="sr">config.order = &quot;random&quot;</span>
</span><span class='line'><span class="sr"># FactoryGirlのメソッドをbuild, build_stubbed, create, attributes_forなどの省略形で書ける</span>
</span><span class='line'><span class="sr">config.include FactoryGirl::Syntax::Methods</span>
</span><span class='line'>
</span><span class='line'><span class="sr"># database_cleanerでテストのたびにDBをクリアする</span>
</span><span class='line'><span class="sr">require &#39;database_cleaner&#39;</span>
</span><span class='line'><span class="sr">config.before(:suite) do</span>
</span><span class='line'><span class="sr">  DatabaseCleaner.strategy = :truncation</span>
</span><span class='line'><span class="sr">  DatabaseCleaner.clean_with(:truncation)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">config.before(:each) do</span>
</span><span class='line'><span class="sr">  DatabaseCleaner.start</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">config.after(:each) do</span>
</span><span class='line'><span class="sr">  DatabaseCleaner.clean</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">This</span> <span class="n">code</span> <span class="n">will</span> <span class="n">be</span> <span class="n">run</span> <span class="n">each</span> <span class="n">time</span> <span class="n">you</span> <span class="n">run</span> <span class="n">your</span> <span class="n">specs</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Spork.each_run do</span>
</span><span class='line'><span class="sr">  # Spork利用時にapp配下/</span><span class="n">locale</span><span class="o">/</span><span class="n">routes</span><span class="err">をリロード</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">Spork</span><span class="o">.</span><span class="n">using_spork?</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;Rails.application.reloaders.each{|reloader| reloader.execute_if_updated }</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Pryの設定</h2>

<p><code>config/environments/development.rb</code>の中の<code>YourAppName::Application.configure</code>に以下を追加。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">silence_warnings</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">begin</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;require &#39;pry&#39;</span>
</span><span class='line'><span class="sr">IRB = Pry</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  rescue LoadError</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>これで、<code>rails c</code>とした場合に<code>pry</code>が呼び出されます。</p>

<p>またコード内でデバックを行いた場所に<code>binding.pry_remote</code>を追加した場合、処理が途中で停止します。そこで<code>pry-remote</code>を打つと<code>pry</code>画面に入れます。
(guardで動いている場合は、<code>binding.pryでguard</code>から直接pryに進むっぽいです)</p>

<p>続いて、<code>~/.pryrc</code>に以下を追記。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;-&lt;em&gt;- coding: utf-8 -&lt;/em</span><span class="o">&gt;-&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;awesome_printの色付けの設定&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">require</span> <span class="s2">&quot;awesome_print&quot;</span>
</span><span class='line'><span class="no">AwesomePrint</span><span class="o">.</span><span class="n">pry!</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;pry-debuggerのショートカット&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Pry</span><span class="o">.</span><span class="n">commands</span><span class="o">.</span><span class="n">alias_command</span> <span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="s1">&#39;continue&#39;</span>
</span><span class='line'><span class="no">Pry</span><span class="o">.</span><span class="n">commands</span><span class="o">.</span><span class="n">alias_command</span> <span class="s1">&#39;s&#39;</span><span class="p">,</span> <span class="s1">&#39;step&#39;</span>
</span><span class='line'><span class="no">Pry</span><span class="o">.</span><span class="n">commands</span><span class="o">.</span><span class="n">alias_command</span> <span class="s1">&#39;n&#39;</span><span class="p">,</span> <span class="s1">&#39;next&#39;</span>
</span><span class='line'><span class="no">Pry</span><span class="o">.</span><span class="n">commands</span><span class="o">.</span><span class="n">alias_command</span> <span class="s1">&#39;f&#39;</span><span class="p">,</span> <span class="s1">&#39;finish&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;hirbの設定&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">begin</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;hirb&#39;</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">LoadError</span>
</span><span class='line'>  <span class="c1"># Missing goodies, bummer</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;if defined? Hirb</span>
</span><span class='line'><span class="sr">  # Slightly dirty hack to fully support in-session Hirb.disable/en</span><span class="n">able</span> <span class="n">toggling</span>
</span><span class='line'>  <span class="no">Hirb</span><span class="o">::</span><span class="no">View</span><span class="o">.</span><span class="n">instance_eval</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;def enable_output_method</span>
</span><span class='line'><span class="sr">  @output_method = true</span>
</span><span class='line'><span class="sr">  @old_print = Pry.config.print</span>
</span><span class='line'><span class="sr">  Pry.config.print = proc do |output, value|</span>
</span><span class='line'><span class="sr">    Hirb::View.view_or_page_output(value) || @old_print.call(output, value)</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def disable_output_method</span>
</span><span class='line'><span class="sr">  Pry.config.print = @old_print</span>
</span><span class='line'><span class="sr">  @output_method = nil</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="no">Hirb</span><span class="o">.</span><span class="n">enable</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Sporkの設定</h2>

<p>sporkの初期設定。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>spork --bootstrap
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>sporkのテスト。(起動が確認できたら<code>Ctrl + C</code>で停止させてください)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>spork&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;blockquote&gt;&lt;p&gt;Using RSpec
</span><span class='line'>Preloading Rails environment
</span><span class='line'>Loading Spork.prefork block...
</span><span class='line'>Spork is ready and listening on 8989! <span class="c"># ← 成功</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<h2>Guardの設定</h2>

<p><code>Guardfile</code>の作成。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>guard init
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>Guardfile</code>に以下の項目を追加。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>guard <span class="s1">&#39;rspec&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="c"># rakeファイルの更新監視</span>
</span><span class='line'>  watch<span class="o">(</span>%r<span class="o">{</span>&lt;sup&gt;lib/<span class="o">(</span>.+<span class="o">)</span>.rake<span class="nv">$}</span><span class="o">)</span>&lt;/sup&gt;     <span class="o">{</span> |m| <span class="s2">&quot;spec/lib/#{m[1]}_rake_spec.rb&quot;</span> <span class="o">}</span>
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;全体テストをしないようにする<span class="o">(</span>全体テストは、guardが動いてる所でEnterすると実行<span class="o">)</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;guard <span class="s1">&#39;rspec&#39;</span> <span class="k">do</span>を以下に書換え&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;guard <span class="s1">&#39;rspec&#39;</span>, :version <span class="o">=</span>&gt; 2, :cli <span class="o">=</span>&gt; <span class="s2">&quot;--drb&quot;</span>, :all_after_pass <span class="o">=</span>&gt; <span class="nb">false</span>, :all_on_start <span class="o">=</span>&gt; <span class="nb">false </span><span class="k">do</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>LiveReloadの設定</h2>

<p>ブラウザのリロード用アドオンを任意でインストール。</p>

<ul>
<li><p><a href="https://chrome.google.com/webstore/detail/jnihajbhpnppcggbcgedagnkighmdlei">Chrome Addon</a></p></li>
<li><p><a href="https://addons.mozilla.org/ja/firefox/addon/livereload/">FireFox Addon</a></p></li>
</ul>


<h2>Growlの設定</h2>

<p>ここはMacかつLionの方限定です。<br/>
Mountain Lionの方は、通知センターに送付します。(Gemfileを参照ください)</p>

<p><a href="http://growl.info/">Grow</a>をインストール。</p>

<p><a href="http://growl.info/" title="fpu_tmp_1354148705.382_da97cc by morizyun, on Flickr"><img src="http://farm9.staticflickr.com/8065/8227627407_4863dbab03.jpg" width="500" height="339" alt="fpu_tmp_1354148705.382_da97cc"></a></p>

<p>続いてGrowlNotifyのインストール。
<a href="http://growl.info/downloads">Growl - Downloads</a>にてダウンロード/インストールする。</p>

<p><a href="http://growl.info/downloads" title="fpu_tmp_1354148550.4162_b194f0 by morizyun, on Flickr"><img src="http://farm9.staticflickr.com/8198/8227622439_8081ebbffd.jpg" width="490" height="500" alt="fpu_tmp_1354148550.4162_b194f0"></a></p>

<h2>Guardの動作確認</h2>

<p><code>guard</code>の実行。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>guard
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>以下のような結果が出ていれば成功です。</p>

<pre>
Guard uses Growl to send notifications.
Guard uses TerminalTitle to send notifications.
Guard is now watching at '/path/to/app/test-app/'
LiveReload 1.6 is waiting for a browser to connect.
Guard::RSpec is running
No examples found.

Finished in 0.00007 seconds
0 examples, 0 failures
</pre>


<h2>関連記事: Rails 3.2.11/Bootstrap/Haml</h2>

<p><strong><a href="/blog/rails-mysql-bootstrap">Rails 3.2.11/Bootstrap/Haml プロジェクト新規作成 最短ガイドだよ！</a></strong> にRailsのモダンなプロジェクト作成の流れを書きました。Railsのプロジェクト作成から始めたい方はぜひ。</p>

<h2>関連記事: テスト環境にseedデータを自動で読み込ませる</h2>

<p>RSpecでテストをするときにseedデータをテスト環境のDBに読み込ませてテストをしたいという事があると思います。そんなときは、<code>seed_fu</code>というgemがやってくれます。以下が紹介記事です。</p>

<p><a href="/blog/seed-fu-ruby-on-rails-setup">seed-fuで始める効率的なRails Seed管理</a></p>

<h2>関連記事</h2>

<p><strong><a href="/blog/pow-guard-rails">開発サーバをThinからPowに切り替えて開発効率アップ！ (Mac限定)</a></strong> にてPowに関する記事を載せました。Powインストールがまだの方はぜひ。</p>

<h2>失敗談</h2>

<p><a href="http://blog.m4i.jp/entry/2012/02/22/091501">Rails + Pow + pry/ruby-debug(Ruby 1.9.3) | カワイイはつくれる</a>にトライしてみたんですが、
残念ながら僕の環境では uninitialized constant PryStackExplorer::Pry だそうです。技術力つけて再チャレンジ！</p>

<ul>
<li><a href="http://banisterfiend.wordpress.com/2012/02/14/the-pry-ecosystem/">The Pry Ecosystem</a></li>
</ul>


<h2>Special Thanks</h2>

<ul>
<li><p><a href="https://gist.github.com/1190475">Rails 3.1 with Rspec, Factory Girl, Haml, Database Cleaner, Spork, and Guard — Gist</a></p></li>
<li><p><a href="http://qiita.com/items/7b98fb8ec493ff801029">Rails3.2+RSpec2+Spork+GuardでTDD環境を構築しよう！ | Quiita</a></p></li>
<li><p><a href="http://blog.twiwt.org/e/b2d120">Rails で RSpec のセットアップ</a></p></li>
<li><p><a href="http://www.gesource.jp/weblog/?p=648">Ruby on RailsでRSpecを使うときに使用するコマンドのまとめ</a></p></li>
<li><p><a href="http://kitbc.s41.xrea.com/main/?use_guard_spork">rspec + guard + spork で高速な自動テスト実行環境構築</a></p></li>
<li><p><a href="http://naoty.hatenablog.com/entry/2012/05/20/032251">Rails開発環境 2012初夏</a></p></li>
<li><p><a href="http://qiita.com/items/d75d7c3953faa34a1f0e">awesome_print を pry の表示のデフォルトに使う | Quiita</a></p></li>
<li><p><a href="http://penguinlab.jp/blog/post/2256">追記: Rails, RSpec, Spork(, Guard) で適切にクラスをリロード - 情報と音楽</a></p></li>
<li><p><a href="http://blog.crowdint.com/2012/03/01/rails-tdd-environment-setup-with-guard-and-foreman.html">Rails TDD environment setup with Guard and Foreman</a></p></li>
<li><p><a href="https://gist.github.com/1724370">Example rails 3.1 spec_helper.rb file using spork, rspec, factory_girl, database_cleaner, I18n — Gist</a></p></li>
<li><p><a href="http://willnet.in/31">rails generate controller で無駄な helper や assets を生成しない方法  </a></p></li>
</ul>


<h2>変更来歴</h2>

<p>12/03 23:50 FactoryGirl/database_cleanerの設定を見直し。Pryの設定追加<br/>
12/06 09:37 Gemfileの'awesome_print'が間違っていたので修正<br/>
12/07 21:04 Gemfileに'pry-coolline'を追加<br/>
12/11 12:55 FactoryGirlの設定に説明書きを追記<br/>
12/12 21:20 guard-bundlerとterminal-notifier-guardをGemfileに追加<br/>
12/12 21:35 growlの説明書きを追加<br/>
12/16 17:30 binding.pryに関する説明を追記<br/>
12/18 20:30 environments/test.rbとrspec_helperの設定を追加<br/>
12/21 18:30 config/application.rbの設定を追加<br/>
12/30 18:05 spec_helper.rbのdatabase_cleanerの設定を見直し<br/>
12/31 13:05 gem webmockを追加<br/>
01/02 08:45 gem webmockの記述場所を修正<br/>
01/16 23:05 gem shoulda-matcherを追加<br/>
01/21 18:30 gem pry-debuggerを追加<br/>
01/22 14:15 gem pry関連のGemとその設定を追加<br/>
01/24 11:40 rspecで全体テストをしないように設定を修正<br/>
04/14 21:40 guard を bundle exec guardに修正<br/></p>

<h2>テスト環境</h2>

<p>テスト環境は以下の通りです。</p>

<pre>
OS : Mac Mountain Lion(OS X 10.8)
Ruby : 1.9.3
Rails : 3.2.11
haml : 3.1.7
coffee-script : 3.2.1
Rspec : 2.12.0
</pre>

]]></content>
  </entry>
  
</feed>
