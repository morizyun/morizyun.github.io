<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: redis | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/redis/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-31T22:11:52+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[redis-rails RailsのセッションをRedisで管理]]></title>
    <link href="http://morizyun.github.io/blog/redis-rails-session-ruby/"/>
    <updated>2016-01-24T23:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/redis-rails-session-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00ITFOFLS/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00ITFOFLS&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00ITFOFLS&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00ITFOFLS" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
サーバーサイドでのセッション管理はセキュリティを向上させたり、通信で無用なCookieを送らない等の意味でメリットがあります。
今回は『<strong><a href="https://github.com/redis-store/redis-rails">redis-store/redis-rails - GitHub</a></strong>』を使う手順のメモです！</p>

<!-- more -->


<br style="clear:both;"/>


<h2>サーバーサイド/クライアントでのセッション管理のPros/Cons</h2>

<p>セッションに関する説明は以下のサイトがおすすめです。注意点としては次の2点と考えられます。</p>

<ul>
<li><strong><a href="http://qiita.com/jkr_2255/items/075d1d518ae7a98141b3">セッション管理の要注意点 - Qiita</a></strong></li>
<li><strong><a href="http://railsguides.jp/security.html">Rails セキュリティガイド | Rails ガイド</a></strong></li>
</ul>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<pre>
- セッションの基礎
  - Webアプリでは、接続ごとに固有の識別子(セッションID)を割り当て、一時的なidを割り振る
  - セッションは他のCookieと合わせて通信のたびにやり取りされる
  - Cookieのサイズは4 KBと厳密に定められている

- セッションにおけるセキュリティのリスク
  - 他人のセッションを取得すると他人に一時的になりすましてログインができてしまう
  - セッション/Cookieにデータを保持するとクライアント側でデータを復元出来てしまう

- サーバーサイドでセッションを管理するメリット
  - 通信時にやりとりされるCookieの通信量を減らす

- Rails固有の話
  - Railsではセッションidは、32バイトのMD5ハッシュ値である

- セキュリティ強度を上げるための対策
  - Cookieのsecure属性とSSL => HTTPSでの通信でのみ使い、暗号化
  - Cookieのhttponly属性 => JavaScriptから読み書きさせない
</pre>


<h2>開発環境の準備</h2>

<p>Mac等でのRedisの導入については、拙著
『<strong><a href="http://morizyun.github.io/blog/redis-mac-centos-rails/">CentOS/Mac OSXへのRedis導入手順 - memcacheライクなKey-Value方式と、永続化対応のインメモリDB</a></strong>』
がおすすめです。</p>

<h2>Gemインストール</h2>

<p>Gemfileに以下を追加して、<code>bundle install</code>を実行。</p>

<p>```ruby</p>

<h1>Gemfile</h1>

<p>gem "redis-rails"
```</p>

<h2>設定の修正</h2>

<p>まずはキャッシュの保存先をRedisに設定。</p>

<p>```ruby</p>

<h1>config/application.rb</h1>

<h1>/cache はアプリ名や、Rails．env等の環境情報をいれてもいいかも</h1>

<p>config.cache_store = :redis_store, "redis://localhost:6379/0/cache", { expires_in: 90.minutes }</p>

<h1>ちなみに環境変数に入れてしまうのもおすすめです</h1>

<h1>config.cache_store = :redis_store, ENV['REDIS_URL'], { expires_in: 90.minutes }</h1>

<p>```</p>

<p>続いてバックエンドのセッションの保存先を設定。</p>

<p>```ruby</p>

<h1>config/initializers/session_store.rb</h1>

<p>MyApplication::Application.config.session_store :redis_store, servers: "redis://localhost:6379/0/cache"</p>

<h1>環境変数で設定する場合</h1>

<h1>MyApplication::Application.config.session_store :redis_store, servers: ENV['REDIS_URL']</h1>

<p>```</p>

<h2>Special Thanks</h2>

<ul>
<li><a href="http://qiita.com/Kta-M/items/b4852c849d408e7445c6">RailsのセッションストアとしてRedisを使う(Mac/EC2:AmazonLinux) - Qiita</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
