<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Database | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/database/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-31T22:29:22+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DBの基礎 - コネクションプーリングについて]]></title>
    <link href="http://morizyun.github.io/blog/connection-pooling-database-db-postgresql/"/>
    <updated>2015-03-30T20:15:00+09:00</updated>
    <id>http://morizyun.github.io/blog/connection-pooling-database-db-postgresql</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774171972/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774171972&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774171972&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774171972" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
コネクションプーリングについて、わかっていないことが多すぎたので、ちょっとだけ調べたことをメモで残しておきます。
今はまだ触りレベルしかわかっていなのいので、もう少しちゃんと分かるようになりたい！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>[スライド] データベースの羅針盤</h2>

<iframe src="http://morizyun.github.io//www.slideshare.net/slideshow/embed_code/28303485" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p>コネクションプーリングを調べている過程で偶然見つけた資料
『<strong><a href="//www.slideshare.net/matsunobu/ss-28303485">データベース技術の羅針盤</a></strong>』。
とにかくわかりやすくて、俯瞰的にDBの業界を知ることが出来る資料。素晴らしすぎる。</p>

<h2>コネクション・プーリングとは？</h2>

<p>DBのコネクションを一定数確立しておいて、それを使いまわす手法のこと。
DBへの接続に必要となるオーバーヘッドをカットしてWeb/DBの双方の負荷を下げる。
また、WebとDBの接続を使いまわすことで同時接続数を節約する。
用意した、コネクション数を超えたアクセスは、コネクションに空きがでるまで待たされる。</p>

<p>以下はOracle関連の話ですが、基本はおんなじだと思います。</p>

<h2>Oracle Connection Pooling</h2>

<pre>
  - 新規のサーバープロセスの作成に必要な処理
    - OSに新しいプロセスを割り当ててもらう
    - プロセス空間をOracle用に初期化
    - Oracle SGAにアクセスできるように設定
    - Oracleを使えるようにするためのパラメータを読み込んで初期化
</pre>


<p>(1)OracleでSQLを実行にかかるコストと、コネクションを生成するコストを比較
した場合、コネクション生成のほうが圧倒的にコストが高くなるそうです。</p>

<h2>コネクションのマイナス要素</h2>

<p>コストが高い一方で、コネクションを持ちすぎることには以下のマイナス要素がある</p>

<pre>
  - 接続要求処理は、CPU使用料や応答時間におけるコストが高い
  - アイドル状態のコネクションは、メモリリソースを無駄に消費する
</pre>


<h2>開発者とDBAの視点それぞれで考えるべきこと</h2>

<pre>
  - 開発者・設計者
    - 接続頻度や保持するコネクション数は適切か？コネクションプーリングは使用可能か？

  - DBA
    - どのようなアプリケーションからどのような接続形態で使用されるのか？
</pre>


<h2>コネクションプーリングの接続プロセス</h2>

<p>Oracleの場合は、コネクションプールの管理モジュールがコネクションの管理と割り当てを担当する。</p>

<pre>
アプリケーション・プロセス x3 <- 獲得・返却 -> コネクションプールの管理モジュール <- コネクションの生成・切断 -> DB
</pre>


<h2>コネクションプーリングの構成要素</h2>

<pre>
  - 物理接続数のコントロール
    - DB内部の実装によって変わる

  - 最小物理接続数までの接続
    - 一気に取得するタイプ、段階的に取得するタイプ
  - 最小物理接続数 -> 最大物理接続数
    - 要求があればで取得するタイプ、先回りして取得するタイプ

  - 最大物理接続数を超える要求
    - 積極型、我慢型、厳密型
</pre>


<h2>アイドル接続の奪取と切断</h2>

<p>メンテナンススレッドは、一定時間使用されていない物理接続を切断するための仕組み。
これによって、使われていないスレッドが生き残り続けるのを避ける。</p>

<h2>障害時の挙動</h2>

<p>コネクションプーリングには、障害を検知するためのSQL文を設定できる。
設定できるタイミングは『論理接続獲得時、論理接続返却時、アイドル時に一定間隔』の３つ。
プロセス障害の可能性を意識して、楽観型の仕組みにするとよい。</p>

<h2>あとがき</h2>

<p>ちょっとわかっていない部分が多いので、もしコネクションプーリング
を理解する上で、おすすめの資料とかあればぜひ教えて下さい＾＾</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Special Thanks</h2>

<p><strong><a href="http://e-words.jp/w/%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%97%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%B0.html">コネクションプーリングとは 【 connection pooling 】 〔 コネクションプール 〕 - 意味/解説/説明/定義 ： IT用語辞典</a></strong></p>

<p><strong><a href="http://d.hatena.ne.jp/naoya/20060912/1158058322">コネクションプーリングの話 - naoyaのはてなダイアリー</a></strong></p>

<p><strong><a href="http://www.oracle.com/technetwork/jp/articles/chapter5-1-101584-ja.html">門外不出のOracle現場ワザ 第5章</a></strong></p>

<p><strong><a href="http://d.hatena.ne.jp/wyukawa/20131116/1384621867">RDBMSのコネクションプーリングとかその辺の話 - wyukawa’s blog</a></strong></p>

<p><strong><a href="http://togetter.com/li/558788">RDBMSでコネクションプールが必要な理由、わからない。 - Togetterまとめ</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webエンジニアにも勉強になる！データベースエンジニア養成読本[書評]]]></title>
    <link href="http://morizyun.github.io/blog/database-engineer-training-book-review/"/>
    <updated>2015-03-07T16:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/database-engineer-training-book-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774158062/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774158062&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774158062&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774158062" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
最近、仕事でRMSDBやNoSQL関係の設計などで苦労をしていたので、基礎知識の復習を兼ねて『<strong><a href="http://www.amazon.co.jp/gp/product/4774158062/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4774158062&amp;linkCode=as2&amp;tag=morizyun00-22">データベースエンジニア養成読本</a></strong>』を読みました。全般的にRMSDBやNoSQLの主要な製品の概要やSQLなどの基礎知識を体系的に知ることができる本です。</p>

<p>今回はいつもどおり、自分の頭を整理するための俺得メモです。
(わかりにくい部分が多いと思いますが、ご容赦ください)</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>DBの需要な機能</h2>

<p>DBが一般的に持っているトランザクションのACID属性はアプリケーションの実装を楽にするために重要な機能である。</p>

<pre>
Atomicity   (原子性) => トランザクションに含まれるタスクが全て実行、or 全く実行されないことを保証する性質
Consistency (一貫性) => トランザクション開始と終了時にあらかじめ与えられた整合性を満たすことを保証する性質
Isolation   (独立性) => トランザクション中に行われる操作の過程が他の操作から隠蔽されること
Durability  (永続性) => トランザクション操作の完了通知をユーザが受けた時点で、その操作は永続的となり、結果が失われないこと
</pre>


<p>上記の説明は、<strong><a href="http://ja.wikipedia.org/wiki/ACID_(%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E7%A7%91%E5%AD%A6">ACID (コンピュータ科学) Wikipedia</a>)</strong></p>

<h2>InnoDB、MyISAMとは</h2>

<p>MySQLのデータベースエンジン「InnoDB と MyISAM」について。</p>

<pre>
InnoDB => ロック方式が行ロック
MyISAM => ロック方式がテーブルロック。テーブル自体にロックがかかるため、重い処理を実行すると処理待ちが発生しやすくなる。
</pre>


<h2>NoSQLの特徴</h2>

<p>Web系システムを中心として次の「3V」と呼ばれる課題が発生しやすくなった。</p>

<pre>
Volume   => データ量
Variety  => データの種類
Velocity => データ発生 / 処理頻度 / 速度
</pre>


<p>その課題に特化した解決策として、NoSQLが台頭し始めた。</p>

<p>しかしながら、NoSQLがRDBMSに置き換わるようなものではない。理由としては、</p>

<pre>
1) NoSQLは特定の問題を解決するためにRDBMSの持ついくつかの機能を犠牲にしている
2) NoSQLは歴史が浅く、技術として十分に使い古されておらず、ノウハウも不足している
</pre>


<h2>カラムファミリー型のデータベース: BigTableなど</h2>

<p>複数の列をまとめたカラムファミリーの単位でデータを取り出す。
実際のデータは、行、カラムファミリー、列をキーとしてそれらを辞書順にソートされたKVSのような形でデータを保持している。</p>

<p>カラムファミリー型DBの得意分野は、当単位での入力・検索を高速に行うようなOLTP(OnLine Transaction Processing)
である。一方で、RDBMSは格納データに複雑な集計を行う計算などに向いている。使い方が全く異なることに注意が必要。</p>

<h2>Redisについて</h2>

<p>すべてのデータをメモリ上に持つ「インメモリデータベース」として、高速に動作。メモリ上のデータをディスクに保存し、永続化する。</p>

<p>Redisは次のデータ型を持つ。</p>

<pre>
String:     文字列
List:       配列
Set:        集合
Hash:       連想配列
Sorted Set: スコア付き集合
</pre>


<p>Redisはシングルプロセス、シングルスレッドのイベント駆動アーキテクチャを採用しているので多くの処理をアトミックに行える。</p>

<p>Redisが有効な用途の一例。</p>

<pre>
リアルタイムランキング => Sorted Set型を使用すると高速にランキング処理を行うことができる
アクティブユーザーの集計 => Set型を利用して、集合操作関数を利用すればいろいろなデータを取得できる
</pre>


<h2>Riakについて</h2>

<p>Riakの特徴は次の通り。</p>

<pre>
高可用性) 多少のハードウェアやネットワークの故障でシステムが停止することなく、どんなときも書き込みと読み出しができる
高信頼性) 多少の負荷でもシステムは安定したレスポンスとスループットを提供する
拡張性) データ量や負荷に応じて、無停止でシステムをスケールアウトさせることができる
低遅延) どんなときでも、ユーザーを待たせず、すぐにレスポンスを得ることができる
予測可能性) 性能予測を裏切らない、安定したスケールアウト性
</pre>


<p>Riakを利用すべきシーン。</p>

<pre>
・データ量が数倍のレベルで増減する
・簡単にスケールアウトしたい
・複数行のトランザクションやJOINがない
・スパイク時でも安定したレイテンシが欲しい
・故障時の運用を簡単にしたい
・アインしんして夜に眠りたい
</pre>


<p>ちなみに、GitHub Pagesの静的ファイルはすべてRiak上に保存されている。</p>

<h2>SQLの基礎</h2>

<p>SQLの種類。</p>

<pre>
データ操作言語(DML: Data Manipulation Language) select/insert/update/deleteなど
データ定義言語(DDL: Data Definition Language) テーブル作成やフィールのデータ型の変更など
データ制御言語(DCL: Data Control Language) ユーザーの作成や権限の設定、排他制御の管理など
</pre>




<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>
]]></content>
  </entry>
  
</feed>
