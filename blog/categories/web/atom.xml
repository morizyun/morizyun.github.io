<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/web/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-02-08T22:07:00+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Webを支える技術  - HTTP、URI、HTML、そしてREST[書評]]]></title>
    <link href="http://morizyun.github.io/blog/web-supporting-technology-book-review/"/>
    <updated>2014-06-28T10:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/web-supporting-technology-book-review</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774142042/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774142042&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774142042&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774142042" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />『<strong><a href="http://www.amazon.co.jp/gp/product/4774142042/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4774142042&amp;linkCode=as2&amp;tag=morizyun00-22">Webを支える技術  - HTTP、URI、HTML、そしてREST</a></strong>』を2年ぶりに読んで、改めて大切だと思った部分を中心にまとめます！</p>

<p>2年前には考えもしなかった部分が実はかなり大切という、気付きをさせてくれる良本です。定期的に読むようにします！！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>REST について</h2>

<p>RESTの特徴(制約)は次の通り。</p>

<pre>
クライアント/サーバ : ユーザーインターフェイスと処理を分離する
ステートレスサーバ : サーバ側でアプリケーションの状態を持たない
キャッシュ : クライアントとサーバ間の通信回数・量を減らす
統一インターフェイス: GET、POSTなど限定されたインターフェースで操作する
階層化システム : システムをいくつかの階層に分離するアーキテクチャ
コードオンデマンド : サーバからコードをダウンロードして、クライアントで実行する
</pre>


<h3>RESTfulなWebサービスの性質</h3>

<pre>
アドレス可能性: URIさえあればリソースを一意に指し示すことができる
接続性: リソースをリンクで接続し、1つのアプリケーションをなす
統一インターフェース: GET/POST?PUT/DELETEなどのメソッドで構成される
ステートレス性: サーバ側でクライアントの状態を管理しない(cookieが普及したため優先度低)
</pre>


<h2>URI について</h2>

<p>URIが変わるとそのページにリンクを貼っていたページで「リンク切れ」が起こります。これが定常化すると、ハイパーメディアシステムの根幹を揺るがす事態になってしまいます。そのため、『<strong>変わらないURIこそ、最上のURIである</strong>』と考えられています。URIはリソースの名前であり、寿命が長いことを意識して変わらない、シンプルなURIを設計することが大切です。</p>

<h2>TCP/IP とは</h2>

<p>インターネットのネットワーク・プロトコルは次のような階層型になっています。</p>

<pre>
1) アプリケーション層(HTTP, NTP, SSH, SMTP, DNS)
メールやDNS、HTTPなどの具体的なインターネットアプリケーションを実現する

2) トランスポート層(UDP, TCP)
TCP/IPにおけるTCPの部分。相手とコネクションを貼って、データ野抜け漏れをチェックして、データの到達を保証します。1-65535までのポートがある。

3) インターネット層(IP)
TCP/IPにおけるIPの部分。指定したIPを送り先として、パケット単位でデータをやりとりする

4) ネットワークインターフェース層(イーサネット)
物理的なケーブルやネットワークアダプタに相当
</pre>


<h2>HTTP メソッド</h2>

<h3>代表的な HTTPメソッド</h3>

<pre>
GET: リソースの取得
POST: リソースの作成・追加
PUT: リソースの更新・作成
DELETE: リソースの削除
HEAD: リソースのヘッダ(メタデータのみ)の取得
OPTIONS: リソースがサポートしているメソッドの取得
</pre>


<h3>POSTとPUTの使い分け</h3>

<p>POSTとPUTの両方がリソースの作成に対応しています。両者の違いの設計上の指針としては、POSTの場合はリソースのURIの決定権がサーバサイドにあります。一方で、PUTの場合はURIをクライアントが決定します。</p>

<h3>べき等性と安全性</h3>

<p>べき等性と安全性の定義は次の通り。</p>

<pre>
べき等性: ある操作を南海行っても結果が同じこと
安全性: 操作対象のリソースの状態を変化させないこと
</pre>


<p>上記をうまえて、HTTPメソッドに当てはめると次のような特徴を持つ。</p>

<pre>
GET, HEAD => べき等かつ安全
PUT, DELETE => べき等だが安全でない
POST => べき等でも安全でもない
</pre>


<p>これらの特徴を踏まえて、リソース設計を行うべきである。</p>

<h2>HTTP ヘッダ</h2>

<h3>HTTPヘッダの概略</h3>

<p>HTTPヘッダの概略は次の通り。</p>

<pre>
概要: 
* メッセージのボディ部に対する付加的な情報(メタデータ)
* メデイアタイプや言語タグなどの情報を参考にしてクライアントが挙動を変化させる。

具体的な利用例:
* リソースのアクセス権を設定する認証
* クライアントとサーバの間の通信回数・量を減らすためのヘッダ
</pre>


<h3>HTTPヘッダ: サーバが一方的に決める情報</h3>

<p>基本的な情報。</p>

<pre>
日時: グリニッジ標準時(GMT)
Content-Type: メデイアタイプを指定する
charsetパラメータ: 文字エンコーディングを指定する
言語タグ: リソース表現の自然言語を指定する
</pre>


<p>必要に応じて送付する情報。</p>

<pre>
Content-Length: ボディの長さを指定する
チャンク転送: ボディを分割して転送する
認証: Basic認証やDigest認証に関する情報
キャッシュ:
    Pragma: キャッシュの抑制
    Expires: キャッシュの有効期限を示す
    Cache-Control: 詳細なキャッシュ方法を指定する
    条件付きGet: 
        If-Modified-Since: リソースの更新日時の条件
        If-None-Match: リソースのETagを条件にする
Content-Disposition: サーバがクライアントに対してリソースの提示をする
Slug: ファイル名のヒントを指定する
</pre>


<h3>HTTPヘッダ: クライアントとやりとりして決める情報</h3>

<pre>
1) Accept: 処理できるメディアタイプ(優先度も送付)
2) Accept-Charset: 処理できる文字エンコーディング(優先度も送付)
3) Accept-Language: 処理できる言語(優先度も送付)
</pre>


<h2>JSON</h2>

<h2>JSONに組み込みで用意されているデータ型</h2>

<pre>
オブジェクト: 名前と値の集合。ハッシュのこと。
配列: 順序を持った値の集合
文字列: 二重引用符(")で囲った文字列
数値: 整数 or 浮動小数点
ブーリアン: true(真)・false(偽)を取るブーリアン型
null: かならず小文字
</pre>


<h3>JSONPについて</h3>

<p>Ajaxで用いるXMLHttpRequestというJavaScriptモジュールは同一サーバ内でしか通信できません。理由は別のサーバと通信できてしまうと、知らない間に不正なサーバにデータを送信できるという、セキュリティ上の問題が発生するからです。</p>

<p>この対策として、HTMLのscriptタグでJavaScriptのファイルを読み込んで、その中に書いてある関数をクライアントが任意のタイミングで呼び出すことで、データを取得する「JSONP」という形式があります。</p>

<p>このJSONPにより、クロスドメイン通信を実現することができます。</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>
]]></content>
  </entry>
  
</feed>
