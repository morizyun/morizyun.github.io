<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-31T22:19:44+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git 初心者のための資料まとめ]]></title>
    <link href="http://morizyun.github.io/blog/git-biginner-web-develop/"/>
    <updated>2014-09-06T17:45:00+09:00</updated>
    <id>http://morizyun.github.io/blog/git-biginner-web-develop</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/427406767X/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=427406767X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=427406767X&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=427406767X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Gitを使ったことがない人が、Gitを最初に取り入れるときに是非読んで欲しい資料をまとめてみました。初心者のWebエンジニアが、<code>clone, checkout, add, commit, push</code>やプルリクエスト(Pull Request)ができるようになるまでの一連の流れができるようになることを目標にしています。</p>

<p><strong>(09/06 17:45) 初めてコードレビューされる人のためのpull requestとcommitの作り方を追加</strong><br/></p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>目標</h2>

<pre>
Git コマンドのclone, checkout, add, commit, pushを使えるようになること
プルリクエストができるようになること
</pre>


<h2>基本的な概念の理解</h2>

<p><strong><a href="http://blog.asial.co.jp/894">イラストでわかる！git入門の入門</a></strong><br/>
(1) ソフトウエア開発におけるバージョン管理の考え方、(2) gitを使った開発の基本的な概念、
(3) 基本的なコマンド(add, commit, push, pull)の説明と導入部分としては最適な資料です。</p>

<p><strong><a href="http://dotinstall.com/lessons/basic_git">ドットインストール git入門 (全22回)</a></strong><br/>1時間ちょっとでgitの開発に必要な知識をまとめて理解する事ができます！</p>

<h2>gitの基本的なコマンド</h2>

<p><strong><a href="https://github.com/hatena/Git-for-Designers/blob/master/README.md">デザイナのための Git</a></strong><br/>
Gitを開発で使う上で最低限必要なコマンドをひと通り修得する事ができます。</p>

<h2>GitHubフローについて</h2>

<p><strong><a href="https://gist.github.com/Gab-km/3705015">GitHub Flow</a></strong><br/>
GitHubで実際の開発で使われているフローを『<strong>GitHub Flow</strong>』とよんでいます。慣れれば初心者の人にも使いやすいフローなので、はじめてチーム開発をする際のワークフローとしておすすめです。</p>

<h2>初めてコードレビューされる人のためのpull requestとcommitの作り方</h2>

<p><strong><a href="http://qiita.com/reikubonaga/items/e3b3b19c14d4ef4efb95">初めてコードレビューされる人のためのpull requestとcommitの作り方</a></strong><br/>
WantedlyさんのiOS Super Hackerさんが書かれたQiita記事。初めてのPull Request前に是非読んで欲しい記事！</p>

<h2>プルリクエストについて</h2>

<p><strong><a href="http://blog.qnyp.com/2013/05/28/pull-request-for-github-beginners/">GitHub初心者はForkしない方のPull Requestから入門しよう</a></strong><br/>
GitHubフローの中で出てきたプルリクエストについてより詳細に書いている記事。GitHubやBitbucketで開発をするときの真骨頂的な機能なので、ぜひ読んで欲しいです＾＾</p>

<h2>GitHubを使ったプログラマとデザイナーのイテレーティブな開発フロー</h2>

<p><strong><a href="https://speakerdeck.com/ken_c_lo/pull-request-4-designers-githubwoshi-tutapuroguramatodezainafalseitereteibunakai-fa-huro">Pull Request 4 Designers - GitHubを使ったプログラマとデザイナーのイテレーティブな開発フロー</a></strong><br/>
複数人で協力してGitHubベースで開発をする時のお手本になるようなフロー。最初は導入が大変だと思いますが、開発時のコミュニケーション・コストを最適化する素晴らしいフローだと思います！</p>

<h2>git commit の心構えや注意点</h2>

<p><strong><a href="http://hiroki.jp/2012/09/05/5523/">git commit するまえに考えるべき10のこと</a></strong><br/>git commitの前の注意点や、コミットメッセージのルールなどが書かれています。自由に書ける部分だからこそ、あとから見なおした時に有効に使えるようにしっかりとルールを理解していきたいですよね！</p>

<h2>アプリ: SourceTree</h2>

<p><strong><a href="http://www.sourcetreeapp.com/">SourceTree</a></strong><br/>
Gitクライアントのデスクトップ・アプリでは一番の人気を誇るSourceTree。初心者の人やデザイナーさんが最初に使う場合に特におすすめです！</p>

<h2>GitHub Flowのワークフローテンプレート</h2>

<p><strong><a href="http://paperboy-all.github.io/docs/github/workflow.html">github を用いた開発フロー テンプレート</a></strong><br/>
Paperboy&amp;Coで実際に使っているgithub Flowベースの開発フロー・テンプレート。ペパボの開発力の源泉となるドキュメントだと思います。チームが成長してきたらぜひご活用ください！</p>

<h2>リファレンスサイト</h2>

<p><strong><a href="http://www.backlog.jp/git-guide/reference/">逆引きGit | サルでもわかるGit入門 〜バージョン管理を使いこなそう〜</a></strong><br/>
ユースケースに応じて逆引きでGitのコマンドを知ることができるサイト。実際の開発でgitを使う場合はここを参考にすると捗ると思います！</p>

<h2>GitHubカンニング・ペーパー</h2>

<p><strong><a href="https://github.com/hail2u/github-cheat-sheet/blob/master/README.ja.md">GitHubカンニング・ペーパー</a></strong><br/>
GitHubの便利なTipsや裏技的な使い方が書かれているドキュメント。GitHubをより楽しく使えるようになるかも。</p>

<h2>おすすめの書籍</h2>

<h3>開発効率をUPする Git逆引き入門</h3>

<p><strong><a href="http://www.amazon.co.jp/gp/product/4863541465/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4863541465&amp;linkCode=as2&amp;tag=morizyun00-22">開発効率をUPする Git逆引き入門</a></strong><br/>購入予定なので、買ったらレビュー書きます＾＾</p>

<blockquote>
Gitの使い方を速習できるように逆引きという形でわかりやすく解説しています。GitコマンドとSourceTreeでの操作方法も掲載しているので、コマンド入力が苦手という方も安心です。もちろん、Git独特の基本用語や概念についてもきちんと解説しています。
</blockquote>


<p><strong><a href="http://www.amazon.co.jp/gp/product/477416366X/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=477416366X&amp;linkCode=as2&amp;tag=morizyun00-22">GitHub実践入門 ~Pull Requestによる開発の変革</a></strong><br/>GitHubをベースにした開発手法の流れがわかるそう。いい時代やん。</p>

<blockquote>
GitHubの実践的な使い方を、実際に手を動かす形で解説する書籍です。初学者の方にもわかりやすいよう、基本的なGitやGitHubの使い方から、「ソーシャルコーディング」の目玉機能であるPull Requestの送り方・受け方まで解説します。また、外部ツールとの連携、GitHub FlowやGit Flowなど、GitHubを中心とした開発手法についてもしっかり解説しているので、中・上級者の方にも参考になるはずです。
</blockquote>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Special Thanks</h2>

<p><strong><a href="http://qiita.com/reikubonaga/items/60b4f6ee0a86ed06e83b">git - rails開発に加わる前に学んで欲しいこと</a></strong></p>

<p><strong><a href="http://cdn8.atwikiimg.com/git_jp/pub/git-manual-jp/Documentation/chunked/ch12s02.html">ブランチの管理</a></strong></p>

<h2>変更来歴</h2>

<p>(02/22 07:50) 朝起きて冷静になって色々書き直し<br/>
(03/01 19:20) SourceTreeを追加<br/>
(04/05 22:55) 記事を色々書き直し<br/>
(04/16 08:45) GitHubカンニング・ペーパーを追加<br/>
(09/06 17:45) 初めてコードレビューされる人のためのpull requestとcommitの作り方を追加<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[チーム開発に必要なgit コマンドを神速で習得しよう！]]></title>
    <link href="http://morizyun.github.io/blog/how-to-git-review-book/"/>
    <updated>2014-02-22T00:20:00+09:00</updated>
    <id>http://morizyun.github.io/blog/how-to-git-review-book</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/427406767X/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=427406767X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=427406767X&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=427406767X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />すみません、タイトルは釣りです。書籍『<strong><a href="http://www.amazon.co.jp/gp/product/427406767X/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=427406767X&amp;linkCode=as2&amp;tag=morizyun00-22">入門git </a></strong>』と『<strong><a href="http://www.find-job.net/startup/7-git-slides">もっと早く知りたかった！ Gitが鬼のようにわかるスライド厳選7選</a></strong>』、『<strong><a href="http://programmerbox.com/2013-07-17_git_summary/">Gitがこわくて触れられなかったけど、このスライドで理解出来るようになったよGitサイトまとめ</a></strong>』紹介のスライドを読んで、理解したことをまとめるためにこの記事を書きました。今までは個人でしかgitを使ってなかったので、チーム開発に必要なgitコマンドを少しでも理解できるように頑張ります！</p>

<p><strong>(02/22 00:20) 全体的に説明をアップデート</strong><br/></p>

<!-- more -->


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>gitの基本的な開発スタイルについて</h2>

<p><a href="http://blog.asial.co.jp/894"><img src="http://farm8.staticflickr.com/7310/9603451209_d94fb11e58_z.jpg"></a><br/>
From <a href="http://blog.asial.co.jp/894">イラストでわかる！git入門の入門</a></p>

<p>gitの基本的な開発スタイルは次の通りです。</p>

<pre>
(1) gitの開発ではローカルで使う個人リポジトリとチームで使う共有リポジトリを用いる
(2) 共有リポジトリに push すると個人リポジトリのこれまでのコミット内容を送れる
(3) pull すると共有リポジトリのコミット内容を個人リポジトリに取り込める
</pre>


<h2>gitリポジトリを作成する</h2>

<p>ローカルに個人リポジトリを新規作成する場合は、プロジェクト直下のフォルダで<code>git init</code>を実行します。また、サーバ側にリポジトリを新規作成する場合は、<code>git init --bare</code>を実行します。</p>

<h2>開発の基本的な流れ</h2>

<p><img src="http://farm3.staticflickr.com/2810/9603580319_4df7243b62_z.jpg"><br/>
From <a href="http://www.slideshare.net/zephiransas/git-14810093">一人でもはじめるGitでバージョン管理</a></p>

<p>gitを使った開発の基本的な流れは次の通りです。</p>

<pre>
(1) 共有リポジトリからpullして個人リポジトリを最新に
(2) 個人リポジトリでソースコードを変更
(3) ファイルの追加/削除/変更をgitのインデックスに追加するために git add
(4) 変更結果を git commit で個人リポジトリにコミット
(5) 個人リポジトリをpushして共有リポジトリに反映
</pre>


<h2>ブランチ・マージ・リベースの意味</h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/15276118" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"></p>

<p>git のブランチや、<code>marge / rebase</code>コマンドについてかなり丁寧に説明をしてくれています。また、マージの際の<strong>Fast Forward</strong>の説明もわかりやすいです。コレを読んでおくと陥りがちな失敗をうまく回避できそうです！</p>

<h2>git の仕組みについて</h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/17499005" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p>ここまでいくつかのgitコマンドを紹介しましたが、次にgit内部でどんな動きをしているかについてのスライド『<strong><a href="http://www.slideshare.net/matsukaz/git-17499005">いつやるの？Git入門</a></strong>』を紹介します。これを読んでおくと、git内部の動きが色々納得できますよ！</p>

<h2>gitの基本コマンドを理解できるサイト</h2>

<p>gitのコマンドを例題を通して理解できるサイト『<strong><a href="http://k.swd.cc/learnGitBranching-ja/">Learn Git Branching</a></strong>』の紹介です。コマンドを実行すると図が変化するなど、動きがあってわかりやすいです。</p>

<p><a href="http://k.swd.cc/learnGitBranching-ja/"><img src="http://farm6.staticflickr.com/5497/9604520241_b159c2e09c_z.jpg"></a></p>

<h2>rebaseの正しい使い方</h2>

<script async class="speakerdeck-embed" data-id="80584750f134013089bf7ad89fb6c866" data-ratio="1.33333333333333" src="http://morizyun.github.io//speakerdeck.com/assets/embed.js"></script>


<p><a href="http://crocos.co.jp/">ソーシャルメディアマーケティングで有名なクロコス</a>さんのスライド。特にrebaseを使う場合の使い方や、チーム作業で注意すべき点が書かれていて勉強になります！</p>

<h2>A successful Git branching modelについて</h2>

<p><img src="http://farm3.staticflickr.com/2817/9603741657_6ba43d7edd_z.jpg"><br/>
From <a href="http://www.slideshare.net/add20/ss-11951387">バージョン管理のワークフロー</a></p>

<p>ブランチを活用してバージョン管理を行いながら開発をするための代表的なモデル『<strong>A successful Git branching model</strong>』は次の通りです。</p>

<pre>
* masterブランチ：安定してリリースが可能な状態を保つ
* developブランチ：最新の開発を反映する
* featureブランチ：新しい開発をするのに用いる
* releaseブランチ：リリース準備のために用いる
* hotfixブランチ：masterで致命的バグがあった場合に使用します。
</pre>


<p>featureブランチでの機能開発の流れは次の通りです。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout -b feature-x.x.x develop <span class="c">#=&gt; developからfeature-x.x.xブランチを作成して移動</span>
</span><span class='line'><span class="o">(</span>feature-x.x.xの実装<span class="o">)</span>
</span><span class='line'>git checkout develop <span class="c">#=&gt; developブランチにスイッチ</span>
</span><span class='line'>git merge --no-ff feature-x.x.x <span class="c">#=&gt; developとfeature-x.x.xをマージコミットを作ってマージ</span>
</span><span class='line'>git branch -d feature-x.x.x <span class="c">#=&gt; マージされたfeature-x.x.xブランチを削除</span>
</span><span class='line'>git push origin develop <span class="c">#=&gt; 共有リポジトリにdevelopをpush</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>releaseブランチでのリリース準備作業の流れは次の通りです。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout -b release-x.x.x develop <span class="c">#=&gt; developからrelease-x.x.xブランチを作成して移動</span>
</span><span class='line'><span class="o">(</span>リリースの準備作業<span class="o">)</span>
</span><span class='line'>git checkout master <span class="c">#=&gt; masterブランチにスイッチ</span>
</span><span class='line'>git merge --no-ff release-x.x.x <span class="c">#=&gt; masterとrelease-x.x.xをマージコミットを作ってマージ</span>
</span><span class='line'>git tag -a x.x.x <span class="c">#=&gt; バージョン情報をタグに書く</span>
</span><span class='line'>git checkout develop <span class="c">#=&gt; developブランチに移動</span>
</span><span class='line'>git merge --no-ff release-x.x.x <span class="c">#=&gt; developとrelease-x.x.xをマージコミットを作ってマージ</span>
</span><span class='line'>git branch -d release-x.x.x <span class="c">#=&gt; マージされたrelease-x.x.xを削除</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>hotfixブランチでのバグ修正作業の流れは次の通りです。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git checkout -b hotﬁx-x.x.x master <span class="c">#=&gt; masterからrelease-x.x.xブランチを作成して移動</span>
</span><span class='line'>（バグ修正を実施）
</span><span class='line'>git commit -m “Fix a bug” <span class="c">#=&gt; バグ修正をコミット</span>
</span><span class='line'>git checkout master <span class="c">#=&gt; masterブランチにスイッチ</span>
</span><span class='line'>git merge --no-ff hotﬁx-x.x.x <span class="c">#=&gt; masterとhotfix-x.x.xをマージコミットを作ってマージ</span>
</span><span class='line'>git tag -a x.x.x <span class="c">#=&gt; バージョン情報をタグに書く</span>
</span><span class='line'>git checkout develop <span class="c">#=&gt; ブランチdevelopにスイッチ</span>
</span><span class='line'>git merge --no-ff hotﬁx-x.x.x <span class="c">#=&gt; developとhotfix-x.x.xをマージコミットを作ってマージ</span>
</span><span class='line'>git branch -d hotﬁx-x.x.x <span class="c">#=&gt; ブランチhotfix-x.x.xを削除</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>補足として、『A successful Git branching model』のコマンド入力を簡略化するためのツールとして、<strong><a href="https://github.com/nvie/gitflow">git-flow</a></strong>があります。もしこのモデルを踏襲したい場合は是非活用ください。</p>

<h2>逆引きGit</h2>

<p><a href="http://www.backlog.jp/git-guide/reference/"><img src="http://farm4.staticflickr.com/3827/9604572059_dc41c8e6cb_z.jpg"></a></p>

<p>nulabさんが作成されている『<strong><a href="http://www.backlog.jp/git-guide/reference/">逆引きGit</a></strong>』は書籍になったら大ヒットしそうなレベルでまとまっていてオススメです！</p>

<h2>本格的にGitを学ぶなら Pro Git</h2>

<p>『<strong><a href="http://git-scm.com/book/ja">Pro Git</a></strong>』は本格的にGit を学ぶ手助けをしてくれるサイトです。10の言語で翻訳されているほど人気が高いコンテンツです！英語版の書籍は約$20でアマゾンUSで販売されています！</p>

<p> <a href="http://git-scm.com/book/ja" title="Pro Git"><img src="http://farm4.staticflickr.com/3802/9613075826_c02cf38ce0_z.jpg" width="640" height="421" alt="Pro Git"></a></p>

<h2>マージでconflictが発生した場合の対策</h2>

<p>marge中の2つのブランチでどちらも同じファイルを変更した場合、conflict(矛盾)が発生することがあります。『<strong><a href="http://d.hatena.ne.jp/sinsoku/20110831/1314720280">Gitでコンフリクトした時のための備忘録</a></strong>』にconflictが発生した場合によく使いそうなコマンドが整理されています！</p>

<p><a href="http://d.hatena.ne.jp/sinsoku/20110831/1314720280"><img src="http://farm4.staticflickr.com/3734/9607911806_c01fb1e924_z.jpg"></a></p>

<p>また、p4margeというconflict時のツールもあります。『<strong><a href="http://wadahiro.hatenablog.com/entry/20111115/1321372150">Gitのマージツールにp4mergeを使ってみた</a></strong>』にgitで利用するための手順がまとめラているのでよかったら試してみてください！</p>

<p><a href="http://wadahiro.hatenablog.com/entry/20111115/1321372150"><img src="http://gitextensions.googlecode.com/files/p4Merge.jpg"></a></p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>補足</h2>

<h3>pullとfetchの違い</h3>

<p><code>pull</code>コマンドでは自分のコードと他人のコードがマージされます。もしまずは取り込むだけにしたい場合は、<code>fetch</code>コマンドを実行します。<strong><a href="http://qiita.com/y42sora/items/e082d64f3f8b424e9b7d">fetch と pullの違い</a></strong>に簡潔な説明がありますので、こちらもオススメです！</p>

<h3>ベアリポジトリ(git init --bare)について</h3>

<p><img src="http://farm4.staticflickr.com/3701/9603675283_45565c4632_z.jpg"><br/>
From <a href="http://www.nekotricolor.com/blog/2013/05/01/961/">ベアリポジトリとノンベアリポジトリ：理論編〜GitでWordPressのテーマを管理</a></p>

<p><img src="http://farm3.staticflickr.com/2862/9607305096_a33c09b513_z.jpg"><br/>
From <a href="http://www.slideshare.net/matsukaz/git-17499005">いつやるの？Git入門</a></p>

<p><code>--bare</code>は、ベアリポジトリを作成する場合につけます。ベアリポジトリとは、更新情報だけを持つリポジトリのことでサーバの共有リポジトリの場合につけます。</p>

<h2>Special Thanks</h2>

<p><strong><a href="http://programmerbox.com/2013-07-17_git_summary/">Gitがこわくて触れられなかったけど、このスライドで理解出来るようになったよGitサイトまとめ</a></strong></p>

<p><strong><a href="http://www.find-job.net/startup/7-git-slides">もっと早く知りたかった！ Gitが鬼のようにわかるスライド厳選7選</a></strong></p>

<h2>変更来歴</h2>

<p>(13/08/28 10:25) スライド『Git 7つの心構え』を追加。日本語のミスを修正<br/>
(13/08/28 12:00) Pro Gitの紹介を追加<br/>
(14/02/22 00:20) 全体的に説明をアップデート<br/></p>
]]></content>
  </entry>
  
</feed>
