<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ssl | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/ssl/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-28T22:38:30+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SSLストア 1,050円でRapidSSLをnginxに簡単導入！]]></title>
    <link href="http://morizyun.github.io/blog/ssl-store-nginx-conf-webapp-introduction/"/>
    <updated>2014-07-31T11:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ssl-store-nginx-conf-webapp-introduction</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774169838/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774169838&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774169838&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774169838" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
「<strong><a href="http://www.ssl-store.jp/">SSLストア</a></strong>」、たった1,050円でSSLが買えちゃいます。SSL証明書をnginxに導入するときに、ほんのちょっとだけはまってしまったので、忘備録メモです。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>　サーバに mod_ssl を導入</h2>

<p>サーバ側で以下のコマンドを実行。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum -y install mod_ssl
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>秘密鍵を作成</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo su -
</span><span class='line'>mkdir /etc/nginx/ssl/
</span><span class='line'><span class="nb">cd</span> /etc/nginx/ssl
</span><span class='line'>openssl genrsa -des3 -out server.key 2048
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>秘密鍵からCSRを作成</h2>

<p>以下のコマンドを実行。パスフレーズや国名を答えていく。ドメインやメールアドレスは正確に書くこと。
<code>Enter</code>を押すとスキップ。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl req -new -key server.key -out server.csr
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>CSRをコピペ</h2>

<p>server.csrを以下のコマンドで画面に表示してコピー。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat server.csr
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>この情報はSSLを購入後に貼り付けます。</p>

<h2>SSLを購入</h2>

<p>「<strong><a href="http://www.ssl-store.jp/">SSLストア</a></strong>」で購入してください！
購入すると、CSRをはりつける画面があるので貼り付けるとメールアドレスに証明書が送付されます。</p>

<h2>サーバ証明書・中間証明書からpemを作成</h2>

<p><code>vi cert.withpass.pem</code>を実行して、pemを作成します。
サーバ証明書と中間証明書はCSRを貼り付けた後に送られてくるメールのしたの方に書かれています。
(Rapid SSLのみしか知らないので、他のは別の手段で入手するかもです)</p>

<p>pemは次のようなイメージで作成します。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>-----BEGIN CERTIFICATE-----
</span><span class='line'>サーバ証明書のxxxxx
</span><span class='line'>-----END CERTIFICATE-----
</span><span class='line'>-----BEGIN CERTIFICATE-----
</span><span class='line'>中間証明書のxxxxx
</span><span class='line'>-----END CERTIFICATE-----
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>このままだとパスフレーズが残っていて、nginxノリスタートとかでいちいち聞かれちゃうので以下のコマンドを実行。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl rsa -in cert.withpass.pem -out cert.pem
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>これでパスフレーズを入力すると、パスフレーズなしのpemが生成されます。</p>

<h2>nginx.confの設定</h2>

<p><code>nginx.conf</code>に以下の様に書くと設定できます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>server <span class="o">{</span>
</span><span class='line'>  listen 443 default ssl;
</span><span class='line'>  server_name example.com;
</span><span class='line'>  root /var/rails/example.com;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  ssl on;
</span><span class='line'>  ssl_certificate /etc/nginx/ssl/server.crt;
</span><span class='line'>  ssl_certificate_key /etc/nginx/ssl/server.key;
</span><span class='line'>  location / <span class="o">{</span> proxy_pass http://127.0.0.1:5001; <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>設定画完了したら、以下のコマンドでnginxを再起動。(For CentOS)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo /etc/init.d/nginx restart
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>あとがき</h2>

<p>以前何度かSSLの設定手順を経験しましたが、仕事だったためメモが社内wikiだったお。。。ということで心機一転書きなおしました！</p>

<h2>Special Thanks</h2>

<p><strong><a href="http://plus.vc/web_service/6480/">RapidSSLを取得して、nginx+apacheサーバーで設定する方法 | PLUS</a></strong></p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP通信 - Cookieについて]]></title>
    <link href="http://morizyun.github.io/blog/http-access-cookie-browser/"/>
    <updated>2014-07-26T18:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/http-access-cookie-browser</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774142042/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774142042&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774142042&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774142042" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />HTTP通信でのCookieの意味について調べたのでそのメモです。今回のCookieの情報はWikipediaの説明が丁寧でわかりやすかったです。CGMコンテンツもあそこまで成熟すると教科書レベルになるんだと感心しました！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Cookieの概要</h2>

<pre>
(1) HTTPにおけるWebサイト、ブラウザ間で状態を管理するプロトコル
(2) Webブラウザに保持された情報のこと
</pre>


<p>Webサイトの提供者が、Webブラウザを通じて訪問者のコンピュータ側にデータの書き込みを行う仕組み。
利用者の識別やセッションの管理のために用いる。</p>

<p>ちなみにセッションとは、一連のインタラクティブな操作のこと。一定時間のアクセス(30分)や、ログインからログアウトまでの一連の処理を指す。</p>

<h2>Cookie管理の流れ</h2>

<pre>
(1) WebサーバがWebブラウザにその状態を区別する識別子をHTTPヘッダに含める形で渡す
(2) ブラウザは次にサーバにアクセスする際に、与えられた識別子をHTTPヘッダに含めて送信する
(3) サーバはその識別子によって通信の内容をカスタマイズしてブラウザに送信する
(4) (2) - (3)を繰り返す。必要に応じて新しい識別子を追加する
</pre>


<h2>Cookieにおける注意点</h2>

<pre>
(1) クライアント側のスクリプトによってクッキーを操作することができる
(2) ブラウザにクッキーの送受信停止や、クッキー内容の確認、クッキーの消去などの機能がある
</pre>


<h2>Cookieに関連したセキュリティ、プライバシー問題</h2>

<h3>セッションハイジャック</h3>

<p>クッキーでセッション管理を行う場合、第三者がセッションIDを獲得した場合、「<strong>なりすまし</strong>」を行う事ができる。この対策としては、HTTPS(SSL)通信を行い、CookieにSecure属性をつけることである。</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Special Thanks</h2>

<p><a href="http://ja.wikipedia.org/wiki/HTTP_cookie">HTTP cookie - Wikipedia</a></p>

<p><a href="http://www.websec-room.com/2013/03/09/497">セッション管理の不備と対策 | Webセキュリティの小部屋</a></p>
]]></content>
  </entry>
  
</feed>
