<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GAE | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/gae/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-31T22:11:52+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rspec/Capybara/Turnipの入門記事を全力でまとめてみた]]></title>
    <link href="http://morizyun.github.io/blog/the-rspec-book-review-rails/"/>
    <updated>2013-08-30T16:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/the-rspec-book-review-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4798121932/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4798121932&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4798121932&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4798121932" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />さっき、『<strong>
<a href="http://www.amazon.co.jp/gp/product/4798121932/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4798121932&amp;linkCode=as2&amp;tag=morizyun00-22">The Rspec Book</a></strong>』を読み終えました。厚めの本ですが、RspecやCucumber、Webrat、Seleniumなどを活用するためのノウハウ満載で大満足でした！ ということで、この本で読んだ内容を忘れないようにするためと、その過程でRspec/Capybaraなどのネット資料をあつめたので、まとめるためにこの記事を書きます。もし、間違いを発見した場合や他にもいいリソースがあれば、是非メッセージを願いします！</p>

<p><strong>(08/30 20:15) 補足：Cucumber(Turnip) + serverspecを追加しました！</strong><br/>
<strong>(08/30 22:45) 補足: The RSpec BookのRailsコードについてを追加しました！</strong><br/></p>

<!-- more -->


<p>Included file 'custom/google_ads_yoko_naga.html' not found in _includes directory</p>

<h2>テスト駆動開発(TDD)と振る舞い駆動開発(BDD)</h2>

<p>テスト駆動開発(TDD)とは、コードを書く際に最初にテストを書き、次にテストが通る最低限のコードを書き、その後にリファクタリングしていく開発手法です。一方で振る舞い駆動開発(BDD)はTDDの発展形で、『<strong>外から見たソフトの振る舞いを自然言語で記述してテストを書く</strong>』というものです。BDDのメリットは、『振る舞い』と『実装』を分けて考えるようになるという点です。RubyではRspecが有名で、minitestも今後の進化が期待されています。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/16873272" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"></p>

<p>上のスライドは『<strong><a href="http://www.amazon.co.jp/gp/product/477415377X/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4798121932&amp;linkCode=as2&amp;tag=morizyun00-22">JUnit実践入門</a></strong>』の著者の渡辺さんのスライド『<strong><a href="http://www.slideshare.net/shuji_w6e/ss">テスト駆動開発のはじめ方</a></strong>』です。テスト駆動に取り組む上での考え方や、設計のプロセスについてわかりやすく説明して頂けています。</p>

<h2>受け入れテスト</h2>

<p>受け入れテストとは、顧客(ユーザー)視点でのテストのことです。受け入れテストでは、「End-to-Endのテスト」を行うべきとされています。このEnd-to-Endのテストの説明は、『<a href="http://gihyo.jp/dev/serial/01/tdd/0008">第8回 テスト駆動開発の「サイクル」――まず受け入れテストで土台を作る</a>』に次のような説明があります。</p>

<blockquote>
End-to-Endのテストとは，リクエストがクライアント，たとえばブラウザから始まって，サーバ内で処理され，制御が再度クライアントのほうに返ってくるという構成のときに，リクエストを投げてレスポンスが返ってくるまでの処理をブラックボックスとして捉え，大きく機能の入り口から出口までの範囲のブラックボックステストを行うことを指します。
</blockquote>


<p>ちなみにRubyの受け入れテストツールとしては、cucumberが有名で、最近ではturnipが注目を集め始めています。また、Webブラウザによるテストを手助けしてくれるCapybaraも広義の受け入れテストツールの一つです。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/14351848" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"></p>

<p>このスライドは2012年9月に発売された『<strong><a href="http://www.amazon.co.jp/gp/product/4798124583/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4798124583&amp;linkCode=as2&amp;tag=morizyun00-22">実践テスト駆動開発</a></strong>』の翻訳者、和智さんがデベロッパーズサミットで発表されたスライドです。スライドの内容は、ソフトウエア開発の中でテスト駆動開発を行うために、『受け入れテスト』を含めたプロセスを実施することについて述べられています。より詳細な手法については『<strong><a href="http://www.amazon.co.jp/gp/product/4798124583/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4798124583&amp;linkCode=as2&amp;tag=morizyun00-22">実践テスト駆動開発</a></strong>』の中で述べられていると思うので、できるだけ早く読んでみます！</p>

<h2>Rspecについて</h2>

<p><a href="http://morizyun.github.io/blog/rspec-ruby-rails/" title="「RSpec をもっと理解したかったので、まとめを作りました」に感動してRuby 1.9.3でやってみた！"><img src="http://farm8.staticflickr.com/7340/9628059110_8e9849cf5d_z.jpg" width="640" height="397" alt="「RSpec をもっと理解したかったので、まとめを作りました」に感動してRuby 1.9.3でやってみた！"></a></p>

<p>Rspecの導入分については、拙著『<strong><a href="http://morizyun.github.io/blog/rspec-ruby-rails/">「RSpec をもっと理解したかったので、まとめを作りました」に感動してRuby 1.9.3でやってみた！</a></strong>』が基礎を理解するのにはオススメです。</p>

<p><a href="http://magazine.rubyist.net/?0021-Rspec" title="スはスペックのス 【第 1 回】 RSpec の概要と、RSpec on Rails (モデル編)"><img src="http://farm6.staticflickr.com/5499/9628075790_601394d28e_z.jpg" width="640" height="268" alt="スはスペックのス 【第 1 回】 RSpec の概要と、RSpec on Rails (モデル編)"></a></p>

<p>そして、Rspecのより実践的な部分を理解するのには、『<strong><a href="http://magazine.rubyist.net/?0021-Rspec">スはスペックのス 【第 1 回】 RSpec の概要と、RSpec on Rails (モデル編)</a></strong>』がオススメっす！</p>

<h2>RSpec + Capybaraを使ったテストについて</h2>

<p><a href="http://www.oiax.jp/rails/rspec_capybara_primer.html" title="RSpec/Capybara入門"><img src="http://farm6.staticflickr.com/5464/9627827318_19c7397b39_z.jpg" width="640" height="471" alt="RSpec/Capybara入門"></a></p>

<p>RSpec + Capybraraを使ったテストについての記事では、2013年8月から連載中の『<strong><a href="http://www.oiax.jp/rails/rspec_capybara_primer.html">RSpec/Capybara入門</a></strong>』や『<a href="http://www.oiax.jp/rails/zakkan/testing_javascript_with_rspec_and_capybara.html">RSpecとCapybaraでJavaScript/Ajaxをテストする</a>』がオススメです。セミナーや書籍を出版されているoiaxさんだけあって、説明がとってもわかりやすいです！</p>

<p><a href="http://blog.livedoor.jp/sasata299/archives/51924944.html" title="Rails4 + Capybara + PhantomJS (poltergeist) なテスト環境"><img src="http://farm6.staticflickr.com/5490/9628279766_a86effbb17_z.jpg" width="640" height="388" alt="Rails4 + Capybara + PhantomJS (poltergeist) なテスト環境"></a></p>

<p>さらにRSpec + Capybaraでのテストの際にseleniumではなく、ヘッドレスドライバの<strong><a href="https://github.com/ariya/phantomjs">PhantomJS</a></strong>を使う方法についてsasata299's blogさんが『<strong><a href="http://blog.livedoor.jp/sasata299/archives/51924944.html">Rails4 + Capybara + PhantomJS (poltergeist) なテスト環境</a></strong>』でまとめられています。オススメです！</p>

<h2>Cucumberの後継、『Turnip』について</h2>

<p><a href="http://magazine.rubyist.net/?0042-FromCucumberToTurnip" title="エンドツーエンドテストの自動化は Cucumber から Turnip への実装者側と利用者側の接点"><img src="http://farm8.staticflickr.com/7285/9624744751_f3c7435ae0_z.jpg" width="514" height="479" alt="エンドツーエンドテストの自動化は Cucumber から Turnip への実装者側と利用者側の接点"></a></p>

<p>Cucumberはその思想こそ素晴らしいですが、バージョンによる進化のスピードが速いことや、記述に必要なノウハウやスキルの高さが要求されるため、なかなか普及していません。それを踏まえて、RspecやCapybaraと互換のある<strong><a href="https://github.com/jnicklas/turnip">Turnip</a></strong>というツールが注目を集めています。この<strong><a href="https://github.com/jnicklas/turnip">Turnip</a></strong>についての入門記事『<strong><a href="http://magazine.rubyist.net/?0042-FromCucumberToTurnip">エンドツーエンドテストの自動化は Cucumber から Turnip へ</a></strong>』がオススメです！</p>

<p>Included file 'custom/google_ads_yoko_naga.html' not found in _includes directory</p>

<h2>補足：BDDの理解を深めよう</h2>

<p><a href="http://ukstudio.jp/2011/07/02/bdd/" title="BDDについて自分なりにまとめてみたのスクリーンショット"><img src="http://farm8.staticflickr.com/7347/9627962270_fa31d85df5_z.jpg" width="640" height="366" alt="BDDについて自分なりにまとめてみたのスクリーンショット"></a></p>

<p>ブログ UKSTUDIOさんの記事『<strong><a href="http://ukstudio.jp/2011/07/02/bdd/">BDDについて自分なりにまとめてみた</a></strong>』には、BDDという言葉が表している２つの意味について説明をしてくれています。僕も少し疑問に感じていた部分を説明してくれる内容だったので、もし腑に落ちないと感じている方は是非ご覧になってください。</p>

<h2>補足：Cucumber(Turnip) + serverspec</h2>

<p><a href="hhttp://qiita.com/sawanoboly@github/items/ced6f7f1bfe2a26943c2" title="Ruby - cucumberのstepsでserverspecをつかう"><img src="http://farm6.staticflickr.com/5329/9626189031_799d02c42b_z.jpg" width="640" height="349" alt="Ruby - cucumberのstepsでserverspecをつかう"></a></p>

<p>Cucumber(Turnip)を使って構築済みサーバの確認のためにserverspecを使っているかたのQiitaの記事『<strong><a href="http://qiita.com/sawanoboly@github/items/ced6f7f1bfe2a26943c2">Ruby - cucumberのstepsでserverspecをつかう</a></strong>』を見つけたので残しておきます。この形式のメリットは、テスト結果をチームでシェアしやすい点があるようです。</p>

<h2>補足: The RSpec BookのRailsコードについて</h2>

<p><a href="http://qiita.com/emadurandal/items/0ed7ad242fe58403bf0e" title="「The RSpec Book」の第１９章（Railsのテスト）以降を試すには"><img src="http://farm4.staticflickr.com/3716/9630206782_8d03bb25bf_z.jpg" width="640" height="415" alt="「The RSpec Book」の第１９章（Railsのテスト）以降を試すには"></a></p>

<p>The RSpec BookのRailsインストールの部分ですが、Railsのバージョン3.0.0の時点でのコードを基準としているため、08/30時点ではコードを書いても動かせません。
<a href="https://twitter.com/emadurandal">emadurandal</a>さんがQiitaに『<strong><a href="http://qiita.com/emadurandal/items/0ed7ad242fe58403bf0e">「The RSpec Book」の第１９章（Railsのテスト）以降を試すには</a></strong>』で対処方法を書いていますので是非ご参照ください！</p>

<h2>Special Thanks</h2>

<p><a href="https://twitter.com/emadurandal">emadurandal</a>さんからThe RSpec BookのRailsコードについてコメントを頂きました。ありがとうございます！</p>

<p><strong><a href="http://gongo.hatenablog.com/entry/2013/05/29/223218">Turnip について (1) / まずは動かす - Thanks Driven Life</a></strong></p>

<p><strong><a href="http://diary.shu-cream.net/blog/2012/03/04/tapp-meets-turnip.html">Turnipを使ってtappのテストを書いた話</a></strong></p>

<h2>変更来歴</h2>

<p>(08/30 20:15) 補足：Cucumber(Turnip) + serverspecを追加<br/>
(08/30 22:45) 補足: The RSpec BookのRailsコードについてを追加<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Cloud EndPointsの勉強会@Google Japanに参加しました]]></title>
    <link href="http://morizyun.github.io/blog/google-app-engine-seminar/"/>
    <updated>2013-08-28T21:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/google-app-engine-seminar</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4798127914/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4798127914&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4798127914&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4798127914" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />08/28に六本木ヒルズで開催された『<a href="http://atnd.org/event/rainbowappsgoogle">Google App Engine を使ったスマホアプリ サーバーサイド開発入門セミナー</a>』に行ってきました。<strong>Google App Engine</strong>やバックエンド REST APIための<strong>Google Cloud Endpoints</strong>の紹介などが聞けたので、早速紹介します！</p>

<br style="clear: both;"/>


<!-- more -->


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Google App Engineの紹介</h2>

<p><a href="https://developers.google.com/appengine/?hl=ja" title="Google App Engine"><img src="http://farm8.staticflickr.com/7406/9619791646_142b18fdb9_z.jpg" width="640" height="309" alt="Google App Engine"></a></p>

<p>まず、Google Japan IncのEnterprise Cloud Platform部門の福田さんから<strong><a href="https://developers.google.com/appengine/?hl=ja">Google App Engine</a></strong>の紹介がありました。Google App Engineの特徴は次の通りです。</p>

<pre>
* トラフィックが爆発した場合の自動スケールアウトの仕組みがあり、落ちる心配なし
* SDKとして、Python, Java, Go, PHPをサポート
* Task Queue、XMPP や Cloud SQL 等のパワフルな API 群がある
* デプロイ後は、データセンターの場所もアクセスが多い地域に自動で最適化
</pre>


<p>Google App Engineの事例として、海外でハッカソンで開発された<strong><a href="http://www.getaround.com/">Getaround</a></strong>の紹介がありました。Google App Engineのおかげで2〜3日で開発できたり、オートスケールのおかげでインフラ管理の運用コストも最低限ですんだそうです。</p>

<p><a href="http://www.getaround.com/" title="Getaround"><img src="http://farm3.staticflickr.com/2887/9619781254_b6f97fd6ac_z.jpg" width="640" height="397" alt="Getaround"></a></p>

<p>あとはAKBのイベントサイトでピーク時に23k/秒のリクエストがあったけど、何事もなく捌けたそうです！</p>

<h2>Google Cloud Endpointsの紹介</h2>

<p><a href="https://developers.google.com/appengine/docs/java/endpoints/" title="Google Cloud Endpoint"><img src="http://farm3.staticflickr.com/2829/9619799418_5375794dbd_z.jpg" width="640" height="308" alt="Google Cloud Endpoint"></a></p>

<p>続いてRainbow Apps 横浜校の高橋さんから、<strong><a href="https://developers.google.com/appengine/docs/java/endpoints/">Google Cloud Endpoints</a></strong>の紹介がありました。Google Cloud Endpointsは、Googleのインフラを使ったREST形式のAPIを作成できる仕組みだそうです。こちらの特徴は次のとおりです。</p>

<pre>
* Javaで簡単にREST形式のエンドポイントを作成できる
* Android、iOSのクライアント用のライブラリを自動生成してくれる
* サーバにデプロイしたら、サーバメンテナンスの手間がかからない
* APIを開発したらブラウザ上でローカル/本番の「APIs Explorer」でテストできる
</pre>


<p>このセミナーの中では、実際にGoogle Cloud Endpointsを使ったAndroidアプリやiPhoneアプリの作成の実演などもありました。</p>

<p>Androidアプリの場合はクライアントライブラリの生成から、組み込みまでがすごく簡単に実施できていました。iPhoneアプリの場合はサーバサイドの開発やクライアントライブラリの生成は簡単ですが、iOSプロジェクトへの組み込みに関してはいくつか設定にノウハウが必要っぽかったです。</p>

<p>本当は資料を公開したかったんですが、セミナー限定っぽいので。。。ご興味があれば、<strong><a href="http://school.rainbowapps.com/yokohama">Rainbow Apps 横浜校さん</a></strong>に「資料ください」と問い合わせしてみてくださいまし。</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>あとがき</h2>

<p>勉強会はGoogle Cloud Endpointsでの実際の開発の流れや、連携するiOSアプリ開発で詰まりそうなポイントなども知ることができたので面白かったです！</p>

<p>一方でこの記事を客観的に見ると、会場の画像がなくって雰囲気があんまり伝わらなかったり、コードがないから技術的に有益な情報を伝えられなかったりと経験不足を実感中です。次に勉強会の報告をする際には、もう少しマシな記事になるように努めます！</p>

<h2>Special Thanks</h2>

<p><strong><a href="http://www.publickey1.jp/blog/13/baasgoogle_cloud_endpointsgoogle_app_engine.html">Google Cloud Endpoints公開、グーグルもモバイル向けBaaSへ参入。Google App Engineがモバイルのバックエンドに － Publickey</a></strong></p>
]]></content>
  </entry>
  
</feed>
