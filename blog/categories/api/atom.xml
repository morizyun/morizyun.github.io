<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: API | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-02-08T22:54:29+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RequestBin respondto.it エンドポイントへのHTTPテスト用サービス]]></title>
    <link href="http://morizyun.github.io/blog/endpoint-http-testing-api-json/"/>
    <updated>2014-10-19T12:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/endpoint-http-testing-api-json</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4048915134/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4048915134&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4048915134&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4048915134" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
APIへのアクセスのあるiPhoneアプリなどのクライアントを作るときに、まだAPIがない。。。なんてときに重宝するサービス、『<strong><a href="http://requestb.in/">RequestBin</a></strong>』と『<strong><a href="http://respondto.it/">respondto.it</a></strong>』の紹介です。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>RequestBin</h2>

<p><img src="https://farm4.staticflickr.com/3947/15562851452_91197ff3e1_z.jpg" width="640" height="343"></p>

<p>『<strong><a href="http://requestb.in/">RequestBin</a></strong>』はテスト用のエンドポイントを簡単に作る事ができるサービスです。
このサービスを使うと、クライアントからどんなリクエスト(パラメータ)があったかをWeb画面上から簡単に確認できます。
まだAPIがないようなクライアントでもどんなアクセスをしているかを簡単に確認することができます。<br/>
(ドキュメントを読みきれていませんが、たしか1日だけ使えるURLとかRebuild.fmで言ってたハズ)</p>

<h2>respondto.it</h2>

<p><img src="https://farm4.staticflickr.com/3950/15383384060_86bd6113e8_z.jpg" width="640" height="424"></p>

<p>『<strong><a href="http://respondto.it/">respondto.it</a></strong>』もRequestBinとほぼ同じく、テスト用のエンドポイントを作れます。
respondto.it のいいところは、</p>

<pre>
* jsonやxmlのエンドポイントも作れる
* Responseの値を自由に決められる
</pre>


<p>という点です。僕の用途ではrespondto.itがフィットしました！</p>

<h2>おまけ</h2>

<p>今回は触っていませんが、こんなのもアルっぽいです。</p>

<p><a href="http://www.jsontest.com/">JSON Test by jsontest</a></p>

<p><a href="http://httpbin.org/">httpbin(1): HTTP Client Testing Service</a></p>

<h2>あとがき</h2>

<p>一ヶ月近くブログを書けていませんでしたorz... これからはできるだけブログを書く習慣を取り戻していきたいお。</p>

<h2>Special Thanks</h2>

<p><a href="http://www.lornajane.net/posts/2013/endpoints-for-http-testing">Endpoints for HTTP Testing | LornaJane</a></p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[英和・和英辞書APIのデ辞蔵を呼び出すRubyコードのサンプル]]></title>
    <link href="http://morizyun.github.io/blog/dejizo-api-dictionary-api-ruby/"/>
    <updated>2013-12-28T09:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/dejizo-api-dictionary-api-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774149802/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774149802&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774149802&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774149802" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />この前のハッカソンで、英和・和英辞書のAPIを公開しているサービスを教えてもらって実際に使ってみたところ、なかなか面白かったのでメモがてらRubyのサンプルソースを共有します！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>英和・和英辞書APIのデ辞蔵 公式サイト</h2>

<p>デ辞蔵さんのサービスの紹介ページがこちら。</p>

<p><strong><a href="http://dejizo.jp/dev/index.html">デ辞蔵Webサービスとは - デ辞蔵</a></strong></p>

<p>でもって、REST APIの使用紹介はこちら。</p>

<p><strong><a href="http://dejizo.jp/dev/rest.html">REST版API - デ辞蔵</a></strong></p>

<p>取得できるのはXMLのみですが、シンプルな仕様なので、簡単に習得できます。</p>

<h2>英単語 => 日本語訳のサンプルソース(英和)</h2>

<p>ということで説明は苦手なので早速コードを。</p>

<p>まずは、英単語を和訳するための</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="k">def</span> <span class="nf">translate_en_to_jp</span><span class="p">(</span><span class="n">word_en</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# (1) 英単語の単語ItemIdを取得</span>
</span><span class='line'><span class="sr">enc_word = URI.encode(word_en)</span>
</span><span class='line'><span class="sr">url = &quot;http:/</span><span class="o">/</span><span class="kp">public</span><span class="o">.</span><span class="n">dejizo</span><span class="o">.</span><span class="n">jp</span><span class="o">/</span><span class="no">NetDicV09</span><span class="o">.</span><span class="n">asmx</span><span class="o">/</span><span class="no">SearchDicItemLite</span><span class="p">?</span><span class="no">Dic</span><span class="o">=</span><span class="no">EJdict</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="no">Word</span><span class="o">=</span><span class="c1">#{enc_word}&amp;amp;Scope=HEADWORD&amp;amp;Match=EXACT&amp;amp;Merge=OR&amp;amp;Prof=XHTML&amp;amp;PageSize=20&amp;amp;PageIndex=0&quot;</span>
</span><span class='line'><span class="n">xml</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'><span class="n">doc</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">XML</span><span class="p">(</span><span class="n">xml</span><span class="p">)</span>
</span><span class='line'><span class="n">item_id</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;ItemID&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">inner_text</span> <span class="k">rescue</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">return</span> <span class="kp">nil</span> <span class="k">unless</span> <span class="n">item_id</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># (2)英単語のItemIdから翻訳を取得</span>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://public.dejizo.jp/NetDicV09.asmx/GetDicItemLite?Dic=EJdict&amp;amp;Item=</span><span class="si">#{</span><span class="n">item_id</span><span class="si">}</span><span class="s2">&amp;amp;Loc=&amp;amp;Prof=XHTML&quot;</span>
</span><span class='line'><span class="n">xml</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'><span class="n">doc</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">XML</span><span class="p">(</span><span class="n">xml</span><span class="p">)</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;Body&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">inner_text</span> <span class="k">rescue</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">text</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/(\r\n|\r|\n|\t|\s)/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">text</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>デ辞蔵さんのAPIではこんなふうに、単語のItemIdを取得してからその日本語訳を取得するようになります。2段階のアクセスですが、XMLがシンプルなので使いやすいです！</p>

<h2>日本語の単語 => 英単語のサンプルソース(和英)</h2>

<p>続いて、日本語の単語から対応する英単語を取得する和英辞書のサンプルソースです。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">translate_jp_to_en</span><span class="p">(</span><span class="n">word_jp</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# 日本語単語のItemIdを取得</span>
</span><span class='line'><span class="sr">enc_word = URI.encode(word_jp)</span>
</span><span class='line'><span class="sr">url = &quot;http:/</span><span class="o">/</span><span class="kp">public</span><span class="o">.</span><span class="n">dejizo</span><span class="o">.</span><span class="n">jp</span><span class="o">/</span><span class="no">NetDicV09</span><span class="o">.</span><span class="n">asmx</span><span class="o">/</span><span class="no">SearchDicItemLite</span><span class="p">?</span><span class="no">Dic</span><span class="o">=</span><span class="no">EdictJE</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="no">Word</span><span class="o">=</span><span class="c1">#{enc_word}&amp;amp;Scope=HEADWORD&amp;amp;Match=EXACT&amp;amp;Merge=OR&amp;amp;Prof=XHTML&amp;amp;PageSize=20&amp;amp;PageIndex=0&quot;</span>
</span><span class='line'><span class="n">xml</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'><span class="n">doc</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">XML</span><span class="p">(</span><span class="n">xml</span><span class="p">)</span>
</span><span class='line'><span class="n">item_id</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;ItemID&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">inner_text</span> <span class="k">rescue</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">return</span> <span class="n">item_id</span> <span class="k">unless</span> <span class="n">item_id</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 日本語単語のItemIdから英単語を取得</span>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://public.dejizo.jp/NetDicV09.asmx/GetDicItemLite?Dic=EdictJE&amp;amp;Item=</span><span class="si">#{</span><span class="n">item_id</span><span class="si">}</span><span class="s2">&amp;amp;Loc=&amp;amp;Prof=XHTML&quot;</span>
</span><span class='line'><span class="n">xml</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">url</span><span class="p">)</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'><span class="n">doc</span> <span class="o">=</span> <span class="no">Nokogiri</span><span class="o">::</span><span class="no">XML</span><span class="p">(</span><span class="n">xml</span><span class="p">)</span>
</span><span class='line'><span class="n">text</span> <span class="o">=</span> <span class="n">doc</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s1">&#39;Body&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">inner_text</span> <span class="k">rescue</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">text</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/(\r\n|\r|\n|\t|\s)/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">return</span> <span class="n">text</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ということでかんたんですがサンプルソースのご紹介でした。</p>

<p>ソースコードにツッコミ大歓迎です。コメント頂けたら、泣いて喜びますw</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsのテストやRails4.1のChange Logについて【Rails東京 第90回】]]></title>
    <link href="http://morizyun.github.io/blog/rspec-changelog-rails-tokyo-90/"/>
    <updated>2013-12-21T20:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rspec-changelog-rails-tokyo-90</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4798121932/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4798121932&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4798121932&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4798121932" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />12/21(土)に開催された<strong><a href="http://railsmeetingtokyo.doorkeeper.jp/events/7642">Rails東京 第90回</a></strong>の勉強会のレポート記事です。</p>

<p>この勉強会は全員参加型で議論し合うので、そこで出た多様な意見や答えを通して、考えを広げることができます。本当にためになる勉強会です＾＾</p>

<p>今回は僕が参加した次の2つのセッションについてレポートします。</p>

<pre>
(1) Railsのテストについて
(2) Rails 4.1のChangeLogについて
</pre>


<p>この記事は基本的には僕の忘備録なので、読みにくいかもです。こうして欲しいなどのリクエストがあればどんどんコメントください。あと、病み上がりで若干ぼけてたので、変なところがあればツッコミよろしくお願いします！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>(1) Railsのテストについて</h2>

<h3>テストの種類や代表的なツール</h3>

<p>テストの種類を大きく分けると2つ。</p>

<pre>
(A) MVCの動作を保証するためのテスト(カバレッジを上げるためのテストなど)
(B) Acceptance Test(受け入れテスト)について
</pre>


<p>MVCのテストフレームワークとして代表的なものは、<strong><a href="http://rspec.info/">Rspec</a>, <a href="https://github.com/seattlerb/minitest">Mini Test</a>、<a href="http://pivotal.github.io/jasmine/">Jasmin</a></strong>などなど。</p>

<p>受け入れテストとして代表的なのは、<a href="http://cukes.info/">Cucumber</a>、<a href="https://github.com/jnicklas/turnip">Turnip</a>、<strong><a href="https://github.com/jnicklas/capybara">Capybara</a>、<a href="http://www.seleniumhq.org/">Selenium</a>、<a href="https://github.com/thoughtbot/capybara-webkit">Capybara-webkit</a>、<a href="http://phantomjs.org/">PhantomJS</a>、<a href="https://github.com/jonleighton/poltergeist">Poltergeist</a></strong>など。</p>

<p>ちなみにテスト周りではこちらの記事がオススメ。</p>

<p><strong><a href="http://magazine.rubyist.net/?0042-FromCucumberToTurnip">Rubyist Magazine - エンドツーエンドテストの自動化は Cucumber から Turnip へ</a></strong></p>

<p><a href="http://magazine.rubyist.net/?0042-FromCucumberToTurnip"><img src="http://farm6.staticflickr.com/5510/11474622583_0d3a87a503_z.jpg"/></a></p>

<h2>カバレッジについて</h2>

<p>テストは「振る舞い」を確実に記述するようにする。カバレッジは100%を目指す必要はなくって、低い時に確認をするための指針にする。コスト見合いでシステムに応じて着地点を見出す。</p>

<h2>受け入れテストについて</h2>

<p>受け入れテストは、Request spec よりもCapybaraやTurnipなどで書いたほうがシナリオとして記述できるのでわかりやすくなる。その際にテストの記述が複雑になる場合は、custom matcherを別途つくるのもあり。</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>(2) Rails 4.1 の Change Logについて</h2>

<h3>Change Logsのリスト</h3>

<p>ということでChange Logsのリスト。細かくすると結構なボリューム。</p>

<p><strong><a href="http://edgeguides.rubyonrails.org/4_1_release_notes.html#railties">Ruby on Rails 4.1 Release Notes — Ruby on Rails Guides</a></strong></p>

<p><strong><a href="http://coherence.io/blog/2013/12/17/whats-new-in-rails-4-1.html">What's new in Rails 4.1 - Coherence Blog</a></strong></p>

<p><strong><a href="https://github.com/rails/rails/blob/master/actionmailer/CHANGELOG.md">rails/actionmailer/CHANGELOG.md at master · rails/rails</a></strong></p>

<p><strong><a href="https://github.com/rails/rails/blob/master/actionpack/CHANGELOG.md">rails/actionpack/CHANGELOG.md at master · rails/rails</a></strong></p>

<p><strong><a href="https://github.com/rails/rails/tree/master/actionview">rails/actionview at master · rails/rails</a></strong></p>

<p><strong><a href="https://github.com/rails/rails/blob/master/actionview/CHANGELOG.md">rails/actionview/CHANGELOG.md at master · rails/rails</a></strong></p>

<p><strong><a href="https://github.com/rails/rails/blob/master/activemodel/CHANGELOG.md">rails/activemodel/CHANGELOG.md at master · rails/rails</a></strong></p>

<p><strong><a href="https://github.com/rails/rails/blob/master/activerecord/CHANGELOG.md">rails/activerecord/CHANGELOG.md at master · rails/rails</a></strong></p>

<p><strong><a href="https://github.com/rails/rails/blob/master/activesupport/CHANGELOG.md">rails/activesupport/CHANGELOG.md at master · rails/rails</a></strong></p>

<p><strong><a href="https://github.com/rails/rails/blob/master/railties/CHANGELOG.md">rails/railties/CHANGELOG.md at master · rails/rails</a></strong></p>

<p>ここからは実際に読み合わせをしてみて特に気になった新機能について。</p>

<h3>Preloaderの『spring』が標準搭載に</h3>

<p><strong><a href="https://github.com/jonleighton/spring/blob/master/README.md">Spring</a></strong>が標準搭載になりました。これでRailsのrakeやrspecが早くなりそう！</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bin/spring status
</span><span class='line'>Spring is running:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; 1182 spring server | my_app | started 29 mins ago
</span><span class='line'> 3656 spring app    | my_app | started 23 secs ago | <span class="nb">test </span>mode
</span><span class='line'> 3746 spring app    | my_app | started 10 secs ago | development mode
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Viewの切り分けが簡単に</h3>

<p><code>action pack variants</code>を使うことでViewの使い分けがより簡単に。イメージ的にはjp-mobileの機能の一部がRailsの標準になった感じです。</p>

<p>こちらが<code>app/contorller/application.rb</code>。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:device_variant</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;private&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">device_variant</span>
</span><span class='line'>  <span class="n">request</span><span class="o">.</span><span class="n">variant</span> <span class="o">=</span> <span class="ss">:tablet</span> <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">user_agent</span> <span class="o">=~</span> <span class="sr">/iPad/</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>でView側ではこんなふうに振り分けができます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="k">do</span> <span class="o">|</span><span class="n">html</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;html.tablet #=&amp;gt; app/</span><span class="n">views</span><span class="o">/</span><span class="n">projects</span><span class="o">/</span><span class="n">show</span><span class="o">.</span><span class="n">html</span><span class="o">+</span><span class="n">tablet</span><span class="o">.</span><span class="n">erb</span>
</span><span class='line'><span class="n">html</span><span class="o">.</span><span class="n">phone</span>  <span class="c1">#=&amp;gt; app/views/projects/show.html+phone.erb</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>メールのプレビュー機能がついた</h3>

<p><code>http://localhost:3000/rails/mailers/notifier/welcome</code>にアクセスするとプレビュー機能がつかえるようになるみたい。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">NotifierPreview</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActionMailer</span><span class="o">::</span><span class="no">Preview</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">welcome</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;Notifier.welcome(User.first)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ちなみに個この話題の中ででたサービス。無料で使える開発専門のSTMPサーバ。便利便利！</p>

<p><a href="http://mailtrap.io/"><img src="http://farm6.staticflickr.com/5504/11477175444_2b02dc58a6_z.jpg"></a></p>

<h3>concerningの書き方が増えた?</h3>

<p>これは僕が勘違いしてるような気もしますが、<code>concerning</code>がこんな風に書けるようになったみたいです。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Todo</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">concerning</span> <span class="ss">:EventTracking</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;included do</span>
</span><span class='line'><span class="sr">  has_many :events</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">def latest_event</span>
</span><span class='line'><span class="sr">  ...</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">private</span>
</span><span class='line'><span class="sr">  def some_internal_method</span>
</span><span class='line'><span class="sr">    ...</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>User FriendlyなURLを作りやすくなった</h3>

<p><code>to_param</code>でSEOに適したPretty URLをかけるようになった。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;example&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Fancy Pants&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">id</span>       <span class="c1"># =&gt; 123</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">to_param</span> <span class="c1"># =&gt; &quot;123-fancy-pants&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>他にもたくさんありますが、PostgreSQLのサポートが手厚くなったのとメール関係の機能が増えたのが印象的でした。</p>

<h2>おまけ: Railsの設計について</h2>

<p>こちらのセッションは僕は参加できなかったんですが、<strong><a href="https://twitter.com/tchikuba">@tchikuba</a></strong>さんのブログ記事『<strong><a href="http://tchikuba.github.io/blog/2013/12/21/rails-study-tokyo-90/">Rails勉強会@東京#90に参加してきました</a></strong>』にわかりやすい説明をアップして頂いています。ありがとうございます＾＾</p>

<p>せっかくなので、その話題の中で出たリンクも一応共有。</p>

<h3>オブジェクト指向エクササイズのススメ</h3>

<iframe src="http://www.slideshare.net/slideshow/embed_code/1033616" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/yojik/ss-1033616" title="オブジェクト指向エクササイズのススメ" target="_blank">オブジェクト指向エクササイズのススメ</a> </strong> from <strong><a href="http://www.slideshare.net/yojik" target="_blank">Yoji Kanno</a></strong> </div></p>

<p><a href="http://techracho.bpsinc.jp/hachi8833/2013_11_19/14738"><img src="http://farm6.staticflickr.com/5501/11476913024_53857486eb_z.jpg" /></a></p>

<p><strong><a href="http://qiita.com/joker1007/items/2a03500017766bdb0234">Ruby - てめえらのRailsはオブジェクト指向じゃねえ！まずはCallbackクラス、Validatorクラスを活用しろ！</a></strong></p>

<h2>おまけ：認証系のGem Sorceryについて</h2>

<p>Deviseと似たGemで、面白そうなGem『<strong><a href="https://github.com/NoamB/sorcery">Sorcery</a></strong>』を教えてもらいました。今度試してみます！</p>

<h3>参考リンク</h3>

<p><strong><a href="http://eureka-me.tumblr.com/post/35560016573/rails-sorcery">Railsのプラグインを勉強した。[Sorcery編] - NOT SO BAD</a></strong></p>

<p><strong><a href="http://ja.asciicasts.com/episodes/283-authentication-with-sorcery">ASCIIcasts - “Episode 283 - Sorceryで認証”</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Grape - RailsでスピーディにAPIを作成！]]></title>
    <link href="http://morizyun.github.io/blog/rails-grepe-api-heroku-ruby/"/>
    <updated>2013-12-14T09:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rails-grepe-api-heroku-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4048687158/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4048687158&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4048687158&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4048687158" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />RailsやSinatra、RubyでAPIを作成する際に便利なGem『<strong><a href="https://github.com/intridea/grape">Grape</a></strong>』の紹介です。</p>

<p>このGemは簡単にjson、xml、txtなどのAPIを作成できます。それだけではなく、APIのバージョン管理やパラメータのバリデーション、モジュール化など、本格的なAPIを作る上で必要になる機能も持っています。</p>

<p>今回はハッカソンの中で初めてGrapeを使ってJSON APIを作ったので内容は浅めですが、備忘録として残しておきます！もしなにかお気づきの点等有ればコメントください。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Gemのインストール</h2>

<p><code>Gemfile</code>に以下を追加して、コンソールで<code>bundle</code>を実行してください。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;API Support&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">gem</span> <span class="s1">&#39;grape&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>APIのサンプル</h2>

<p>Twitterを模倣したサンプル(?)が、公式のGitHubのREADMEに書かれていたので転載。</p>

<p><code>app/api/twitter.rb</code>を作成して、以下のようなコードを書きます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Twitter</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">API</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Grape</span><span class="o">::</span><span class="no">API</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# versionは:headerや、:paramなどもあり</span>
</span><span class='line'><span class="sr">version &#39;v1&#39;, using: :path, vendor: &#39;twitter&#39;</span>
</span><span class='line'><span class="sr">format :json</span>
</span><span class='line'>
</span><span class='line'><span class="sr">helpers do</span>
</span><span class='line'><span class="sr">  def current_user</span>
</span><span class='line'><span class="sr">    @current_user ||= User.authorize!(env)</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  def authenticate!</span>
</span><span class='line'><span class="sr">    error!(&#39;401 Unauthorized&#39;, 401) unless current_user</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">resource :statuses do</span>
</span><span class='line'><span class="sr">  desc &quot;Return a public timeline.&quot;</span>
</span><span class='line'><span class="sr">  get :public_timeline do</span>
</span><span class='line'><span class="sr">    Status.limit(20)</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  desc &quot;Return a personal timeline.&quot;</span>
</span><span class='line'><span class="sr">  get :home_timeline do</span>
</span><span class='line'><span class="sr">    authenticate!</span>
</span><span class='line'><span class="sr">    current_user.statuses.limit(20)</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  desc &quot;Return a status.&quot;</span>
</span><span class='line'><span class="sr">  params do</span>
</span><span class='line'><span class="sr">    requires :id, type: Integer, desc: &quot;Status id.&quot;</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">  route_param :id do</span>
</span><span class='line'><span class="sr">    get do</span>
</span><span class='line'><span class="sr">      Status.find(params[:id])</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  desc &quot;Create a status.&quot;</span>
</span><span class='line'><span class="sr">  params do</span>
</span><span class='line'><span class="sr">    requires :status, type: String, desc: &quot;Your status.&quot;</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">  post do</span>
</span><span class='line'><span class="sr">    authenticate!</span>
</span><span class='line'><span class="sr">    Status.create!({</span>
</span><span class='line'><span class="sr">      user: current_user,</span>
</span><span class='line'><span class="sr">      text: params[:status]</span>
</span><span class='line'><span class="sr">    })</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  desc &quot;Update a status.&quot;</span>
</span><span class='line'><span class="sr">  params do</span>
</span><span class='line'><span class="sr">    requires :id, type: String, desc: &quot;Status ID.&quot;</span>
</span><span class='line'><span class="sr">    requires :status, type: String, desc: &quot;Your status.&quot;</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">  put &#39;:id&#39; do</span>
</span><span class='line'><span class="sr">    authenticate!</span>
</span><span class='line'><span class="sr">    current_user.statuses.find(params[:id]).update({</span>
</span><span class='line'><span class="sr">      user: current_user,</span>
</span><span class='line'><span class="sr">      text: params[:status]</span>
</span><span class='line'><span class="sr">    })</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  desc &quot;Delete a status.&quot;</span>
</span><span class='line'><span class="sr">  params do</span>
</span><span class='line'><span class="sr">    requires :id, type: String, desc: &quot;Status ID.&quot;</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">  delete &#39;:id&#39; do</span>
</span><span class='line'><span class="sr">    authenticate!</span>
</span><span class='line'><span class="sr">    current_user.statuses.find(params[:id]).destroy</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>パラメータの必須・任意の制御</h2>

<p>APIでパラメータを必須にする場合と、任意にする場合はこちらのDSLで制御。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">requires</span> <span class="ss">:id</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">String</span> <span class="c1"># =&gt; 必須</span>
</span><span class='line'><span class="n">optional</span> <span class="ss">:text</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">String</span> <span class="c1">#=&gt; 任意</span>
</span><span class='line'><span class="n">optional</span> <span class="ss">:status</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">String</span> <span class="n">regexp</span><span class="p">:</span> <span class="sr">/&lt;sup&gt;[a-z]+$/</span><span class="o">&lt;</span><span class="sr">/sup&gt; #=&gt; regexpで正規表現チェック</span>
</span><span class='line'><span class="sr">optional :color, type: String, default: &#39;blue&#39; #=&gt; defaultで初期値</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>バリデーションはAPIの要なので、かなり考えられている印象です。詳しくは、<strong><a href="https://github.com/intridea/grape#parameter-validation-and-coercion">公式GitHub</a></strong>の説明がわかりやすいです。</p>

<h2>Rails側への設定</h2>

<p>Railsでapiファイルを自動で読み込むように、<code>config/application.rb</code>に以下のコードを追加。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s2">&quot;app/api&quot;</span><span class="p">,</span> <span class="n">glob</span><span class="p">:</span> <span class="s2">&quot;&lt;em&gt;&lt;em&gt;/&lt;/em&gt;.rb&quot;</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">+=</span> <span class="no">Dir</span><span class="o">[</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/app/api/&lt;/em&gt;&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>APIのルーティングを追加。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mount</span> <span class="no">Twitter</span><span class="o">::</span><span class="no">API</span> <span class="o">=&gt;</span> <span class="s1">&#39;/&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>まとめ</h2>

<p>ということでAPIを簡単・スピーディに構築できました。 また別のプロジェクトでAPIを作成したら、内容を追加していきます！</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Special Thanks</h2>

<p><strong><a href="https://github.com/intridea/grape/wiki">intridea/grape Wiki</a></strong></p>

<p><strong><a href="http://qiita.com/anoworl/items/756f01cc3d188ebad139">Ruby - RailsとGrapeで行う最高のWeb API開発</a></strong></p>

<p><strong><a href="http://qiita.com/milkcocoa/items/5a4656ee1fd51e86e57e">Grape + RSpec + json_expressions で Awesome な API の受け入れテスト</a></strong></p>

<p><strong><a href="http://qiita.com/fakestarbaby/items/fa03cf333744b7c70e72">Rails - Grape | API生成マイクロフレームワーク</a></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Herokuの無料枠でTwitter Stream APIを常時監視 => DBに保存するRubyコード]]></title>
    <link href="http://morizyun.github.io/blog/ruby-twitter-stream-api-heroku/"/>
    <updated>2013-12-12T22:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/ruby-twitter-stream-api-heroku</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00GJGOPU0/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00GJGOPU0&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00GJGOPU0&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00GJGOPU0" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /><strong><a href="https://dev.twitter.com/docs/streaming-apis">TwitterのStreaming API</a></strong>を使うと、流れてくるTweetを常時監視することができます。</p>

<p>監視する対象は特定のキーワードだったり、特定のユーザーだったり、特定のサイトを指定したりすることができます。ユーザーの場合はユーザーのツイートに対するリプライも取得できるので、使って見るとかなり夢が広がるAPIです。</p>

<p>今回はこのTwitter Stream APIをHerokuで無料で監視しつつ、DBに蓄積するPGを書いたのでその紹介をしていきます。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>ソースコード</h2>

<p>今回作成したソースコードはこちら。</p>

<p>詳細の説明は省きますが、基本的には環境変数に「TwitterのAPIのキー情報」と「DBへの接続情報」を書いて、後はAPIをEventMachineで監視 => Tweetが取得できたらDBに書き込むようになっています。</p>

<p>今回はこのソースを<code>tweetscan.rb</code>とします。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;mysql2&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Bundler.require&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">require</span> <span class="s1">&#39;twitter/json_stream&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;TwitterのAPIキー情報を環境変数から取得&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">TWITTER_CONSUMER_KEY</span>        <span class="o">||=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;TWITTER_CONSUMER_KEY&#39;</span><span class="o">]</span>
</span><span class='line'><span class="no">TWITTER_CONSUMER_SECRET</span>     <span class="o">||=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;TWITTER_CONSUMER_SECRET&#39;</span><span class="o">]</span>
</span><span class='line'><span class="no">TWITTER_OAUTH_TOKEN</span>         <span class="o">||=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;TWITTER_OAUTH_TOKEN&#39;</span><span class="o">]</span>
</span><span class='line'><span class="no">TWITTER_OAUTH_TOKEN_SECRET</span>  <span class="o">||=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;TWITTER_OAUTH_TOKEN_SECRET&#39;</span><span class="o">]</span>
</span><span class='line'><span class="no">FOLLOWS</span>                     <span class="o">||=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FOLLOWS&#39;</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;DBへの接続情報を環境変数から取得&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">DB_HOSTNAME</span>   <span class="o">||=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;DB_HOSTNAME&#39;</span><span class="o">]</span>
</span><span class='line'><span class="no">DB_USER_NAME</span>  <span class="o">||=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;DB_USER_NAME&#39;</span><span class="o">]</span>
</span><span class='line'><span class="no">DB_PASSWORD</span>   <span class="o">||=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;DB_PASSWORD&#39;</span><span class="o">]</span>
</span><span class='line'><span class="no">DB_NAME</span>       <span class="o">||=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;DB_NAME&#39;</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;EventMachine::run {</span>
</span><span class='line'><span class="sr">  stream = Twitter::JSONStream.connect(&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="ss">:path</span>    <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="s2">&quot;/1.1/statuses/filter.json?follow=</span><span class="si">#{</span><span class="no">FOLLOWS</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'><span class="ss">:oauth</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">:consumer_key</span>    <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="no">TWITTER_CONSUMER_KEY</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:consumer_secret</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="no">TWITTER_CONSUMER_SECRET</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:access_key</span>      <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="no">TWITTER_OAUTH_TOKEN</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:access_secret</span>   <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="no">TWITTER_OAUTH_TOKEN_SECRET</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="ss">:ssl</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="kp">true</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  stream.each_item do |item|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vg">$stdout</span><span class="o">.</span><span class="n">print</span> <span class="s2">&quot;item: </span><span class="si">#{</span><span class="n">item</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="vg">$stdout</span><span class="o">.</span><span class="n">flush</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># MySQLへ接続(Postgresなどを使う場合は適宜変更)</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="no">Mysql2</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:host</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="no">DB_HOSTNAME</span><span class="p">,</span> <span class="ss">:username</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="no">DB_USER_NAME</span><span class="p">,</span> <span class="ss">:password</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="no">DB_PASSWORD</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="ss">:database</span> <span class="o">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="no">DB_NAME</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Tweetのjsonをパース</span>
</span><span class='line'><span class="n">tw_json</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># DBに格納するためにエンコーディング</span>
</span><span class='line'><span class="n">user_id</span>                         <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">tw_json</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;id_str&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">user_name</span>                       <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">tw_json</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">user_screen_name</span>                <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">tw_json</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;screen_name&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">user_image</span>                      <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">tw_json</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;profile_image_url&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">user_description</span>                <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">tw_json</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;description&#39;</span><span class="o">]</span><span class="p">)</span> <span class="k">rescue</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">text</span>                            <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">tw_json</span><span class="o">[</span><span class="s1">&#39;text&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">post_media_url</span>                  <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">tw_json</span><span class="o">[</span><span class="s1">&#39;entities&#39;</span><span class="o">][</span><span class="s1">&#39;media&#39;</span><span class="o">].</span><span class="n">first</span><span class="o">[</span><span class="s1">&#39;media_url&#39;</span><span class="o">]</span><span class="p">)</span> <span class="k">rescue</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">twitter_status_id</span>               <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">tw_json</span><span class="o">[</span><span class="s1">&#39;id_str&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">twitter_reply_status_id</span>         <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">tw_json</span><span class="o">[</span><span class="s1">&#39;in_reply_to_status_id_str&#39;</span><span class="o">]</span><span class="p">)</span> <span class="k">rescue</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">twitter_reply_user_id</span>           <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">tw_json</span><span class="o">[</span><span class="s1">&#39;in_reply_to_user_id_str&#39;</span><span class="o">]</span><span class="p">)</span>   <span class="k">rescue</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">twitter_reply_user_screen_name</span>  <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">tw_json</span><span class="o">[</span><span class="s1">&#39;in_reply_to_screen_name&#39;</span><span class="o">]</span><span class="p">)</span>   <span class="k">rescue</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># tweetsテーブルに書き込み</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="s2">&quot;INSERT INTO tweets (user_id, user_name, user_screen_name, text, post_media_url, user_image, user_description, twitter_status_id, twitter_reply_status_id, twitter_reply_user_id, twitter_reply_user_screen_name, updated_at, created_at) VALUES (&#39;</span><span class="si">#{</span><span class="n">user_id</span><span class="si">}</span><span class="s2">&#39;, &#39;</span><span class="si">#{</span><span class="n">user_name</span><span class="si">}</span><span class="s2">&#39;, &#39;</span><span class="si">#{</span><span class="n">user_screen_name</span><span class="si">}</span><span class="s2">&#39;, &#39;</span><span class="si">#{</span><span class="n">text</span><span class="si">}</span><span class="s2">&#39;, &#39;</span><span class="si">#{</span><span class="n">post_media_url</span><span class="si">}</span><span class="s2">&#39;, &#39;</span><span class="si">#{</span><span class="n">user_image</span><span class="si">}</span><span class="s2">&#39;, &#39;</span><span class="si">#{</span><span class="n">user_description</span><span class="si">}</span><span class="s2">&#39;, &#39;</span><span class="si">#{</span><span class="n">twitter_status_id</span><span class="si">}</span><span class="s2">&#39;, &#39;</span><span class="si">#{</span><span class="n">twitter_reply_status_id</span><span class="si">}</span><span class="s2">&#39;, &#39;</span><span class="si">#{</span><span class="n">twitter_reply_user_id</span><span class="si">}</span><span class="s2">&#39;, &#39;</span><span class="si">#{</span><span class="n">twitter_reply_user_screen_name</span><span class="si">}</span><span class="s2">&#39;, &#39;</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">&#39;, &#39;</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">&#39;)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># MySQLとの接続を解除</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  stream.on_error do |message|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vg">$stdout</span><span class="o">.</span><span class="n">print</span> <span class="s2">&quot;error: </span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="vg">$stdout</span><span class="o">.</span><span class="n">flush</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # 再接続は書いていないです。書いて教えてくださいw</span>
</span><span class='line'><span class="sr">  stream.on_reconnect do |timeout, retries|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vg">$stdout</span><span class="o">.</span><span class="n">print</span> <span class="s2">&quot;reconnecting in: </span><span class="si">#{</span><span class="n">timeout</span><span class="si">}</span><span class="s2"> seconds</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="vg">$stdout</span><span class="o">.</span><span class="n">flush</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  stream.on_max_reconnects do |timeout, retries|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vg">$stdout</span><span class="o">.</span><span class="n">print</span> <span class="s2">&quot;Failed after </span><span class="si">#{</span><span class="n">retries</span><span class="si">}</span><span class="s2"> failed reconnects</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="vg">$stdout</span><span class="o">.</span><span class="n">flush</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>foremanをつかったプロセス管理</h2>

<p>今回のソースはforemanを使っています。<code>Gemfile</code>に以下のコードを追加して<code>bundle install</code>を実行。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;プロセス管理&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;gem <span class="s1">&#39;foreman&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>次にforeman用の設定ファイル<code>Procfile</code>を作成。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tweetscan: bundle <span class="nb">exec </span>ruby tweetscan.rb
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>これで設定は完了です。以下のコードを実行するとプロセスがスタートして、Twitter Streamの監視を始めます。<br/>
ただし現時点では、Twitterのキー情報やDBへの接続情報が登録されていないので失敗します。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>foreman start
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Twitterのキー情報の取得と環境変数への登録</h2>

<p>まずは以下のサイトでTwitterアプリを登録してください。<br/>
(Sign in => アプリの登録)</p>

<p><strong><a href="https://dev.twitter.com/">Twitter Developers</a></strong></p>

<p>登録したら環境変数にTwitterキーを登録します。まずはローカルへのキー情報の登録です。foremanで管理しているプロセスでは、<code>.env</code>ファイルに環境変数にしたい情報を書き込むと勝手に読み込んでくれます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">TWITTER_CONSUMER_KEY</span><span class="o">=</span>xxx
</span><span class='line'><span class="nv">TWITTER_CONSUMER_SECRET</span><span class="o">=</span>xxx
</span><span class='line'><span class="nv">TWITTER_OAUTH_TOKEN</span><span class="o">=</span>xxx
</span><span class='line'><span class="nv">TWITTER_OAUTH_TOKEN_SECRET</span><span class="o">=</span>xxx
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>こういった面倒な手順をふむ理由は、キー情報が第三者に使われると悪いことをされる可能性があるからです。(<code>.env</code>はgitignore☆)</p>

<p>同じ流れで、DBの情報やAPIの引数なども環境変数に登録してください。</p>

<h2>Herokuへのデプロイ</h2>

<p>では、Herokuにソースコードをデプロイ。<br/>
(このまえにソースはローカルでgitにコミットしておいてください)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku create heroku-twitterscan --stack cedar
</span><span class='line'>git push heroku master
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>続いて、環境変数にTwitterのキー情報やDBへの接続情報、APIの引数などを登録。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku config:set <span class="nv">TWITTER_CONSUMER_KEY</span><span class="o">=</span>xxx
</span><span class='line'>heroku config:set <span class="nv">TWITTER_CONSUMER_SECRET</span><span class="o">=</span>xxx
</span><span class='line'>heroku config:set <span class="nv">TWITTER_OAUTH_TOKEN</span><span class="o">=</span>xxx
</span><span class='line'>heroku config:set <span class="nv">TWITTER_OAUTH_TOKEN_SECRET</span><span class="o">=</span>xxx
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ちなみに、HerokuのDBの作成手順などは拙著の以下の記事などがオススメです。</p>

<p><strong><a href="http://morizyun.github.io/blog/heroku-postgresql-useful-commands/">Heroku/Posgresqlでよく使うコマンド一覧</a></strong></p>

<p><strong><a href="http://morizyun.github.io/blog/heroku-rails4-postgresql-introduction/">Rails4でheroku Pushまでの最短手順 [haml/bootstrap 3.0/postgresql or MySQL]</a></strong></p>

<p>ということで<code>twitterscan.rb</code>のプロセスを起動！</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku scale <span class="nv">twitterscan</span><span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>以下のコマンドでプロセスが起動しているか、確認できます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku ps
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ツイート結果はログからも確認できます！</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku logs --tail
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ということでHerokuの無料枠でTweetをチェックして、DBに格納までする手順でした。
こちらはGitHubでもソースコードを公開しておきます。</p>

<p><a href="https://github.com/morizyun/tweetscan" class="button big primary">morizyun/tweetscan GitHub</a></p>

<p>エンジニア経験浅いので、是非色々とツッコミを頂ければ幸いです。よろしくお願いします！</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Special Thanks</h2>

<p><strong><a href="https://github.com/voloko/twitter-stream">voloko/twitter-stream</a></strong></p>

<p><strong><a href="http://blog.monoweb.info/blog/2012/01/24/heroku-streaming-api/">HerokuでStreaming APIを使うTwitter Botを作る | monoの開発ブログ</a></strong></p>

<p><strong><a href="http://d.hatena.ne.jp/tagomoris/20111210/1323502295">RubyでMySQLに繋ぐためのruby-mysqlとmysql2 - tagomorisのメモ置き場</a></strong></p>

<p><strong><a href="http://stackoverflow.com/questions/5572557/convert-datetime-to-mysql-format-on-ruby-on-rails">Convert datetime to mysql format on Ruby on Rails - Stack Overflow</a></strong></p>
]]></content>
  </entry>
  
</feed>
