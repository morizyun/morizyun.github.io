<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RubyGem | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/rubygem/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-27T23:53:58+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[「Upsert」 大量のデータを一括でInsert/UpdateするGem！]]></title>
    <link href="http://morizyun.github.io/blog/upsert-ruby-gem-bulk-insert-upsert-postgresql/"/>
    <updated>2015-06-14T18:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/upsert-ruby-gem-bulk-insert-upsert-postgresql</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00YG8PXLI/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00YG8PXLI&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00YG8PXLI&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00YG8PXLI" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Rails/Rubyで大量のデータを一括で新規登録・更新スクリプト
を書く場合は、ActiveRecordは生成コストが高くて、必ずしも向いていません。そんな状況での利用にオススメなのが、この
『<strong><a href="https://github.com/seamusabshere/upsert">upsert</a></strong>』というGemです。</p>

<p>このGemがサポートしているデータベースは、<code>MySQL、PostgreSQL、SQLite3</code>です。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Upsertが適した利用シーン</h2>

<p>実装としては、OracleやMySQLのPL/SQL、PostgreSQLのPL/pgSQLのスクリプトを一時的に定義して、
その中で対象テーブルに一致するキーのレコードがあればupdate、なければinsert処理を行ってくれます。
DB内部でレコードの有無を判定して、insert/update処理までおこなってくれるので、当然速度は早くなります。</p>

<p>また、Commitを複数件単位でまとめてくれる機能も持っているので、ActiveRecordで同じ機能を
実装する場合に比べると、更に速度が早くなります。</p>

<p>一方でデメリットとして、ActiveRecord側に設定しているvalidationや便利機能が使えなくなるので、
そのデメリットを考慮しても速度を優先させたいような処理で限定して使うことをおすすめします！</p>

<h2>Gemのインストール</h2>

<p><code>Gemfile</code>に以下を追加して、コンソールで<code>bundle install</code>を実行してください。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Bulk Insert/</span><span class="no">Update</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;gem &#39;upsert&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>ActiveRecordでUpsertを使う場合</h2>

<p>Petモデルのキーが<code>name</code>、カラムが<code>name, breed</code>の場合
にUpsertする場合は次のように記述します。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;upsert/active_record_upsert&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Pet.upsert({name: &#39;Jerry&#39;}, {breed: &#39;beagle&#39;, updated_at: Time.now.iso8601, created_at: Time.now.iso8601})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>ActiveRecordで一括でUpsertを行う場合</h2>

<p>Petモデルのキーが<code>name</code>、カラムが<code>name, breed</code>の場合
に2件のデータを一括で、Upsertする場合は次のように記述します。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Bulk でinsert /</span> <span class="n">update</span><span class="err">を実行</span> <span class="p">(</span><span class="n">mass</span> <span class="n">upsert</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;self.connection_pool.with_connection do |c|</span>
</span><span class='line'><span class="sr">  Upsert.batch(c, table_name) do |upsert|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">upsert</span><span class="o">.</span><span class="n">row</span><span class="p">({</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Jerry&#39;</span><span class="p">},</span> <span class="p">{</span><span class="n">breed</span><span class="p">:</span> <span class="s1">&#39;beagle&#39;</span><span class="p">,</span> <span class="n">updated_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">iso8601</span><span class="p">,</span> <span class="n">created_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">iso8601</span><span class="p">})</span>
</span><span class='line'><span class="n">upsert</span><span class="o">.</span><span class="n">row</span><span class="p">({</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Pierre&#39;</span><span class="p">},</span> <span class="p">{</span><span class="n">breed</span><span class="p">:</span> <span class="s1">&#39;tabby&#39;</span><span class="p">,</span> <span class="n">updated_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">iso8601</span><span class="p">,</span> <span class="n">created_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">iso8601</span><span class="p">})</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>あとがき</h2>

<p>Ruby/ActiveRecordで大量のデータを登録するようなスクリプトを書くことは
必ずしも適していない。。。かもしれませんが、Rubyで複雑なデータを加工して
登録したいようなケースもあると思います。
ぜひ、そういった時の速度改善に使ってみてください！</p>

<h2>おまけ</h2>

<p>2009年の記事ですが、結構面白いのでオススメです！</p>

<p><strong><a href="https://www.coffeepowered.net/2009/01/23/mass-inserting-data-in-rails-without-killing-your-performance/">Mass inserting data in Rails without killing your performance</a></strong></p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[switch_point ActiveRecordにメソッドを追加・変更する部分を勉強してみた]]></title>
    <link href="http://morizyun.github.io/blog/switch-point-swithcing-database-connection-readonly-writable-rails-gem/"/>
    <updated>2015-01-02T17:45:00+09:00</updated>
    <id>http://morizyun.github.io/blog/switch-point-swithcing-database-connection-readonly-writable-rails-gem</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00P0UR1RU/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00P0UR1RU&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00P0UR1RU&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00P0UR1RU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
昨日DB関連の資料を調べていく中で興味があった『<strong><a href="https://github.com/eagletmt/switch_point">eagletmt/switch_point</a></strong>』がどんなふうに実装されているのかが、興味あって、ソースコードを読んでみました。特に興味があったのは、<code>ActiveRecord::Base</code>などにメソッドを追加したり、既存のメソッドに手を加える部分です。まだわかっていない部分も多いのでメモ書きレベルですが、一応せっかくなのでアウトプットしておきます！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>既存のActiveRecod::Baseにメソッドを生やす</h2>

<p>『<strong><a href="https://github.com/eagletmt/switch_point">eagletmt/switch_point - GitHub</a></strong>』の<code>switch_point/lib/switch_point.rb</code>で既存のActiveRecod::Baseにメソッドを生やす目的で次のようなコードが書かれていました。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/lazy_load_hooks&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;...(省略)...&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">ActiveRecord</span><span class="err">が読み込まれたら以下のコードを実行する</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;第一引数(active_record)がフックのキー&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">第二引数のブロックが、ブロックを実行するためのコンテキスト</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;ActiveSupport.on_load(:active_record) do</span>
</span><span class='line'><span class="sr">  require &#39;switch_point/mo</span><span class="n">del</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">  require &#39;</span><span class="n">switch_point</span><span class="o">/</span><span class="n">connection</span><span class="err">&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # SwitchPoint::ModelのメソッドをActiveRecord::Baseにinclude</span>
</span><span class='line'><span class="sr">  ActiveRecord::Base.send(:include, SwitchPoint::Model)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># class_evalで動的にクラス・メソッドを定義</span>
</span><span class='line'>  <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">ConnectionAdapters</span><span class="o">::</span><span class="no">AbstractAdapter</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;include SwitchPoint::Connection</span>
</span><span class='line'>
</span><span class='line'><span class="sr"># insert, update, deleteメソッドのメソッドを上書き</span>
</span><span class='line'><span class="sr"># 中ではwritableなDBにつなぎに行っているかのチェックとクエリー・キャッシュをクリアしてからメソッドを実行</span>
</span><span class='line'><span class="sr">SwitchPoint::Connection::DESTRUCTIVE_METHODS.each do |method_name|</span>
</span><span class='line'><span class="sr">  alias_method_chain method_name, :switch_point</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>遅延読み込みフック lazy_load_hooks#on_load について</h2>

<p><code>on_load</code>は、ActiveSupportのLazyLoadの機能の一つで、ライブラリの読み込み後に実行したいコードを登録するための機能だそうです。サンプルとしてはこんなかんじです。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/lazy_load_hooks&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;run_load_hooksが実行されていないので呼ばれない&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">ActiveSupport</span><span class="o">.</span><span class="n">on_load</span> <span class="ss">:fuga</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;start 1st on load&#39;</span>
</span><span class='line'>  <span class="n">fuga</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;end 1st on load&#39;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Fuga</span>
</span><span class='line'><span class="sr">  def self.fuga&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="s1">&#39;fugafuga&#39;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;puts &#39;before run_load_hooks&#39;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">run_load_hooks</span><span class="err">を実行すると、</span><span class="mi">4</span><span class="err">行目の</span> <span class="no">ActiveSupport</span><span class="o">.</span><span class="n">on_load</span> <span class="err">が呼ばれる</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;ActiveSupport.run_load_hooks :fuga, Fuga</span>
</span><span class='line'><span class="sr">puts &#39;after run_load_hooks&#39;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">run_load_hooks</span> <span class="err">が実行されているのですぐに呼ばれる</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;ActiveSupport.on_load :fuga do</span>
</span><span class='line'><span class="sr">  puts &#39;start 2st on load&#39;</span>
</span><span class='line'><span class="sr">  fuga</span>
</span><span class='line'><span class="sr">  puts &#39;end 2st on load&#39;</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">実行結果</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;before run_load_hooks&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">start</span> <span class="mi">1</span><span class="n">st</span> <span class="n">on</span> <span class="nb">load</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;fugafuga&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">end</span> <span class="mi">1</span><span class="n">st</span> <span class="n">on</span> <span class="nb">load</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;after run_load_hooks&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">start</span> <span class="mi">2</span><span class="n">st</span> <span class="n">on</span> <span class="nb">load</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;fugafuga&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="k">end</span> <span class="mi">2</span><span class="n">st</span> <span class="n">on</span> <span class="nb">load</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>コードにちょこちょこ書いていますが、要はActiveSupport.run_load_hooksが実行されないと呼ばれないし、
ActiveSupport.run_load_hooksが呼ばれれば一緒に実行してくれるということっぽいです。</p>

<p>ここいらは、<strong><a href="">@eiel</a></strong>さんのRails Docの記事『<strong><a href="http://railsdoc.eiel.info/active_support/lazy_load_hooks/">RailsDoc - Lazy Load Hooks</a></strong>』を参考にさせて頂きました。最近Rails Docさんにはお世話になりっぱなしです！</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>alias_method_chain について</h2>

<p><code>alias_method_chain</code>は、既存のメソッドを置き換えをしてくれます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;active_supportのメソッドなのでrequireが必要&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">require</span> <span class="s1">&#39;active_support/all&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;module LogHelper&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">log</span><span class="p">(</span><span class="n">message</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts message</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">log_with_timestamp</span><span class="p">(</span><span class="n">message</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;log_without_timestamp(&quot;[</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="sr">] </span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="sr">&quot;)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="c1"># 以下と同義</span>
</span><span class='line'>  <span class="c1"># alias_method :log, :log_with_timestamp</span>
</span><span class='line'>  <span class="c1"># alias_method :log_without_timestamp, :log</span>
</span><span class='line'>  <span class="n">alias_method_chain</span> <span class="ss">:log</span><span class="p">,</span> <span class="ss">:timestamp</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;include LogHelper</span>
</span><span class='line'><span class="sr">log(&#39;Hello&#39;) #=&gt; [2015-01-02 11:45:01 +0900] Hello</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>このメソッドには次のルールがあるそうです。</p>

<pre>
 (A) 前提
   alias_method_chain :xxx, :yyy

 (B) ルール
   (1) 上書きして呼び出すメソッドは、 xxx_with_yyy とする
   (2) 元となるメソッドは、 xxx_without_yyy とする
</pre>


<p>ちなみにActiveSupport(v4.2.0)の<code>alias_method_chain</code>のソースコードはこんなかんじです。
(わかりやすい＾＾)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">alias_method_chain</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">feature</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# Strip out punctuation on predicates, bang or writer methods since</span>
</span><span class='line'><span class="sr"># e.g. target?_without_feature is not a valid method name.</span>
</span><span class='line'><span class="sr">aliased_target, punctuation = target.to_s.sub(/</span><span class="p">(</span><span class="o">[</span><span class="sc">?!</span><span class="o">=]</span><span class="p">)</span><span class="vg">$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">),</span> <span class="vg">$1</span>
</span><span class='line'><span class="k">yield</span><span class="p">(</span><span class="n">aliased_target</span><span class="p">,</span> <span class="n">punctuation</span><span class="p">)</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>
</span><span class='line'><span class="n">with_method</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">aliased_target</span><span class="si">}</span><span class="s2">_with_</span><span class="si">#{</span><span class="n">feature</span><span class="si">}#{</span><span class="n">punctuation</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">without_method</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">aliased_target</span><span class="si">}</span><span class="s2">_without_</span><span class="si">#{</span><span class="n">feature</span><span class="si">}#{</span><span class="n">punctuation</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">alias_method</span> <span class="n">without_method</span><span class="p">,</span> <span class="n">target</span>
</span><span class='line'><span class="n">alias_method</span> <span class="n">target</span><span class="p">,</span> <span class="n">with_method</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span>
</span><span class='line'><span class="k">when</span> <span class="nb">public_method_defined?</span><span class="p">(</span><span class="n">without_method</span><span class="p">)</span>
</span><span class='line'>  <span class="kp">public</span> <span class="n">target</span>
</span><span class='line'><span class="k">when</span> <span class="nb">protected_method_defined?</span><span class="p">(</span><span class="n">without_method</span><span class="p">)</span>
</span><span class='line'>  <span class="kp">protected</span> <span class="n">target</span>
</span><span class='line'><span class="k">when</span> <span class="nb">private_method_defined?</span><span class="p">(</span><span class="n">without_method</span><span class="p">)</span>
</span><span class='line'>  <span class="kp">private</span> <span class="n">target</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>シナジーマーケティングさんの、<strong><a href="http://www.techscore.com/blog/2013/02/27/rails-alias_method_chain-%E6%97%A2%E5%AD%98%E3%81%AE%E5%87%A6%E7%90%86%E3%82%92%E4%BF%AE%E6%AD%A3%E3%81%99%E3%82%8B%E5%B8%B8%E5%A5%97%E6%89%8B%E6%AE%B5/">» Rails: alias_method_chain: 既存の処理を修正する常套手段 TECHSCORE BLOG</a></strong>
がすごくわかりやすい説明を書いて頂けていたので参考にさせて頂きました。有難うございます！</p>

<h2>module#prepend について</h2>

<p><code>module#prepend</code>自体はswitch_pointには出てきませんが、調べていく中でRuby 2.0で導入されたメソッドの<code>module#prepend</code>は<code>alias_method_chain</code>を置き換える事ができるのを知りました。使い方としてはこんな感じ。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">LoggingWithTimestamp</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def log(message)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1"># 呼び出し元のメソッドを呼び出す</span>
</span><span class='line'><span class="k">super</span><span class="p">(</span><span class="s2">&quot;[</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="si">}</span><span class="s2">] </span><span class="si">#{</span><span class="n">message</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Logging</span>
</span><span class='line'>  <span class="c1"># LoggingWithTimestampのlogが、Loggingのlogメソッドよりも優先して呼ばれる</span>
</span><span class='line'>  <span class="n">prepend</span> <span class="no">LoggingWithTimestamp</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def log(message)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="n">message</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Logging.new.log(&#39;Hello&#39;) #=&gt; [2015-01-02 12:23:15 +0900] Hello</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><code>include</code>と<code>prepend</code>との使い分けは次の通り。</p>

<pre>
* include: 新しい機能を追加するために使う
  * モジュール側のメソッドはクラスのメソッドを上書きできない
  * クラス側のメソッドはモジュールのメソッドを上書きできる

* prepend: 既存の機能の変更をするために使う
  * モジュール側のメソッドはクラス側のメソッドを上書きでる
  * クラス側のメソッドはモジュール側のメソッドを上書きできない
</pre>


<p>こちらもシナジーマーケティングさんのブログ記事『<strong><a href="http://www.techscore.com/blog/2013/01/22/ruby2-0%E3%81%AEmodule-prepend%E3%81%AF%E5%A6%82%E4%BD%95%E3%81%AB%E3%81%97%E3%81%A6alias_method_chain%E3%82%92%E6%92%B2%E6%BB%85%E3%81%99%E3%82%8B%E3%81%AE%E3%81%8B%EF%BC%81%EF%BC%9F/">» Ruby2.0のModule#prependは如何にしてalias_method_chainを撲滅するのか！？</a></strong>』が図解も含めてすごくわかりやすい解説をしてくれています！</p>

<h2>あとがき</h2>

<p>今までなんの気なしに使ってきたライブラリですが、よく読んでみると色々と勉強になる部分が多くあります。
自分がライブラリ書くときに使えそうなTipsがあってすごい勉強になります！今度はテストとかも読んでみるつもりです！</p>

<h2>Special Thanks</h2>

<p><a href="http://qiita.com/seanchas_t/items/ea47a1eb0969afcac2af">Rubyのdefine_method、class_evalで動的に定義されたメソッドの呼出コストを調べてみた - Qiita</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[http_status_checker URLのステータスを取得するgemを作りました]]></title>
    <link href="http://morizyun.github.io/blog/http-status-checker-ruby-gem-http-header/"/>
    <updated>2014-12-30T18:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/http-status-checker-ruby-gem-http-header</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4774169552/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4774169552&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4774169552&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4774169552" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
『<strong><a href="http://workshop.morizyun.com/">俺の勉カレ</a></strong>』で収集中の勉強会のリンクは、開催を取りやめたなどの理由で404になる場合がありました。そのため、定期的にhttp statusをチェックする仕組みを作りたくて、『<strong><a href="https://github.com/morizyun/http_status_checker">morizyun/http_status_checker</a></strong>』
というRubyGemを作りました！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>特徴</h2>

<pre>
* 簡単に複数のURLのHTTPステータスをチェックできる
* ホスト単位にスレッドを生成するので早い
* 一つのホストに負荷をかけ過ぎないようにinervalの待ち時間を設定できる
* リダイレクトやエラーをURL単位で取得できる
</pre>


<h2>インストール手順</h2>

<p>いつもどおり<code>Gemfile</code>に以下を追加。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;http status checker&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;gem <span class="s1">&#39;http_status_checker&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>そして以下のコマンドを実行してインストールしてください。(pathは適宜変更)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install --path vendor/bundle --jobs<span class="o">=</span>4
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>もしくはコマンドライン上で以下のコマンドを実行。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install http_status_checker
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>コマンドラインから使い方</h2>

<p>Gemをインストールしたら、<code>http_status_checker</code>をコマンドラインから呼び出す事ができます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">http_status_checker</span> <span class="o">-</span><span class="n">u</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="n">morizyun</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">io</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt; url: http:/</span><span class="o">/</span><span class="n">morizyun</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">io</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt; response: {:code=&gt;&quot;200&quot;, :is_alive=&gt;true, :redirect_url=&gt;nil}&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Rubyプログラム内での使い方</h2>

<p>Rubyプログラムから呼び出す事もできます。引数の<code>interval_sec</code>は任意なので省略可能です。
省略した場合のデフォルトのインターバルは1秒です。(相手サイトに大量にアクセスしないように)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>require <span class="s1">&#39;http_status_checker&#39;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;urls <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;http://morizyun.github.io&#39;</span>, <span class="s1">&#39;http://www.yahoo.co.jp&#39;</span><span class="o">]</span>
</span><span class='line'><span class="nv">interval_sec</span> <span class="o">=</span> 1
</span><span class='line'>HttpStatusChecker.check urls, interval_sec&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; <span class="o">[{</span><span class="s2">&quot;http://morizyun.github.io&quot;</span><span class="o">=</span>&gt;<span class="o">{</span>:code<span class="o">=</span>&gt;<span class="s2">&quot;200&quot;</span>, :is_alive<span class="o">=</span>&gt;true, :redirect_url<span class="o">=</span>&gt;nil<span class="o">}}</span>,&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; <span class="o">{</span><span class="s2">&quot;http://www.yahoo.co.jp&quot;</span><span class="o">=</span>&gt;<span class="o">{</span>:code<span class="o">=</span>&gt;<span class="s2">&quot;200&quot;</span>, :is_alive<span class="o">=</span>&gt;true, :redirect_url<span class="o">=</span>&gt;nil<span class="o">}}]</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Issue/Pull Request 大歓迎</h2>

<p>定期的にURLの死活チェックをしたり、ユーザーから投稿されたURLチェックなどに使えると思います。
もしお気づきの点があれば、いつでもIssue / Pull Request お待ちしています＾＾</p>

<p><strong><a href="https://github.com/morizyun/http_status_checker">morizyun/http_status_checker</a></strong></p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ソースコード・リーディングしよう！[GemJam][ActiveSupport]]]></title>
    <link href="http://morizyun.github.io/blog/library-source-code-reading-acctive-support/"/>
    <updated>2014-12-28T12:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/library-source-code-reading-acctive-support</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00DT4DY0M/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00DT4DY0M&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00DT4DY0M&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00DT4DY0M" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
<strong><a href="https://twitter.com/h5y1m141">@h5y1m141</a></strong>さんに誘って頂いて、
<strong><a href="https://twitter.com/hitomi_tw">@hitomi_tw</a></strong>さんや
<strong><a href="http://qiita.com/shiro615">shiro615</a></strong>さんと一緒に、RubyGemsのソースコードリーディング勉強会『<strong>GemJam</strong>』を行いました。</p>

<p>今回は最近仕事でソースコードを読む時間が増えてきて、苦労していたのでソースコード・リーディングのモチベーションアップやコツを調べつつ、いつもRailsでお世話になっていた『<strong><a href="https://github.com/rails/rails/tree/master/activesupport">ActiveSupport</a></strong>』
のソースコードリーディングに挑戦してみました。</p>

<p><strong>(12/28 12:10) 勉強会のアウトプットを更新しました。全員アウトプットしたのは素晴らしいです</strong></p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- responsive -->
<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-4186413323075068" data-ad-slot="2106406992" data-ad-format="auto"></ins>
<script>
  (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>プログラムのモチベーション</h2>

<p>これは経験談からくる話なので、これが正解ということでないッス。どちらかと言うと、今までエンジニアとして経験してきた中で、僕個人はこう思っていますという観点で書きました！</p>

<h3>プログラミングは継続する事が一番大切</h3>

<p><strong><a href="http://gigazine.net/news/20130911-180-websites/">プログラミング経験ゼロだが180日で180個のウェブサイトを作るプロジェクトがゴールまであとわずかに</a></strong></p>

<p>プログラミング経験0のデザイナさんが、毎日1つサイトを作っていったお話です。最初はテキストとリンクが並ぶだけのサイトでしたが、少しずつゲームやチャットなどが作れるようになっていきます。</p>

<p>今知っている知識だけで、作れるWebサイトを作っていく。そして、自分の知っている2つの知識を組み合わせたり、１つずつやりたいコトをGoogleに教えてもらうくらいが、挫折せずに続けられると思っています。</p>

<p>個人的に学生さんらにプログラムを教えた事がありますが、プログラムが出来るようになるために一番大切なことは『<strong>継続</strong>』することだと常々実感させられます。</p>

<h3>じゃあ、なぜソースコードを読むのか？</h3>

<p>僕は1人の力には限界があると思います。たった一人で本当に価値のあるソフトウェアを作るのは本当に難しいことだと思います。だから、価値のあるソフトウェアを作っていくためには、他のエンジニアと一緒にプログラムを作り込む必要があると考えています。</p>

<p>そのためには、他の人のソースコードの意味を理解し、他の人にわかりやすいプログラムを書く必要があります。言い換えるとソースコードを読むこと、読みやすいソースコードを知ることが重要だと思います。</p>

<h3>オススメのドキュメント</h3>

<p><strong><a href="http://www.itmedia.co.jp/enterprise/articles/0712/26/news015.html">まつもとゆきひろのハッカーズライフ：第10回 ソースを読もう - ITmedia エンタープライズ</a></strong></p>

<p>Rubyの製作者、まつもとゆきひろさんが2007年に書かれていた記事を見つけました。まつもとさんのソースコードを読む際の動機を垣間見える面白い記事でしたので、良ければぜひご覧になってみてください。</p>

<h2>ソースコードの読み方</h2>

<p>今回『<strong><a href="https://github.com/rails/rails/tree/master/activesupport">ActiveSupport</a></strong>』
のソースコード・リーディングをしてみたので、その時の僕の手順を紹介します。(もしもっといい方法をご存知の方がいれば是非コメントお願いします)</p>

<h4>(1) コードを効率よく読むためのツールを準備する</h4>

<p>まず、オススメのエディタは『<strong><a href="https://www.jetbrains.com/ruby/">RubyMine(などのJetBrains製のエディタ)</a></strong>』です。理由はメソッドのドリルダウンがデフォルトの設定で簡単に行えるからです。1ヶ月無料なのでよかったら是非試してみてください！</p>

<p>次にプロジェクトフォルダ直下で、Gemfile作成して以下の様に追加。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;debug用&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">gem</span> <span class="s1">&#39;pry&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;stackを表示&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">gem</span> <span class="s1">&#39;pry-stack_explorer&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;各種便利ユーティリティ&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">gem</span> <span class="s1">&#39;activesupport&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>以下のコマンドを実行して、Gemをインストール。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Gemを追加するためのディレクトリを作成&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;mkdir vendor&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;Gemをディレクトリに保存&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;bundle install --path vendor/bundle --jobs<span class="o">=</span>4
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>(2) 実際に動かしてみる</h4>

<p>例えば、<code>sample.rb</code>を作成して以下のようにコードを記入。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;pry&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;pry-byebug&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/all&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;puts 2.days.ago</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>これを実行するとactive supportの機能である2日前の日付を取得する事ができます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bunlde <span class="nb">exec </span>ruby sample.rb&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; 2014-12-25 14:09:42 +0900&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>(3) デバッガの準備</h4>

<p>次に今回はデバッカを書いて実際に2.daysのメソッドにどんな風に動いているのかを見れるようにします。</p>

<p>まずは、<code>vendor/bundle/ruby/2.1.0/gems/activesupport-4.2.0/lib/active_support/core_ext/numeric/time.rb</code>
を開いて、daysメソッドに以下を追加。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">days</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;binding.pry # &amp;lt;= この行を追加</span>
</span><span class='line'><span class="sr">ActiveSupport::Duration.new(self * 24.hours, [[:days, self]])</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>そしてもう一度以下のコマンドを実行すると今度は、<code>binding.pry</code>を書いた地点で停止します。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bunlde <span class="nb">exec </span>ruby sample.rb&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;デバッカが表示&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; From:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt;/active_support_reading/vendor/bundle/ruby/2.1.0/gems/activesupport-4.2.0/lib/active_support/core_ext/numeric/time.rb @ line 50 Numeric#days:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt;&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt;     49: def days&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt;  <span class="o">=</span>&gt; 50:   binding.pry&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt;     51:   ActiveSupport::Duration.new<span class="o">(</span>self * 24.hours, <span class="o">[[</span>:days, self<span class="o">]])</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt;     52: end&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;呼び出しの関係を取得&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;2.1.4 <span class="o">(</span>2<span class="o">)</span>:0 &gt; show-stack&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; Showing all accessible frames in stack <span class="o">(</span>2 in total<span class="o">)</span>:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; --&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; <span class="o">=</span>&gt; <span class="c">#0  days &amp;lt;Numeric#days()&gt;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt;    <span class="c">#1 [main]    &lt;main&gt;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;p&gt;2.1.4 <span class="o">(</span>main<span class="o">)</span>:0 &gt; show-source Benchmark.ms&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt;&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; From:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt;/active_support_reading/vendor/bundle/ruby/2.1.0/gems/activesupport-4.2.0/lib/active_support/core_ext/benchmark.rb @ line 11:&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; Owner: <span class="c">#&amp;lt;Class:Benchmark&gt;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; Visibility: public&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; Number of lines: 3&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt;&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; def ms&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt;   1000 * realtime <span class="o">{</span> yield <span class="o">}</span>&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; end&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;ここでstepを実行すると処理の中身に移動、nextで次の処理を見ることができる&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>あとはちょっと変更して見て動かしたりしてみてください。</p>

<h3>どんなふうにソースコードを読み進むべき？</h3>

<p>手始めにどんなふうにソースコードを読んでみたらいいかをいくつかのサイトを調べながら考えてみました。
アイデアレベルですが、よかったらぜひソースコード・リーディング試してみてください！</p>

<pre>
* 普段関わっていたり、仕事に役立つコードを読んだり、コメントを書く
* 興味のある分野や機能を持ったソースコードを読む
  * 全体を読む必要はない。面白そうなところをつまみ食いして、先人の知恵を学べばいい
* ちょっと変更して動作させてみる
* バグがないか探してみる
</pre>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- responsive -->
<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-4186413323075068" data-ad-slot="2106406992" data-ad-format="auto"></ins>
<script>
  (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>ActiveSupportの面白い機能</h2>

<p>『<strong><a href="https://github.com/rails/rails/tree/master/activesupport">ActiveSupport</a></strong>』の
便利機能を調べつつ、その部分のソースコードを読んでみました。今回知らなくって、後で使えそうだった機能を中心に紹介します！</p>

<h3>Benchmark.ms</h3>

<p><code>Benchmark.ms</code>はブロックを渡すとブロックを評価して実行時間を計測します。<br/>
(Benchmark.realtimeのラッパーです)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/all&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;puts Benchmark.ms {  sleep 1 } # =&gt; 1000.234</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>cattr_accessor</h3>

<p><code>attr_accessor</code>はインスタンス変数へのアクセッサを提供するメソッド。<br/>
<code>cattr_accessor</code>は、クラス変数へのアクセッサを提供するメソッド。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/all&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Sample</span>
</span><span class='line'><span class="sr">  cattr_accessor :hoge</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Sample</span><span class="o">.</span><span class="n">hoge</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">Sample</span><span class="o">.</span><span class="n">hoge</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>descendants</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/all&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Parent</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">class Child &amp;lt; Parent</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">class GrandChild &amp;lt; Child</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">継承してくれている先を出す</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;puts Parent.descendants.to_s #=&gt; [Child, GrandChild]&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="err">継承元を出すメソッド</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;puts GrandChild.ancestors.to_s&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">[</span><span class="no">GrandChild</span><span class="p">,</span> <span class="no">Child</span><span class="p">,</span> <span class="no">Parent</span><span class="p">,</span> <span class="no">Object</span><span class="p">,</span> <span class="no">JSON</span><span class="o">::</span><span class="no">Ext</span><span class="o">::</span><span class="no">Generator</span><span class="o">::</span><span class="no">GeneratorMethods</span><span class="o">::</span><span class="no">Object</span><span class="p">,</span> <span class="no">PP</span><span class="o">::</span><span class="no">ObjectMixin</span><span class="p">,</span> <span class="no">Kernel</span><span class="p">,</span> <span class="no">BasicObject</span><span class="o">]&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Hash.except</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/all&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;ハッシュから特定のキーを削除&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span> <span class="n">hoge</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="n">huga</span><span class="p">:</span> <span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="nb">puts</span> <span class="nb">hash</span><span class="o">.</span><span class="n">except</span><span class="p">(</span><span class="ss">:hoge</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span> <span class="c1"># =&gt; {:huga =&gt; 2}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Time#change</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/all&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;その日の4時0分0秒を取得&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">change</span><span class="p">(</span><span class="n">hour</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="n">minute</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="n">second</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">#=&gt; 2014-12-27 04:00:00 +0900</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ここの記事が大変参考になりました！</p>

<p><strong><a href="http://railsdoc.eiel.info/hiroshimarb/32/">RailsDoc - 広島Ruby勉強 #032 - Rails のソースコード読んだので面白そうなところを紹介する -- ActiveSupport CoreExt編 その1</a></strong></p>

<h2>pry詳解</h2>

<p>今回ソースコードを読んでいて、改めてpryの素晴らしさに感動しました。ということでpryに関する記事を見つけたので紹介です。</p>

<h3>pryの使い方解説</h3>

<ul>
<li><a href="http://qiita.com/muran001/items/e88819681f5325fc44e0">Pryコマンドまとめ - Qiita</a></li>
<li><a href="http://qiita.com/tbpgr/items/a1bbe43b772e35d93987">Ruby の 定番対話ツール pry 徹底攻略 | Normal Input #pry #ruby - Qiita</a></li>
<li><a href="http://qiita.com/tbpgr/items/12a60f2f9e3de61517b5">Ruby の 定番対話ツール pry 徹底攻略 #pry #ruby - Qiita</a></li>
<li><a href="http://qiita.com/k0kubun/items/b118e9ccaef8707c4d9f">Ruby - 今更聞けないpryの使い方と便利プラグイン集 - Qiita</a></li>
<li><a href="http://qiita.com/joker1007/items/42f00b12c65bbec0e50a">pry-docでカジュアルにRubyのソースコードを読む - Qiita</a></li>
<li><a href="http://morizyun.github.io/blog/pry-command-rails-ruby/">Pryが真の力を発揮してくれる19個のコマンドとコマンドの自作方法 - 酒と泪とRubyとRailsと</a></li>
</ul>


<h3>pryの動作原理の解説</h3>

<ul>
<li><a href="http://qiita.com/yui-knk/items/63a511d243323bec6fb8">“binding.pry”って実際のところは何なのだろう - Qiita</a></li>
</ul>


<h2>GemJam勉強会アウトプット</h2>

<h3>GemJamという勉強会を行いました</h3>

<p><strong><a href="https://twitter.com/h5y1m141">@h5y1m141</a></strong>さんが、GemJamを作った背景や、今回調べたことについてブログにまとめて頂けました。4人位のコードリーディングや読書会的な勉強会って結構面白いと実感しました。あと、みんなが終了後1-2日でちゃんとアウトプットしているのはほんとうに素晴らしいです！</p>

<p><strong><a href="http://h5y1m141.hatenablog.com/entry/2014/12/28/111420">GemJamという勉強会を行いました - TitaniumMobile勉強記</a></strong></p>

<h3>GitHubでMergeされたらBacklogもRailsで自動更新する</h3>

<p><strong><a href="https://twitter.com/hitomi_tw">@hitomi_tw</a></strong>さんがActiveSupportのconcernを使いつつ、Backlog APIへのアクセスメソッドを調べて発表してくれました。その際のソースコードをQiitaに公開して頂けたので紹介です！</p>

<p><strong><a href="http://qiita.com/hitomi_/items/12c16d58855fb3536e96">GitHubでMergeされたらBacklogもRailsで自動更新する - Qiita</a></strong></p>

<h3>配列からハッシュを作成/ActiveSupportでHashの一部だけ取り出す</h3>

<p>まだ、プログラムの実務経験はないそうですが、短い時間でアウトプットや発表なんかをしっかりしてくれて、自分の初心者の頃と比べると雲泥の差で素晴らしいと感じました。ぜひプログラムを楽しんでください＾＾</p>

<p><strong><a href="http://qiita.com/shiro615">shiro615 - Qiita</a></strong></p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- responsive -->
<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-4186413323075068" data-ad-slot="2106406992" data-ad-format="auto"></ins>
<script>
  (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Special Thanks</h2>

<ul>
<li><a href="http://i.loveruby.net/ja/misc/readingcode.html">ソースコードを読むための技術</a></li>
<li><a href="http://yasuho.hatenablog.com/entry/20060509/p1">ソースコードを効率よく読むには(1) - プログラマyasuhoの隠れ家</a></li>
<li><a href="http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q11110745181">プログラムのソースコードの読み方のコツ最近他人の書いたプログラム... - Yahoo!知恵袋</a></li>
<li><a href="http://www.atmarkit.co.jp/ait/articles/0804/09/news150.html">小山博史のJavaを楽しむ（10）：【新人なるプログラマーへ】ソースコードを読みましょう (1/2) - ＠IT</a></li>
</ul>


<h2>変更来歴</h2>

<p><strong>(12/28 12:10) 勉強会のアウトプットを更新</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[thor Rubyで簡単にshellコマンドが作れる！]]></title>
    <link href="http://morizyun.github.io/blog/thor-shell-command-easy-ruby-gem/"/>
    <updated>2014-12-23T21:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/thor-shell-command-easy-ruby-gem</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/477416366X/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=477416366X&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=477416366X&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=477416366X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
この前作ったFacebookやTwitter、はてなブックマークのカウントを収集してくれるGem『<strong><a href="https://github.com/morizyun/scouter">scouter</a></strong>』のコマンドを作った際にお世話になった『<strong><a href="https://github.com/erikhuda/thor">erikhuda/thor</a></strong>』が思っていた以上に高機能だったので忘れないようにメモ記事です！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>インストール手順</h2>

<p>いつもどおり<code>Gemfile</code>に以下を追加して、<code>bundle install</code>を実行してください。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;command-line interfaces&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;gem <span class="s1">&#39;thor&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>もしくはコマンドライン上で以下のコマンドを実行。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install thor
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>基本的な使い方</h2>

<p><code>testest</code>を作成して以下コードを記述します。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;!/us</span><span class="n">r</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">ruby</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;coding: utf-8&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;thor&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Command &amp;lt; Thor</span>
</span><span class='line'><span class="sr">  default_command :example&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">desc</span> <span class="s1">&#39;example&#39;</span><span class="p">,</span> <span class="s1">&#39;an example task&#39;</span>
</span><span class='line'>  <span class="n">option</span> <span class="ss">:file</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="ss">:string</span><span class="p">,</span> <span class="n">aliases</span><span class="p">:</span> <span class="s1">&#39;-f&#39;</span><span class="p">,</span> <span class="n">desc</span><span class="p">:</span> <span class="s1">&#39;Delete the file after parsing it&#39;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">example</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &quot;executing! argument is </span><span class="si">#{</span><span class="n">options</span><span class="o">[</span><span class="ss">:file</span><span class="o">]</span><span class="si">}</span><span class="sr">!&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Command</span><span class="o">.</span><span class="n">start</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>早速作成したコマンドを実行してみます！</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;初回のみ実行権限を付与&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;chmod a+x testest&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;./testest -f sample.file&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; executing! argument is sample.file!&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>引数とオプションの追加</h2>

<p>先ほどのコマンドに引数と、オプションを足してみます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;!/us</span><span class="n">r</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">env</span> <span class="n">ruby</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;coding: utf-8&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;thor&#39;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Command &amp;lt; Thor</span>
</span><span class='line'><span class="sr">  default_command :example&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">desc</span> <span class="s1">&#39;example&#39;</span><span class="p">,</span> <span class="s1">&#39;an example task&#39;</span>
</span><span class='line'>  <span class="n">option</span> <span class="ss">:file</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="ss">:string</span><span class="p">,</span> <span class="n">aliases</span><span class="p">:</span> <span class="s1">&#39;-f&#39;</span><span class="p">,</span> <span class="n">desc</span><span class="p">:</span> <span class="s1">&#39;Delete the file after parsing it&#39;</span>
</span><span class='line'>  <span class="n">method_option</span> <span class="ss">:delete</span><span class="p">,</span> <span class="n">aliases</span><span class="p">:</span> <span class="s1">&#39;-d&#39;</span><span class="p">,</span> <span class="n">desc</span><span class="p">:</span> <span class="s1">&#39;Delete the file after parsing it&#39;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">example</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;if options[:delete]</span>
</span><span class='line'><span class="sr">  puts &quot;executing! argument is </span><span class="si">#{</span><span class="n">options</span><span class="o">[</span><span class="ss">:file</span><span class="o">]</span><span class="si">}</span><span class="sr"> and delete option is true!&quot;</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  puts &quot;executing! argument is </span><span class="si">#{</span><span class="n">options</span><span class="o">[</span><span class="ss">:file</span><span class="o">]</span><span class="si">}</span><span class="sr"> and delete option is false!&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Command</span><span class="o">.</span><span class="n">start</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>では先ほど作ったコマンドを実行してみます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;-d<span class="o">(</span>--delete<span class="o">)</span> オプションを付けない場合&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;./testest -f <span class="s1">&#39;sample.file&#39;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; executing! argument is sample.file and delete option is <span class="nb">false</span>!&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;-d<span class="o">(</span>--delete<span class="o">)</span> オプションを付ける場合&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;./testest -f <span class="s1">&#39;sample.file&#39;</span> -d&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;<span class="o">=</span>&gt; executing! argument is sample.file and delete option is <span class="nb">true</span>!&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Railsの環境情報を取得</h2>

<p>Railsの環境情報を使ったコマンドも簡単に作成できます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Example</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Thor</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Thor</span><span class="o">::</span><span class="no">Actions</span>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;init_example&quot;</span><span class="p">,</span> <span class="s2">&quot; you can write some description&quot;</span>
</span><span class='line'>  <span class="n">method_options</span> <span class="ss">:force</span> <span class="o">=&gt;</span> <span class="ss">:boolean</span><span class="p">,</span> <span class="ss">:aliases</span> <span class="o">=&gt;</span> <span class="s2">&quot;-f&quot;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">init_example</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;# Railsの環境情報を読み込み</span>
</span><span class='line'><span class="sr">require &#39;./</span><span class="n">config</span><span class="o">/</span><span class="n">environment</span><span class="err">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">options</span><span class="o">[</span><span class="ss">:force</span><span class="o">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">yes?</span><span class="p">(</span><span class="s2">&quot;WARN: Are u sure ?&quot;</span><span class="p">,</span><span class="ss">:yellow</span><span class="p">)</span>
</span><span class='line'>    <span class="n">delete_sql</span> <span class="o">=</span> <span class="s2">&quot;truncate examples&quot;</span>
</span><span class='line'>    <span class="n">say</span> <span class="s2">&quot;delete all datas from examples ... &quot;</span><span class="p">,</span> <span class="ss">:red</span>
</span><span class='line'>    <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">delete_sql</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">say</span> <span class="s2">&quot;Cancel!&quot;</span><span class="p">,</span> <span class="ss">:red</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#TODO</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Namespaceを付け足す</h2>

<p>thorを使いこなす過程でNamespaceが欲しくなるかもです。そんな場合はこちら。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>module Sinatra
</span><span class='line'>  class App &amp;lt; Thor&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;namespace :myapp
</span><span class='line'>def install
</span><span class='line'>  <span class="c"># task code</span>
</span><span class='line'>end
</span><span class='line'><span class="c"># other tasks</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ちなみに、実行コマンドは以下の通りです。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>thor myapp:install
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Thor GitHub Wiki</h2>

<p>ThorのGitHubのWikiはこちら！</p>

<p><strong><a href="https://github.com/erikhuda/thor/wiki">Home erikhuda/thor Wiki - GitHub</a></strong></p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Special Thanks</h2>

<p><strong><a href="http://qiita.com/succi0303/items/32560103190436c9435b">Ruby - Thorの使い方まとめ - Qiita</a></strong></p>

<p><strong><a href="http://qiita.com/rosylilly/items/d7f9667f3998cfc420d1">Ruby で作る、簡単 CLI ツールのススメ - Qiita</a></strong></p>

<p><strong><a href="http://hibariya.github.io/entries/20111025/a0.html">Thorで簡単にコマンドラインアプリをつくる - Joy Luck Crab</a></strong></p>
]]></content>
  </entry>
  
</feed>
