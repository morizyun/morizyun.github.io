<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-01-24T19:42:57+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dokku プライベートなherokuを作ってRailsアプリをデプロイ[DegitalOclean]]]></title>
    <link href="http://morizyun.github.io/blog/dokku-postgresql-rails-degitalocean/"/>
    <updated>2016-01-24T19:30:00+09:00</updated>
    <id>http://morizyun.github.io/blog/dokku-postgresql-rails-degitalocean</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00C2ONQIU/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00C2ONQIU&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00C2ONQIU&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00C2ONQIU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
herokuライクなプライベートなPaaSを作るためのOSS『<strong><a href="https://github.com/dokku/dokku">dokku/dokku - GitHub</a></strong>』の紹介です。
このDokkuの環境は、「<strong><a href="https://www.digitalocean.com/?refcode=0da417edaeee">DegitalOclean</a></strong>」だと画面から数クリックで作成できるので、
今回は、DegitalOcleanとセットで手順を紹介します。</p>

<p>Dukkuを使うメリットは次の通りです。</p>

<ul>
<li>Heroku ライクにgitにpushしたら、BuildPack的なものを使ってRailsやNode.js, Pythonなどのアプリを展開できる</li>
<li>Dokkuは、PosgreSQLやRedis、ElasticSearchなどのプラグインを数コマンドで使える</li>
</ul>


<p>まだ簡単なアプリをBuildしただけですが、特にハマることもなく安定して使えています！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Dokkuを使うモチベーション</h2>

<p>今回Dokkuを使おうと思ったモチベーションはこちら。</p>

<pre>
- 趣味アプリでは、できるだけアプリだけに集中したい
- PosgreSQLやRedis、ElasticSearchなどのプラグインを数コマンドで使えるようになる
- Herokuの無料版の制約を気にせずにアプリ開発したい
  - 1時間以上アクセスしないとスリープになる
  - 6時間/1日はスリープ状態にしないといけない
  - 一定時間以上連続するプロセスがkillされる(はず)
- VPSやクラウドだとミドルウェアの環境構築や、デプロイのセッティングに時間がかかる
</pre>


<p>Herokuはただ乗りフリーライダーの理論ですので、基本ごめんなさいですm(<em> </em>)m
一方で個人の趣味開発は、限られた時間との勝負なのでより効率的な開発手法を模索していて今回
『<strong><a href="https://github.com/dokku/dokku">dokku/dokku - GitHub</a></strong>』を使った方法をトライすることにしました！</p>

<h2>画面からDokkuのDropletを作成</h2>

<p>「<strong><a href="https://www.digitalocean.com/?refcode=0da417edaeee">DegitalOclean</a></strong>」にログインして、Dropletを作成します。
「One-click App」 => 「Dokku v0.4.10 on 14.04」を選んでDropletを作成してください。</p>

<p><img src="https://farm2.staticflickr.com/1475/24142129302_aebd0c8997_c.jpg" width="800" height="701"></p>

<h2>ドメインの設定です。</h2>

<p>自分のDropletを作成して、IP(例 <code>123.123.123.123</code>) にブラウザでアクセス。</p>

<p><code>
open 123.123.123.123
</code></p>

<p>以下を登録してください</p>

<pre>
- 自分のSSHキー
- Custom Domain
- アプリごとのVirtual Host名の利用(onにしていいかも)
</pre>


<p><img src="https://farm2.staticflickr.com/1536/23625078373_5f346892a0.jpg" width="500" height="435" alt="スクリーンショット 2016-01-08 22.43.36"></p>

<p>Custom Domainを登録したら、自分のdomain側の設定を修正して、<code>123.123.123.123</code> を見に行くようにしてください。</p>

<p><code>
apps.yourdomain.com   A 123.123.123.123
*.apps.yourdomain.com A 123.123.123.123
</code></p>

<h2>サーバに入ってpostgresqlのプラグインをインストール</h2>

<p>公式チュートリアルに従って、『<strong><a href="https://github.com/dokku/dokku-postgres">dokku/dokku-postgres - GitHub</a></strong>』をインストールします。</p>

<p>```</p>

<h1>ssh でサーバにログイン</h1>

<p>ssh root@123.123.123.123</p>

<h1>dokku の postgresql プラグインをインストール</h1>

<p>$ dokku plugin:install https://github.com/dokku/dokku-postgres.git</p>

<h1>PostgreSQL の 今回のアプリ用のDB を作成</h1>

<p>$ dokku postgres:create dokku_sample_db</p>

<h1>dokkuのアプリケーションを作成</h1>

<p>$ dokku apps:create dokku_sample_app</p>

<h1>DBをアプリケーションとをひも付け</h1>

<p>dokku postgres:link dokku_sample_db dokku_sample_app
```</p>

<p>ちなみに、Dokkuで使えるPluginの一覧はこちら『<strong><a href="https://github.com/dokku/dokku/blob/master/docs/plugins.md">dokku/plugins.md - Dokku</a></strong>』。</p>

<h2>日本語環境の設定</h2>

<p><code>language-pack-ja</code>をインストールして日本語パッケージを入れましょう。</p>

<p>```</p>

<h1>ssh でサーバにログイン</h1>

<p>ssh root@123.123.123.123</p>

<h1>apt-get を最新の状態にして language-pack-ja をインストール</h1>

<p>sudo apt-get update &amp;&amp; sudo apt-get install language-pack-ja
```</p>

<h2>スワップ領域の設定</h2>

<p>安定動作のためにスワップ領域を設定しましょう。
設定の仕方は、拙著『<strong><a href="/blog/linux-swap-memory-space/">Ubuntu/CentOS サーバのスワップ領域の割り当て</a></strong>』がおすすめです。</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Rails アプリを作成</h2>

<p>ローカルに戻ってサンプルのRailsアプリを作成します。</p>

<p>```</p>

<h1>Railsアプリの作成</h1>

<p>rails new dokku_sample_app --database=postgresql --skip-test-unit --skip-bundle -m https://raw.github.com/morizyun/rails4_template/master/app_template.rb</p>

<h1>アプリのフォルダに移動</h1>

<p>cd dokku_sample_app</p>

<h1>Bookでscaffold</h1>

<p>rails g scaffold book title:string auther:string price:float
```</p>

<p>Rubyのバージョンを指定します。2016/2/25時点では <code>2.2.3</code> まで対応しているようです。</p>

<p>```ruby</p>

<h1>Gemfile</h1>

<p>ruby '2.2.3'
```</p>

<p>```ruby</p>

<h1>.ruby-version</h1>

<p>2.2.3
```</p>

<p>routesにrootを追加します。</p>

<p>```</p>

<h1>config/routes.rb</h1>

<p>Rails.application.routes.draw do
  # ↓ を追加
  root 'books#index'
end
```</p>

<p><code>.gitignore</code> から <code>config/secrets.yml</code> を削除。そして、git にコミット。</p>

<p>```</p>

<h1>gitに登録</h1>

<p>git add . -A &amp;&amp; git commit -m 'first commit'</p>

<h1>git のremote サーバを追加</h1>

<p>git remote add dokku dokku@apps.yourdomain.com:dokku_sample_app
```</p>

<h2>ローカルからの実行系</h2>

<p>ローカルでのコマンド入力を簡単にしてくれる
「<strong><a href="https://github.com/SebastianSzturo/dokku-cli">SebastianSzturo/dokku-cli</a></strong>」
を使いつつデプロイします！</p>

<p>```</p>

<h1>gitの情報を読んで、herokutoolbelt</h1>

<p>gem install dokku-cli</p>

<h1>secret keyをセット</h1>

<p>dokku config:set SECRET_KEY_BASE=<code>bundle exec rake secret</code></p>

<h1>サーバにdeploy</h1>

<p>git push dokku master</p>

<h1>ブラウザで表示</h1>

<p>dokku open
```</p>

<p>Railsで作成した画面が表示されれば成功です！</p>

<p><img src="https://farm2.staticflickr.com/1675/24168218261_30651ecd62.jpg" width="500" height="294" alt="スクリーンショット 2016-01-08 22.52.38"></p>

<h2>dokku-cliのコマンド</h2>

<p>以下の様なことができます。</p>

<p>```</p>

<h1>アプリ配下でコマンドを実行</h1>

<p>dokku run <cmd>   # Run a one-off command in the environment of the app</p>

<h1>よく使いそうなコマンド</h1>

<p>dokku ssh                                       # Start an SSH session as root user
dokku logs [-t]                                 # Display logs for the app (-t follows)
dokku help [COMMAND]                            # Describe available commands or one specific command</p>

<h1>設定変更系のコマンド</h1>

<p>dokku config                                    # Display the app's environment variables
dokku config:get KEY                            # Display an environment variable value
dokku config:set KEY1=VALUE1 [KEY2=VALUE2 ...]  # Set one or more environment variables
dokku config:set:file <path/to/file>            # Set one or more environment variables from file
dokku config:unset KEY1 [KEY2 ...]              # Unset one or more environment variables</p>

<h1>プロセス/コンテナ系のコマンド</h1>

<p>dokku ps           # List processes running in app container(s)
dokku ps:rebuild   # Rebuild the app
dokku ps:restart   # Restart the app container
dokku ps:start     # Start the app container</p>

<h1>その他便利コマンド</h1>

<p>dokku nginx:build                               # (Re)builds nginx config for the app
dokku open                                      # Open the app in your default browser
dokku url                                       # Show the first URL for the app
dokku urls                                      # Show all URLs for the app
```</p>

<h2>DokkuのミドルウェアPlugin</h2>

<p>PostgreSQLだけでなく、RedisやElasticsearch等のPluginも数コマンドで使うことができるようになります。
公式サポートされているものだけでも次のようなものがあります。</p>

<p><code>
CouchDB (beta)
Elasticsearch (beta)
MariaDB (beta)
Memcached (beta)
Mongo (beta)
MySQL (beta)
Nats (beta)
Postgres (beta)
RabbitMQ (beta)
Redis (beta)
RethinkDB (beta)
Copy Files to Image
HTTP Auth (beta)
Let's Encrypt (beta)
Maintenance mode (beta)
Redirect (beta)
</code></p>

<p>また公式サポートされているPlugin以外にもコミュニティや個人が様々なPluginを提供しています。
詳しくは、『<a href="https://github.com/dokku/dokku/blob/master/docs/plugins.md">dokku/plugins.md - GitHub</a>**』を見てみてください。</p>

<h2>感想</h2>

<p>まだ、簡単なアプリをデプロイしただけなので、もう少し色々試した上でですが、今のところの感触はかなりありな気がします＾＾</p>

<h2>Special Thank</h2>

<ul>
<li><strong><a href="http://dokku.viewdocs.io/dokku/application-deployment/">Dokku - The smallest PaaS implementation you've ever seen</a></strong></li>
<li><strong><a href="http://blog.mochromatic.com/2014/12/17/setting-up-dokku-on-digital-ocean/">Setting up Dokku on Digital Ocean</a></strong></li>
<li><strong><a href="http://donpottinger.net/blog/2014/11/17/bye-bye-heroku-hello-dokku.html">Bye Bye Heroku, Hello Dokku: Migrating a Rails App from Heroku to Dokku (Part 1) | by @donpottinger</a></strong></li>
<li><strong><a href="http://donpottinger.net/blog/2014/11/22/bye-bye-heroku-hello-dokku-part-2.html">Bye Bye Heroku, Hello Dokku: Migrating a Rails App from Heroku to Dokku (Part 2) | by @donpottinger</a></strong></li>
</ul>


<h2>変更来歴</h2>

<p>(2016/01/24 19:30) 記述ミスの修正</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arproxy ActiveRecordが発行したSQLを加工できるGem]]></title>
    <link href="http://morizyun.github.io/blog/brakeman-rails-security-checker.1/"/>
    <updated>2016-01-19T23:40:00+09:00</updated>
    <id>http://morizyun.github.io/blog/brakeman-rails-security-checker.1</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00SF6JN4U/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00SF6JN4U&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00SF6JN4U&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00SF6JN4U" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
『<strong><a href="https://github.com/cookpad/arproxy">cookpad/arproxy - GitHub</a></strong>』は、
Arproxy ActiveRecordが発行したSQLを加工できるGemです。
Slow Queryを調査したり、SQLにコメントを付与したり、SQLをReadonlyに制限したりできます！</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>Gemインストール</h2>

<p>Gemfileに以下を追加して、<code>bundle install</code>を実行。</p>

<p>```ruby</p>

<h1>Gemfile</h1>

<p>group :development do
  # ActiveRecordのSQLを加工
  gem 'arproxy'
end
```</p>

<h2>SQLをログに出力</h2>

<p>以下のようになSQLを実行する部分をProxyします。</p>

<p><code>
+-------------------------+                       +------------------+
| ActiveRecord::Base#find |--execute(sql, name)--&gt;| Database Adapter |
+-------------------------+                       +------------------+
</code></p>

<p>SQLをログに出力するサンプルはこちら。</p>

<p>```ruby
class QueryTracer &lt; Arproxy::Base
  def execute(sql, name=nil)</p>

<pre><code>Rails.logger.debug sql
Rails.logger.debug caller(1).join("\n")
super(sql, name)
</code></pre>

<p>  end
end</p>

<p>Arproxy.configure do |config|
  config.adapter = "mysql2" # A DB Apdapter name which is used in your database.yml
  config.use QueryTracer
end
Arproxy.enable!
```</p>

<h2>Slow Queryのログを出力</h2>

<p>Slow Queryのログを出力する場合はこちら。</p>

<p>```ruby
class SlowQueryLogger &lt; Arproxy::Base
  def initialize(slow_ms)</p>

<pre><code>@slow_ms = slow_ms
</code></pre>

<p>  end</p>

<p>  def execute(sql, name=nil)</p>

<pre><code>result = nil
ms = Benchmark.ms { result = super(sql, name) }
if ms &gt;= @slow_ms
  Rails.logger.info "Slow(#{ms.to_i}ms): #{sql}"
end
result
</code></pre>

<p>  end
end</p>

<p>Arproxy.configure do |config|
  config.use SlowQueryLogger, 1000
end
```</p>

<h2>SQLにコメントを差し込む</h2>

<p>SQLにコメントを差し込む場合はこちら。</p>

<p>```ruby
class CommentAdder &lt; Arproxy::Base
  def execute(sql, name=nil)</p>

<pre><code>sql += " /*this_is_comment*/"
super(sql, name)
</code></pre>

<p>  end
end
```</p>

<p>これは面白いかも！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brakeman Railsのセキュリティチェックを行うためのGem]]></title>
    <link href="http://morizyun.github.io/blog/brakeman-rails-security-checker/"/>
    <updated>2016-01-18T23:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/brakeman-rails-security-checker</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00SF6JN4K/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00SF6JN4K&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00SF6JN4K&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00SF6JN4K" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
『<strong><a href="https://github.com/presidentbeef/brakeman">presidentbeef/brakeman - GitHub</a></strong>』は、
Railsのセキュリティの問題点等をコマンド1つでチェックしてくれるGemです。
企業等のサイト開発などでも気軽に使えるので是非試してみてください。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>サンプル</h2>

<p>こんな感じでコマンド一つでアプリのセキュリティをチェックしてくれます。</p>

<p>```bash
bundle exec brakeman</p>

<p>+BRAKEMAN REPORT+</p>

<p>Application path: /path/to/rails_app
Rails version: 4.2.5
Brakeman version: 3.1.4
Started at 2016-01-18 23:46:28 +0900
Duration: 0.805318 seconds
Checks run: BasicAuth, ContentTag, CreateWith, CrossSiteScripting, DefaultRoutes, Deserialize, DetailedExceptions, DigestDoS, EscapeFunction, Evaluation, Execute, FileAccess, FileDisclosure, FilterSkipping, ForgerySetting, HeaderDoS, I18nXSS, JRubyXML, JSONEncoding, JSONParsing, LinkTo, LinkToHref, MailTo, MassAssignment, ModelAttrAccessible, ModelAttributes, ModelSerialize, NestedAttributes, NumberToCurrency, QuoteTableName, Redirect, RegexDoS, Render, RenderDoS, RenderInline, ResponseSplitting, SQL, SQLCVEs, SSLVerify, SafeBufferManipulation, SanitizeMethods, SelectTag, SelectVulnerability, Send, SendFile, SessionManipulation, SessionSettings, SimpleFormat, SingleQuotes, SkipBeforeFilter, StripTags, SymbolDoSCVE, TranslateBug, UnsafeReflection, ValidationRegex, WithoutProtection, XMLDoS, YAMLParsing</p>

<p>+SUMMARY+</p>

<p>+-------------------+-------+
| Scanned/Reported  | Total |
+-------------------+-------+
| Controllers       | 6     |
| Models            | 5     |
| Templates         | 26    |
| Errors            | 0     |
| Security Warnings | 0 (0) |
+-------------------+-------+
```</p>

<p>結果はファイルやjsonで出力できますし、JenkinsなどのCIなどと連携して出力させる事もできます。</p>

<p>ちなみに、『<strong><a href="http://brakemanscanner.org/docs/jenkins/">Jenkinsのプラグイン</a></strong>』はこちらです。</p>

<p><a href="http://brakemanscanner.org/docs/jenkins/" target="_blank">
  <img src="http://brakemanscanner.org/images/brakeman_trend_graph.png" />
</a></p>

<h2>Gemインストール</h2>

<p>Gemfileに以下を追加して、<code>bundle install</code>を実行。</p>

<p>```ruby</p>

<h1>Gemfile</h1>

<p>group :development do
  # セキュリティチェック
  gem 'brakeman', require: false
end
```</p>

<h2>application.js の変更</h2>

<p>あとは以下のコマンドを実行するだけ。</p>

<p><code>bash
bundle exec brakeman
</code></p>

<p>これで安心して仕事を進められそうです！</p>

<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://qiita.com/joker1007/items/be5dc3f3b1e93132a4f7">俺がGitHubでスターを付けたリポジトリ一覧 - Qiita</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xray-rails Railsのviewがどこに表示されているかをわかりやすくする]]></title>
    <link href="http://morizyun.github.io/blog/xray-rails-view-checker-ui-bone/"/>
    <updated>2016-01-17T19:50:00+09:00</updated>
    <id>http://morizyun.github.io/blog/xray-rails-view-checker-ui-bone</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00WJQCVPU/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00WJQCVPU&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00WJQCVPU&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00WJQCVPU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
『<strong><a href="https://github.com/brentd/xray-rails">brentd/xray-rails - GitHub</a></strong>』RailsのテンプレートやBackboneのviewが画面上のどこに表示されているかを視覚的に表示してくれるGemです。</p>

<p>Railsの開発時に便利なのでぜひ使ってみてください。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>サンプル</h2>

<p><img src="http://f.cl.ly/items/1A0o3y1y3Q13103V3F1l/xray-rails-large.gif" /></p>

<h2>Gemインストール</h2>

<p>Gemfileに以下を追加して、<code>bundle install</code>を実行。</p>

<p>```ruby</p>

<h1>Gemfile</h1>

<p>group :development do
  # viewの構造を表示 (cmd+shift+x)
  gem 'xray-rails'
end
```</p>

<h2>キャッシュクリア</h2>

<p>一旦キャッシュを削除</p>

<p><code>bash
$ rm -rf tmp/cache/assets
</code></p>

<h2>application.js の変更</h2>

<p>あとは以下を追加するだけ。</p>

<p><code>javascript
// application.js
//= require jquery
//= require xray
...
// 以下、backboneを使っている場合のみ
//= require backbone
//= require xray-backbone
</code></p>

<p>これは開発捗りそう♪</p>

<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://qiita.com/joker1007/items/be5dc3f3b1e93132a4f7">俺がGitHubでスターを付けたリポジトリ一覧 - Qiita</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveModelを使って、Classにバリデーションなどの便利機能を追加 [Rails4.2]]]></title>
    <link href="http://morizyun.github.io/blog/activemodel-rails-basic-usage/"/>
    <updated>2016-01-11T21:10:00+09:00</updated>
    <id>http://morizyun.github.io/blog/activemodel-rails-basic-usage</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00NM7VROQ/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00NM7VROQ&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00NM7VROQ&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00NM7VROQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
RailsのModelで便利に使っているバリデーションなどの機能をオブジェクトに追加する際には、<code>include ActiveModel::Model</code> がお手軽で便利ですよというお話です。
ちょっとボケて失念してしまっていたので、念のためメモです。</p>

<!-- more -->


<br style="clear:both;"/>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>できること</h2>

<p>この <code>include ActiveModel::Model</code> でできることはこちら。</p>

<ul>
<li><code>Hoge.new({fuga: pugi})</code> みたいなイニシャライズができる</li>
<li>attributeのバリデーションを作れる</li>
<li><code>form_for</code> などで使える</li>
</ul>


<h2>実装例</h2>

<p>オブジェクトの実装はこちら。</p>

<p>```ruby</p>

<h1>app/forms/non_model.rb</h1>

<p>class Form::NonModel
  # ------------------------------------------------------------------
  # Modules
  # ------------------------------------------------------------------
  include ActiveModel::Model # Modelの便利機能とか</p>

<p>  # ------------------------------------------------------------------
  # Attributes
  # ------------------------------------------------------------------
  attr_accessor :foo, :bar</p>

<p>  # ------------------------------------------------------------------
  # Validations
  # ------------------------------------------------------------------
  validates :foo, presence: true
  validates :bar, presence: true
end
```</p>

<p>オブジェクトを使う際はこちら。</p>

<p>```ruby</p>

<h1>バリデーションOKのオブジェクト</h1>

<p>vaiid_form = Form::NonModel.new(foo: 'foooo', bar: 'baaaan!')
vaiid_form.valid? #=> true</p>

<h1>バリデーションNGのオブジェクト</h1>

<p>invalid_form = Form::NonModel.new(foo: 'foooo')
invalid_form.valid? #=> false
invalid_form.errors #=> #&lt;ActiveModel::Errors:0x007fe6bb19df58 @base=#&lt;Form::NonModel:0x007fe6beec6038 @errors=#&lt;ActiveModel::Errors:0x007fe6bb19df58 ...>, @foo="foooo", @validation_context=nil>, @messages={:bar=>["を入力してください。"]}>
```</p>

<p>地味だけど、便利です。Fat Modelを避けるために、責務に応じたオブジェクトを作る際に適用範囲は広いです。</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>あどがき</h2>

<p>「<strong><a href="http://qiita.com/kbaba1001/items/e265ad1e40f238931468">Ruby - Rails のアーキテクチャ設計を考える - Qiita</a></strong>」も勉強になる。
チームへの導入コスト等も考えつつ、検討していきたい！</p>

<h2>Special Thanks</h2>

<ul>
<li><a href="http://tanihiro.hatenablog.com/entry/2014/01/09/193720">【ruby】ActiveModelを使ってDBと関係ないFormを作成する【Rails】 - tanihiro.log</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
