<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | 酒と泪とRubyとRailsと]]></title>
  <link href="http://morizyun.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://morizyun.github.io/"/>
  <updated>2016-02-08T21:56:06+09:00</updated>
  <id>http://morizyun.github.io/</id>
  <author>
    <name><![CDATA[morizyun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 5.0.0.beta2 APIモードについて調べてみた]]></title>
    <link href="http://morizyun.github.io/blog/rails-api-5.0.0.beta.2/"/>
    <updated>2016-02-08T21:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rails-api-5.0.0.beta.2</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
「<strong><a href="http://edgeguides.rubyonrails.org/api_app.html">Using Rails for API-only Applications — Ruby on Rails Guides</a></strong>」を中心に、Rails 5.0.0.beta2 API modeについて少し調べてみたのでそのメモです。</p>

<!-- more -->


<br style="clear:both;"/>


<h2>APIアプリケーションのおさらい</h2>

<p>まず、ここではAPIアプリケーションを「<strong><a href="https://developer.github.com/">GitHub Developer | GitHub Developer Guide</a></strong>」のように、プログラムがアクセスすることを前提としたWebアプリケーションと考えいます。</p>

<p>クライアントサイドにNativeアプリケーションがあり、バックエンドにRailsのアプリケーションがJSONのリソースを扱うことを想定しています。</p>

<h2>なぜJSON APIにRailsを使うのか？</h2>

<p>Railsが提供しているCoCのベストプラクティスを有効活用して、ビジネスロジックをスピーディかつ柔軟にAPIを構築できる点が、
RailsをAPIアプリとして活用するメリットだと考えます。</p>

<h2>Railsを使うメリット</h2>

<pre>
- リクエストが来るたびに、変更内容を監視して最適なリロードが実行される(開発者のプロダクティビティを落とさない)
- 開発モードを持ち、開発者のプロダクティビティを向上させる(本番モードのパフォーマンスは落とさない)
- 環境情報やDBのクエリー、基本的なパフォーマンスなどのログを出力する
- セキュリティがしっかりしている(IPスプーフィングや、Timing Attack等を防いでくれる)
- URLパラメータだけでなく、JSONパラメータ等の解釈できる
- 変更がない場合に304 Not Modifiedを返すConfidential GETを使う事ができる(`#stale?`, ETag, Last-Modified)
- Railsの強力なキャッシュ機能(page, action, fragment caching)を有効活用することができる
- RESTful JSON APIを構築するのであればResourceful Routingは最適
- Basic認証、Digest認証、Token認証等の基本的な認証方法をサポートしている
- シングルコマンドで、controller, model, routes, test stub等々を生成できる強力なジェネレータを持つ
- 沢山のサードパーティのライブラリが、RailsによるWebアプリの構築をサポートしてくれる
</pre>


<h2>新規のアプリを構築する場合</h2>

<p>以下のように <code>--api</code> オプションをつけるとAPIモードとして生成されます。</p>

<p><code>bash
$ rails new my_api --api
</code></p>

<p>このコマンドによって生成されるRailsアプリには以下のような特徴があります。</p>

<pre>
- 通常のWebアプリよりも、Middlewareが通常より制限されることで応答性能が向上する
- ApplicationController => ActionController::APIを継承する
- GeneratorでのViewやAssetの生成が行われない(フロントエンド側が行うことを想定)
</pre>


<h2>既存のアプリをAPI modleにする場合</h2>

<p>configを以下のように修正。</p>

<p>```ruby</p>

<h1>config/application.rb</h1>

<p>config.api_only = true
```</p>

<p>```ruby</p>

<h1>config/environments/development.rb</h1>

<p>config.debug_exception_response_format = :api
```</p>

<p>各controller を以下の様に変更。</p>

<p>```ruby
class ApplicationController &lt; ActionController::Base
end</p>

<h1>↓</h1>

<p>class ApplicationController &lt; ActionController::API
end
```</p>

<h2>APIモードのmiddleware</h2>

<p>以下のコマンドを実行するとrailsのmiddlewareをみる事ができます。</p>

<p><code>bash
$ rails middleware
</code></p>

<p>ちなみに、APIモードのmiddlewareは次の通りです。</p>

<p><code>ruby
Rack::Sendfile #=&gt; X-Sendfile header をセットする
ActionDispatch::Static #=&gt; Publicフォルダの静的なファイルを返す
ActionDispatch::LoadInterlock #=&gt; 開発モードでThread safeなコードリロードを行う
ActiveSupport::Cache::Strategy::LocalCache::Middleware #=&gt; メモリキャッシュを行う
Rack::Runtime #=&gt; X-Runtime header をセットする
ActionDispatch::RequestId #=&gt; リクエストごとにユニークな X-Request-Id header をセットする
Rails::Rack::Logger #=&gt; リクエストの開始と終了にログを書き込む
ActionDispatch::ShowExceptions #=&gt; アプリで例外が発生した時にユーザーに例外を返す
ActionDispatch::DebugExceptions #=&gt; localでDegug用例外ページを返す
ActionDispatch::RemoteIp #=&gt; IP spoofing attacksのチェックを行う
ActionDispatch::Reloader #=&gt; 開発中のコードのリロードを行う
ActionDispatch::Callbacks #=&gt; リクエスト前とリクエスト後のコールバックを行う
Rack::Head #=&gt; HEAD リクエストを GETリクエストに変換する
Rack::ConditionalGet #=&gt; 変更がない場合にConditional GET(304 Not Modified)を返す
Rack::ETag #=&gt; ETag header を追加する
</code></p>

<h2>Cache Middleware の活用</h2>

<p>HTTP Cacheの基本的な使い方は、controllerで <code>#stale?</code>を使うだけです。</p>

<p>```ruby
def show
  @post = Post.find(params[:id])</p>

<p>  if stale?(last_modified: @post.updated_at)</p>

<pre><code>render json: @post
</code></pre>

<p>  end
end
```</p>

<p>この方法は、<code>If-Modified-Since</code>ヘッダ に <code>@post.updated_at</code> をセットします。
最後の更新から変更がない場合は、「304 Not Modified」を返します。</p>

<h2>Rack::Sendfile の活用</h2>

<p><code>Rack::Sendfile</code> は、controllerで <code>#send_file</code> メソッドを利用することで実際にファイルを送付することができる。
このメソッドを使う場合は以下の様な設定を行う必要がある。</p>

<p>```ruby</p>

<h1>config/environemts/production.rb</h1>

<h1>Apache and lighttpd</h1>

<p>config.action_dispatch.x_sendfile_header = "X-Sendfile"</p>

<h1>Nginx</h1>

<p>config.action_dispatch.x_sendfile_header = "X-Accel-Redirect"
```</p>

<h2>ActionDispatch::Request の活用</h2>

<p><code>javascript
jQuery.ajax({
  type: 'POST',
  url: '/people',
  dataType: 'json',
  contentType: 'application/json',
  data: JSON.stringify({ person: { firstName: "Yehuda", lastName: "Katz" } }),
  success: function(json) { }
});
</code></p>

<p>もControllerで次のように正しく解釈される。</p>

<p><code>ruby
{ :person =&gt; { :firstName =&gt; "Yehuda", :lastName =&gt; "Katz" } }
</code></p>

<h2>middlewareの追加・削除</h2>

<p>```ruby</p>

<h1>middlewareの追加</h1>

<p>config.middleware.use Rack::MethodOverride</p>

<h1>middlewareの削除</h1>

<p>config.middleware.delete ::Rack::Sendfile
```</p>

<h2>(補足) HTTP ETag</h2>

<p>「HTTP ETag」はキャッシュの有効性を検証するための仕組みの一つ。</p>

<ul>
<li><strong><a href="https://en.wikipedia.org/wiki/HTTP_ETag">HTTP ETag - Wikipedia, the free encyclopedia</a></strong></li>
</ul>


<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://edgeguides.rubyonrails.org/rails_on_rack.html#internal-middleware-stack">Rails on Rack — Ruby on Rails Guides</a></strong></li>
<li><strong><a href="http://edgeguides.rubyonrails.org/api_app.html">Using Rails for API-only Applications — Ruby on Rails Guides</a></strong></li>
<li><strong><a href="https://github.com/rails-api/rails-api">rails-api/rails-api: Rails for API only applications</a></strong></li>
<li><strong><a href="https://wyeworks.com/blog/2012/4/20/rails-for-api-applications-rails-api-released/">Rails for API applications (rails-api) released</a></strong></li>
<li><strong><a href="http://api.rubyonrails.org/classes/ActionController/ConditionalGet.html#method-i-stale-3F">#slate? - ActionController::ConditionalGet</a></strong></li>
<li><strong><a href="https://developer.github.com/v3/gists/">Gists | GitHub Developer Guide</a></strong></li>
<li><strong><a href="https://ja.wikipedia.org/wiki/Digest%E8%AA%8D%E8%A8%BC">Digest認証 - Wikipedia</a></strong></li>
</ul>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 5.0.0.beta1の新機能紹介の公式ブログ記事を読んでみた]]></title>
    <link href="http://morizyun.github.io/blog/rails-5.0.0.beta1-new-function-official-blog/"/>
    <updated>2016-01-31T22:00:00+09:00</updated>
    <id>http://morizyun.github.io/blog/rails-5.0.0.beta1-new-function-official-blog</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00P0UR1CA/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00P0UR1CA&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00P0UR1CA&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00P0UR1CA" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Rails公式ブログの Rails 5 beta1の新機能についてのブログ記事『<strong><a href="http://weblog.rubyonrails.org/2015/12/18/Rails-5-0-beta1/">Riding Rails: Rails 5.0.0.beta1: Action Cable, API mode, Rails command</a></strong>』を英語の勉強がてら読んでみました！</p>

<!-- more -->


<br style="clear:both;"/>


<h2>Action Cable</h2>

<pre>
- Action Cableは、Websocketをハンドリングするためのフレームワーク
- チャットや、Notificationを簡単に実装することができる
</pre>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h3>チャットアプリのサンプルソース</h3>

<p>```bash</p>

<h1>アプリの作成</h1>

<p>$ rails <em>5.0.0.beta1.1</em> new action_cable_sample --skip-spring --skip-bundle
$ cd action_cable_sample</p>

<h1>bundle install の実行</h1>

<p>bundle install --jobs=4 --path=vendor/bundle</p>

<h1>Message の scaffold を実行</h1>

<p>$ rails g scaffold messages content:text</p>

<h1>マイグレーションを実行</h1>

<p>$ rails db:migrate</p>

<h1>Chat チャネル with Speakアクション を作成</h1>

<p>$ rails g channel chat speak</p>

<h1>非同期でブロードキャストするための Jobを作成</h1>

<p>$ rails g job message_broadcast
```</p>

<p>ルーティングを修正。</p>

<p>```ruby</p>

<h1>config/routes.rb</h1>

<p>Rails.application.routes.draw do
  # ↓ 以下を追加
  root to: 'messages#index'</p>

<p>  # Serve websocket cable requests in-process
  mount ActionCable.server => '/cable'
end
```</p>

<p>JS側で、ActionCableを有効にします。</p>

<p>```coffeescript</p>

<h1>app/assets/javascripts/cable.coffee</h1>

<p>@App ||= {}
App.cable = ActionCable.createConsumer()
```</p>

<p>クライアントサイド(CoffeeScript)のSpeakアクションを修正。</p>

<p>```coffeescript</p>

<h1>app/assets/javascripts/channels/chat.coffee</h1>

<p>  received: (data) -></p>

<pre><code># メッセージを受け取ったら #messages に付け足す
$('#messages').append data['message']
</code></pre>

<p>  speak: (message) -></p>

<pre><code># formでsubmitしたメッセージをサーバに送信
@perform 'speak', message: message
</code></pre>

<h1>リターンキーを押したら、メッセージが送信される</h1>

<p>$(document).on 'keypress', '[data-behavior~=chat_speaker]', (event) ->
  if event.keyCode is 13</p>

<pre><code>App.chat.speak event.target.value
event.target.value = ''
event.preventDefault()
</code></pre>

<p>```</p>

<p>サーバーサイドの ActionCableのクラス <code>CatChannel</code> を修正。</p>

<p>```ruby</p>

<h1>ActionCableのクラス</h1>

<p>class ChatChannel &lt; ApplicationCable::Channel
  # 配信する際の名前。 chat.coffee内の「ChatChannel」と対応(?)
  def subscribed</p>

<pre><code># ↓ 以下をコメントアウトする
stream_from 'chat_channel'
</code></pre>

<p>  end</p>

<p>  # クライアントから送られた message を テーブルに保存
  def speak(data)</p>

<pre><code>Message.create! content: data['message']
</code></pre>

<p>  end
end
```</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<p>Messageをテーブルに保存したら、非同期のJobを起動。</p>

<p>```ruby</p>

<h1>Messageを管理するクラス</h1>

<p>class Message &lt; ApplicationRecord
  # 作成後のコミットが完了したら ブロードキャストする
  after_create_commit { MessageBroadcastJob.perform_later self }
end
```</p>

<p>保存されたメッセージを、MessageBroadcastJobで非同期でブロードキャスト。</p>

<p>```ruby</p>

<h1>非同期でクライアントにメッセージを送るためのJob</h1>

<p>class MessageBroadcastJob &lt; ApplicationJob
  queue_as :default</p>

<p>  # 部分テンプレートをrenderする
  def perform(message)</p>

<pre><code>ActionCable.server.broadcast 'chat_channel', message: _render_message(message)
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  # 部分テンプレートをrenderする
  def _render_message(message)</p>

<pre><code>ApplicationController.renderer.render(partial: 'messages/message', locals: { message: message })
</code></pre>

<p>  end
end
```</p>

<p>ちゃっと風にメッセージを保存</p>

<p>```html</p>

<!-- app/views/messages/index.html.erb -->


<h1>Chat</h1>




<div id="messages">
  <%= render @messages %>
</div>


<p><form>
  <label>Send Message:</label><br>
  <input type="text" data-behavior="chat_speaker">
</form>
```</p>

<p>あと部分テンプレート追加。キャッシュも普通に使う事ができます！</p>

<p>```html</p>

<!-- app/views/messages/_message.html.erb -->


<p>&lt;% cache message do %>
  <div class="message"></p>

<pre><code>&lt;p&gt;&lt;%= message.content %&gt;&lt;/p&gt;
</code></pre>

<p>  </div>
&lt;% end %>
```</p>

<p>あとはいつもどおり <code>rails s</code> で起動するとpumaが立ち上がります。</p>

<p><img src="http://morizyun.github.io/images/action_cable_chat_sample.gif" /></p>

<h3>感想</h3>

<p>以下、使ってみて感じたことです。</p>

<ul>
<li>サーバ/クライアントサイド両方の処理を意識する必要がある</li>
<li>Viewのキャッシュなど、Railsの今までの知識を有効活用できる</li>
<li>一時的に接続が失敗したり、エラー時のリカバリ処理等、実際に作る場合はいろいろ考慮が必要そう</li>
<li>Basecamp 3では本番で使われているけど、ネットの知見がたまるまで少し様子見が吉かも</li>
</ul>


<h3>関連リンク</h3>

<ul>
<li><strong><a href="http://qiita.com/jnchito/items/aec75fab42804287d71b">Rails 5 + ActionCableで作る！シンプルなチャットアプリ（DHH氏のデモ動画より） - Qiita</a></strong></li>
<li><strong><a href="https://github.com/rails/actioncable-examples">rails/actioncable-examples: Action Cable Examples - GitHub</a></strong></li>
</ul>


<h2>API Mode</h2>

<p>BackendとしてAPIを作るのに特化したrails プロジェクトを <code>rails new backend --api</code> 等で簡単に作成できる。</p>

<p>このAPI Modeとは直接の関係はないですが、『<strong><a href="https://github.com/cerebris/jsonapi-resources">jsonapi-resources</a></strong>』というプロジェクトがあるようです。
こちらもサンプルソースを見た限りはなかなか面白そう。上手く使いこなせれば、楽ができそうです！</p>

<p>こちらは別途サンプルを作って試してみようと思います！</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>ActiveRecord Attriubtes</h2>

<p>DBに保存している値の型と、ActiveRecordで取り出した時の型を分けることができる。</p>

<p>```ruby</p>

<h1>小数点付きの型でDBに保存</h1>

<h1>db/schema.rb</h1>

<p>create_table :store_listings, force: true do |t|
  t.decimal :price_in_cents
end</p>

<h4>Before</h4>

<h1>app/models/store_listing.rb</h1>

<p>class StoreListing &lt; ActiveRecord::Base
end</p>

<h1>小数点付きで値を返す</h1>

<p>store_listing = StoreListing.new(price_in_cents: '10.1')
store_listing.price_in_cents # => BigDecimal.new(10.1)</p>

<h4>After</h4>

<p>class StoreListing &lt; ActiveRecord::Base
  attribute :price_in_cents, :integer # 整数に設定した場合
end</p>

<h1>整数で値を返す</h1>

<p>store_listing = StoreListing.new(price_in_cents: '10.1')
store_listing.price_in_cents # => 10
```</p>

<p>配列や、レンジの状態で値を受け取る事もできます。</p>

<p>```ruby</p>

<h1>配列やレンジを設定する事もできる</h1>

<p>class MyModel &lt; ActiveRecord::Base
  attribute :my_string, :string
  attribute :my_int_array, :integer, array: true
  attribute :my_float_range, :float, range: true
end</p>

<p>model = MyModel.new(
my_string: "string",
my_int_array: ["1", "2", "3"],
my_float_range: "[1,3.5]",
)
model.attributes</p>

<h1>=></h1>

<h1>{</h1>

<h1>my_string: "string",</h1>

<h1>my_int_array: [1, 2, 3],</h1>

<h1>my_float_range: 1.0..3.5</h1>

<h1>}</h1>

<p>```</p>

<p>さらに、独自の型を定義することもできます。これはいいかも！</p>

<p>```ruby
class MoneyType &lt; ActiveRecord::Type::Integer
  def type_cast(value)</p>

<pre><code>if value.include?('$')
  price_in_dollars = value.gsub(/\$/, '').to_f
  price_in_dollars * 100
else
  value.to_i
end
</code></pre>

<p>  end
end</p>

<h1>クラスに設定</h1>

<p>class StoreListing &lt; ActiveRecord::Base
  attribute :price_in_cents, MoneyType.new
end</p>

<h1>変換した結果を返す</h1>

<p>store_listing = StoreListing.new(price_in_cents: '$10.00')
store_listing.price_in_cents # => 1000
```</p>

<p>実用性も高いし、これは地味にかなりありがたい機能。</p>

<p>ちなみに、こんな使い方もできるそうで。。。夢が広がりんぐ。</p>

<p>```ruby
class Money &lt; Struct.new(:amount, :currency)
end</p>

<p>class MoneyType &lt; Type::Value
  def initialize(currency_converter)</p>

<pre><code>@currency_converter = currency_converter
</code></pre>

<p>  end</p>

<p>  def type_cast_for_database(value)</p>

<pre><code>value_in_bitcoins = currency_converter.convert_to_bitcoins(value)
value_in_bitcoins.amount
</code></pre>

<p>  end
end</p>

<p>class Product &lt; ActiveRecord::Base
  currency_converter = ConversionRatesFromTheInternet.new
  attribute :price_in_bitcoins, MoneyType.new(currency_converter)
end</p>

<p>Product.where(price_in_bitcoins: Money.new(5, "USD"))</p>

<h1>=> SELECT * FROM products WHERE price_in_bitcoins = 0.02230</h1>

<p>Product.where(price_in_bitcoins: Money.new(5, "GBP"))</p>

<h1>=> SELECT * FROM products WHERE price_in_bitcoins = 0.03412</h1>

<p>```</p>

<h2>その他変更点</h2>

<pre>
- rake db:migrate => rails db:migrate に変更
- テストの failures 情報が見やすくなる
- 抽象クラスの ApplicationRecord をベースにするようになりました
- ActiveRecord::Relation#in_batches を扱いやすくしてメモリの使いすぎを防ぐ
</pre>


<h2>CHANGELOG</h2>

<ul>
<li><a href="https://github.com/rails/rails/blob/v5.0.0.beta1/actionpack/CHANGELOG.md">Action Pack CHANGELOG</a></li>
<li><a href="https://github.com/rails/rails/blob/v5.0.0.beta1/actionmailer/CHANGELOG.md">Action Mailer CHANGELOG</a></li>
<li><a href="https://github.com/rails/rails/blob/v5.0.0.beta1/actionview/CHANGELOG.md">Action View CHANGELOG</a></li>
<li><a href="https://github.com/rails/rails/blob/v5.0.0.beta1/activerecord/CHANGELOG.md">ActiveRecod CHANGELOG</a></li>
<li><a href="https://github.com/rails/rails/blob/v5.0.0.beta1/activemodel/CHANGELOG.md">Active Model CHANGELOG</a></li>
<li><a href="https://github.com/rails/rails/blob/v5.0.0.beta1/activerecord/CHANGELOG.md">Active Record CHANGELOG</a></li>
<li><a href="https://github.com/rails/rails/blob/v5.0.0.beta1/activesupport/CHANGELOG.md">Active Support CHANGELOG</a></li>
<li><a href="https://github.com/rails/rails/blob/v5.0.0.beta1/activejob/CHANGELOG.md">Active Job CHANGELOG</a></li>
<li><a href="https://github.com/rails/rails/blob/v5.0.0.beta1/railties/CHANGELOG.md">Railties CHANGELOG</a></li>
</ul>


<h2>余談: Turbolinks 5</h2>

<p>ネイティブのiOSとAndroidのラッパー実装として、『<strong><a href="https://github.com/basecamp/turbolinks/tree/v5">basecamp/turbolinks/v5 - GitHub</a></strong>』
を新しく作っているらしいです。まだどんな実装なのかはわかりませんが、新しい試みで面白そう。</p>

<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://qiita.com/jnchito/items/6a93320334c48b967dfb">Rails 5.0で追加される主な新機能（Ruby on Rails公式ブログより） - Qiita</a></strong></li>
<li><strong><a href="http://www.slideshare.net/KenichiTachibana/a-huge-change-rails-5-is-approaching-fast">A HUGE CHANGE RAILS 5 IS APPROACHING FAST</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails へのコントリビューションについて調べてみた]]></title>
    <link href="http://morizyun.github.io/blog/contributing-ruby-on-rails/"/>
    <updated>2016-01-30T10:20:00+09:00</updated>
    <id>http://morizyun.github.io/blog/contributing-ruby-on-rails</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4873117437/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4873117437&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4873117437&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4873117437" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />Rails へのコントリビューションに関する以下のドキュメントを読んでみました。</p>

<ul>
<li>(英語) <strong><a href="http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html">Contributing to Ruby on Rails — Ruby on Rails Guides</a></strong></li>
<li>(日本語) <strong><a href="http://railsguides.jp/contributing_to_ruby_on_rails.html">Ruby on Rails に貢献する方法 | Rails ガイド</a></strong></li>
</ul>


<p>この中で特に参考になった部分を中心に書いていきます。</p>

<!-- more -->


<br style="clear:both;"/>


<h2>コントリビューションの基礎</h2>

<ul>
<li>Ruby On Railsのバグを見つけたら「<strong><a href="https://github.com/rails/rails/issues">Issues · rails/rails - GitHub</a></strong>」で既存のものがないか探して、無ければPOST</li>
<li>最新版(edge)はバグがある可能性があるし、バグが有った場合に取り込まれやすいのでコントリビュートのチャンスが多い。コントリビュートのチャンスが多い</li>
</ul>


<h2>セキュリティの問題が見つかった場合</h2>

<ul>
<li>GitHub ISSUEにあげてはダメ(悪用される可能性があるから)</li>
<li>「<strong><a href="http://rubyonrails.org/security/">Ruby on Rails: Security policy</a></strong>」あたりにセキュリティのISSUEの立て方が書かれています。</li>
</ul>


<h2>バグなどのISSUE</h2>

<ul>
<li>ISSUEには再現可能なサンプルコードをつけよう</li>
<li>実行可能なテストケースをちゃんと作ろう。テストケースのテンプレートを活用しよう => <strong><a href="http://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#create-an-executable-test-case">1.2 Create an Executable Test Case - Ruby on Rails Guide Contributing to Ruby on Railss</a></strong></li>
<li>テストケースは、gistなどに貼って使おう</li>
<li>バグの調査に役立つ情報があれば、ISSUEに書き込もう</li>
<li>failするテストはコントリビュートのチャンスだ</li>
</ul>


<h3>テストバッチ</h3>

<ul>
<li>forkしてテストパッチを作ろう

<ul>
<li>変更が確実に動作しているかを確認しよう</li>
<li>テストによってより良くなっているか？変更点のテストがきちんと存在しているか？</li>
<li>ドキュメンテーションが適切にアップデートされているか？</li>
<li>変更点はコードとして適切で、高速に動作するか？</li>
</ul>
</li>
</ul>


<h2>Gistのテンプレート</h2>

<p><code>ActiveRecord</code> や <code>ActionController</code> のgistテンプレートのです。バグをレポートするときに使います。</p>

<ul>
<li><strong><a href="https://github.com/rails/rails/blob/master/guides/bug_report_templates/active_record_gem.rb">Active Record template for gems</a></strong></li>
<li><strong><a href="https://github.com/rails/rails/blob/master/guides/bug_report_templates/action_controller_gem.rb">Action Controller template for gems</a></strong></li>
<li><strong><a href="https://github.com/rails/rails/blob/master/guides/bug_report_templates/active_record_master.rb">Active Record template for master</a></strong></li>
<li><strong><a href="https://github.com/rails/rails/blob/master/guides/bug_report_templates/action_controller_master.rb">Action Controller template for master</a></strong></li>
</ul>


<h2>機能追加のリクエストについて</h2>

<ul>
<li>必ず動作するパッチを作ってGitHubにISSUEを作ろう(動作するパッチがない場合はinvalidになる)</li>
<li>機能追加は他の機能に影響を与える可能性があるのでコアチームによって判断される</li>
<li>アイデアを相談したいときは「<strong><a href="https://groups.google.com/forum/?fromgroups#!forum/rubyonrails-core">rails-core mailing list</a></strong>」に投げてみよう</li>
</ul>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h3>健全性のチェック</h3>

<p>もしRails開発者の知り合いがいるなら、予め修正したコードをみせることで、
適切なコードか否かをちゃんとチェックしよう。</p>

<h3>Feedbackを受けよう</h3>

<p>Merge Request を出したら、幾つかのフィードバックや意見が来るので対応しよう。
マイナーチェンジは悪いことじゃないのでポジティブに意見を受け入れよう。
あまりにも Merge Request に反応がないようなら、MLにPostしてみよう。</p>

<h2>コードを書くときの注意点</h2>

<p>バグフィックスや機能追加でコードを書く際には以下の点に注意しよう。</p>

<pre>
- 正しいコードを書こう
- Railsのイデオム/Helperを適切に書こう
- テストが通過しない場合は、テストが通過するように修正しよう
- 変更点に関するドキュメントもアップデートをお忘れなく
</pre>


<h2>Railsのcoding style</h2>

<pre>
- 2スペースを使う。タブは使わない
- 不要なスペースをつけないようにしよう
- private/protectedの後はindentをつけよう
- 1.9以降のhashシンタックス { a: b } を使おう
- `&&` や `||` を使おう
- `class << self` を使おう
- `MyClass.my_method(my_arg)` が望ましい
- `a = b` としよう
- `assert_not` を使おう
- `{ do_stuff }` としよう
</pre>


<h2>パフォーマンスに影響する変更</h2>

<ul>
<li>gem 「<strong><a href="https://github.com/evanphx/benchmark-ips">benchmark-ips</a></strong> 等を利用してベンチマークを取ること。</li>
</ul>


<p>```ruby
require 'benchmark/ips'</p>

<p>Benchmark.ips do |x|
  x.report('addition') { 1 + 2 }
  x.report('addition with send') { 1.send(:+, 2) }
end</p>

<p>Calculating -------------------------------------</p>

<pre><code>        addition   132.013k i/100ms
</code></pre>

<h2>  addition with send   125.413k i/100ms</h2>

<pre><code>        addition      9.677M (± 1.7%) i/s -     48.449M
</code></pre>

<p>  addition with send      6.794M (± 1.1%) i/s -     33.987M
```</p>

<h2>テストの実行</h2>

<p>テストの実行方法は次の通り。</p>

<p>```</p>

<h1>Rails 全体のテスト</h1>

<p>$ cd rails
$ bundle exec rake test</p>

<h1>ActionMailerに関するテスト</h1>

<p>$ cd actionmailer
$ bundle exec rake test</p>

<h1>ActiveRecordに関するテスト DBの種類ごとのテストも可能</h1>

<p>$ cd activerecord
$ bundle exec rake test:sqlite3
$ bundle exec rake test:mysql2
$ bundle exec rake test:postgresql
```</p>

<h2>ドキュメンテーション</h2>

<p>Rails には次の2つのドキュメントがある;</p>

<pre>
Ruby on Rails Guides - help you learn about Ruby on Rails,
APIドキュメント - serves as a reference.
</pre>


<p>また、それぞれにガイドラインがあるので読んでみよう。</p>

<ul>
<li><strong><a href="http://guides.rubyonrails.org/api_documentation_guidelines.html">API Documentation Guidelines — Ruby on Rails Guides</a></strong></li>
<li><strong><a href="http://guides.rubyonrails.org/ruby_on_rails_guides_guidelines.html">Ruby on Rails Guides Guidelines — Ruby on Rails Guides</a></strong></li>
</ul>


<p>それから、ドキュメンテーションの変更だけの場合は CI を動かす必要はない。 <code>[ci skip]</code> をつけよう。</p>

<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>CHANGELOGをちゃんと更新しよう</h2>

<p>```
*   Summary of a change that briefly describes what was changed. You can use multiple</p>

<pre><code>lines and wrap them at around 80 characters. Code examples are ok, too, if needed:

    class Foo
      def bar
        puts 'baz'
      end
    end

You can continue after the code example and you can attach issue number. GH#1234

*Your Name*
</code></pre>

<p>```</p>

<h2>コミットメッセージ</h2>

<p>コミットは1つにsquashしておこう。そして、コミットメッセージも簡単なサマリーをちゃんと書こう。</p>

<p>```
Short summary (ideally 50 characters or less)</p>

<p>More detailed description, if necessary. It should be wrapped to
72 characters. Try to be as descriptive as you can. Even if you
think that the commit content is obvious, it may not be obvious
to others. Add any description that is already present in the
relevant issues; it should not be necessary to visit a webpage
to check the history.</p>

<p>The description section can have multiple paragraphs.</p>

<p>Code examples can be embedded by indenting them with 4 spaces:</p>

<pre><code>class ArticlesController
  def index
    render json: Article.limit(10)
  end
end
</code></pre>

<p>You can also add bullet points:</p>

<ul>
<li><p>make a bullet point by starting a line with either a dash (-)
or an asterisk (*)</p></li>
<li><p>wrap lines at 72 characters, and indent any additional lines
with 2 spaces for readability
```</p></li>
</ul>


<p>あと、ちゃんとリベースしておこう。</p>

<p>```
$ git checkout master
$ git pull --rebase</p>

<p>$ git checkout my_new_branch
$ git rebase master
```</p>

<h2>Forkしよう</h2>

<p>```</p>

<h1>自分のリポジトリをForkして作ろう</h1>

<p>$ git remote add mine git@github.com:<your user name>/rails.git</p>

<h1>自分のリポジトリへのpush</h1>

<p>$ git push mine my_new_branch</p>

<h1>rails 本家のブランチをremoteに追加</h1>

<p>$ git remote add rails git://github.com/rails/rails.git</p>

<h1>rails 本家をfetch</h1>

<p>$ git fetch rails</p>

<h1>rails/masterでリベースしよう</h1>

<p>$ git checkout master
$ git rebase rails/master
```</p>

<h2>バックポーティング(BackPorting)</h2>

<p>次のメジャーリリースまでにHEADの変更を取り込みたい場合は、patchを作って自分のブランチに適用しよう。</p>

<p>```ruby</p>

<h1>master と HEAD(現在のブランチ)とのdiffを取る</h1>

<p>$ git log master..HEAD</p>

<h1>patchを作ろう</h1>

<p>$ git format-patch master --stdout > ~/my_changes.patch</p>

<h1>自分のブランチにpatchを適用仕様</h1>

<p>$ git checkout -b my_backport_branch 3-2-stable
$ git apply ~/my_changes.patch
```</p>

<h2>開発環境の構築</h2>

<ul>
<li>Virtual Boxを使って簡単に構築したい場合 => <strong><a href="https://github.com/rails/rails-dev-box">rails/rails-dev-box: A virtual machine for Ruby on Rails core development - GitHub</a></strong></li>
<li>ローカルに構築したい場合 => <strong><a href="http://guides.rubyonrails.org/development_dependencies_install.html">Development Dependencies Install — Ruby on Rails Guides</a></strong></li>
</ul>


<h2>テスト用のアプリを作る</h2>

<p><code>ruby
$ cd rails
$ bundle exec rails new ~/my-test-app --dev
</code></p>

<h2>コントリビューターの一覧</h2>

<p><strong><a href="http://contributors.rubyonrails.org/">Rails Contributors</a></strong></p>

<h2>あとがき</h2>

<p>英語のドキュメントを読みながら書いたので間違っている部分も多々あると思います。もしお気づきの点等あれば <strong><a href="https://twitter.com/zyunnosuke">@zyunnosuke</a></strong> まで</p>

<h2>Special Thanks</h2>

<ul>
<li><a href="http://itpro.nikkeibp.co.jp/article/COLUMN/20130314/463563/?ST=oss&amp;P=1">20歳になったRubyを支える人々 - ［Ruby／Railsコミッタ 松田明氏］海外コミュニティとの橋渡しに</a></li>
<li><a href="http://magazine.rubyist.net/?0037-Hotlinks">Rubyist Magazine - Rubyist Hotlinks 【第 29 回】 松田明さん</a></li>
<li><a href="http://thinking-megane.blogspot.jp/2012/09/git-pull-rebase.html">Thinking megane: git pull 時の rebase オプションのススメ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails セキュリティフィックス 4.2.5.1, 4.1.14.1, 5.0.0.beta1.1 のメモ]]></title>
    <link href="http://morizyun.github.io/blog/security-fix-rails-4.2.5.1/"/>
    <updated>2016-01-28T22:35:00+09:00</updated>
    <id>http://morizyun.github.io/blog/security-fix-rails-4.2.5.1</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/4797380357/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4797380357&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=4797380357&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=4797380357" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
1/26(火)にRails 4.2.5.1, 4.1.14.1, 5.0.0.beta1.1等のセキュリティフィックスが出たのでそのメモ。</p>

<p><strong><a href="http://weblog.rubyonrails.org/2016/1/25/Rails-5-0-0-beta1-1-4-2-5-1-4-1-14-1-3-2-22-1-and-rails-html-sanitizer-1-0-3-have-been-released/">Riding Rails: Rails 5.0.0.beta1.1, 4.2.5.1, 4.1.14.1, 3.2.22.1, and rails-html-sanitizer 1.0.3 have been released!</a></strong></p>

<!-- more -->


<br style="clear:both;"/>


<h2>ベーシック認証の文字列比較の応答時間での推測を防ぐ</h2>

<p><strong><a href="https://groups.google.com/forum/#!msg/rubyonrails-security/ANv0HDHEC3k/mt7wNGxbFQAJ">[CVE-2015-7576] Timing attack vulnerability in basic authentication in Action Controller</a></strong></p>

<p>ベーシック認証の文字列比較をした時の応答時間で、処理時間が推測されるのを防ぐ。</p>

<p>```ruby</p>

<h2>こっちは直ぐ違うとわかる</h2>

<p>  "foo" == "bar"</p>

<h2>上よりは時間がかかる</h2>

<p>  "foo" == "fo1"
```</p>

<h2>DoS(Denial of Service)攻撃でmine-typeを大量に送ったらサーバが落ちてしまう問題の対応</h2>

<p><strong><a href="https://groups.google.com/d/msg/rubyonrails-security/9oLY_FCzvoc/w9oI9XxbFQAJ">CVE-2016-0751 Possible Object Leak and Denial of Service attack in Action Pack</a></strong></p>

<p>mime-typeをglobal cacheしていたため、大量な不正アクセスでメモリを圧迫してサービス停止しないようにするための対策。</p>

<p>ちなみに「mime-type」とはデータの種類を表すコードのことで、画像の <code>image/jpeg</code> やHTMLの <code>text/html</code> などがある。</p>

<h2>allow_destroy: false が効かないバグの修正</h2>

<p><strong><a href="https://groups.google.com/forum/#!msg/rubyonrails-security/cawsWcQ6c8g/tegZtYdbFQAJ">[CVE-2015-7577] Nested attributes rejection proc bypass in Active Record</a></strong></p>

<p><code>accepts_nested_attributes_for</code> をつけて親子クラスを一括で登録、更新する際に <code>allow_destroy: false</code>(削除を許可しない)を設定したにもかかわらず、
proc の <code>:reject_if</code> が優先されて削除される不具合があったのを修正。</p>

<h2>renderにパラメータを渡した場合にアプリ外のファイルが参照できる不具合の対応</h2>

<p><strong><a href="https://groups.google.com/forum/#!msg/rubyonrails-security/335P1DcLG00/OfB9_LhbFQAJ">[CVE-2016-0752] Possible Information Leak Vulnerability in Action View</a></strong></p>

<p><code>ruby
def index
  render params[:id]
end
</code></p>

<p>上記の様にパラメータを渡した場合に、アプリ外のファイルが参照できてしまう不具合があったので対策。この修正は難しい...追い切れない....orz...</p>

<h2>Strong Parameterを使わないモデルへのデータの受け渡しでValidationを通すようにする</h2>

<p><strong><a href="https://groups.google.com/forum/#!msg/rubyonrails-security/6jQVC1geukQ/8oYETcxbFQAJ">[CVE-2016-0753] Possible Input Validation Circumvention in Active Model</a></strong></p>

<p>Strong Parameterを使わずに、ActiveRecord等を使う場合に、</p>

<p><code>ruby
SomeModel.new(unverified_user_input)
</code></p>

<p>により、Validationを通さずに値が保存できてしまうバグの対応。</p>

<h2>routesに :controller があるとメモリリークするバグの回避</h2>

<p><strong><a href="https://groups.google.com/forum/#!msg/rubyonrails-security/dthJ5wL69JE/YzPnFelbFQAJ">CVE-2015-7581 Object leak vulnerability for wildcard controller routes in Action Pack</a></strong></p>

<p>めっちゃ勉強になります</p>

<h2>rails-html-sanitizerの重要なセキュリティフィックス</h2>

<p>rails-html-sanitizerの重要なセキュリティフィックスが発生しました。</p>

<ul>
<li><strong><a href="https://groups.google.com/d/msg/rubyonrails-security/uh--W4TDwmI/JbvSRpdbFQAJ">CVE-2015-7578 Possible XSS vulnerability in rails-html-sanitizer</a></strong></li>
<li><strong><a href="https://groups.google.com/d/msg/rubyonrails-security/OU9ugTZcbjc/PjEP46pbFQAJ">CVE-2015-7579 XSS vulnerability in rails-html-sanitizer</a></strong></li>
<li><strong><a href="https://groups.google.com/d/msg/rubyonrails-security/uh--W4TDwmI/m_CVZtdbFQAJ">CVE-2015-7580 Possible XSS vulnerability in rails-html-sanitizer</a></strong></li>
</ul>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<h2>rails-html-sanitizer 1.0.2 => 1.0.3の差分</h2>

<p>rails-html-sanitizer 1.0.2 => 1.0.3にバージョンアップされた差分はこちら。</p>

<ul>
<li><strong><a href="https://github.com/rails/rails-html-sanitizer/compare/v1.0.2...v1.0.3">Comparing v1.0.2...v1.0.3 · rails/rails-html-sanitizer</a></strong></li>
</ul>


<p>これにより、<code>rails-html-sanitizer</code> のフィルターがより厳格化される。</p>

<h2>rails 4.2.5.0 => 4.2.5.1 の差分</h2>

<ul>
<li><strong><a href="https://github.com/rails/rails/compare/v4.2.5...v4.2.5.1">Comparing v4.2.5...v4.2.5.1 · rails/rails</a></strong></li>
</ul>


<h2>4.2.5.1 で RSpec のパフォーマンスが悪くなる？</h2>

<ul>
<li><strong><a href="https://github.com/rspec/rspec-rails/issues/1532">Undefined Method <code>cache</code> in Tests for Rails 4.2.5.1 · Issue #1532 · rspec/rspec-rails - GitHub</a></strong></li>
</ul>


<p>4.2.5.1にした場合、RSpecで上記のエラーがでるようになったそうですが、こちらは対応/Closeされました。
その結果として、RSpecのパフォーマンスが落ちている(処理が遅くなった)人が出ているようです。</p>

<ul>
<li><strong><a href="https://github.com/rspec/rspec-rails/issues/1537">Performance Regression in 3.4.1 · Issue #1537 · rspec/rspec-rails</a></strong></li>
</ul>


<p>本番への適用はもう少しだけ様子を見たほうが良さそうです。</p>

<h2>あとがき</h2>

<p>y_yagiさんのブログ「<strong><a href="http://y-yagi.hatenablog.com/">なるようになるブログ</a></strong>」めっちゃ勉強になる。</p>

<h2>Special Thanks</h2>

<ul>
<li><strong><a href="http://y-yagi.hatenablog.com/entry/2016/01/27/063153">rails commit log流し読み(2016/01/26) - なるようになるブログ</a></strong></li>
<li><strong><a href="http://qiita.com/hmuronaka/items/818c421dc632e3efb7a6">Rails4 - 複数の子レコードを作成・更新する. accepts_nested_attributes_for - Qiita</a></strong></li>
<li><strong><a href="http://qiita.com/umanoda/items/3ceff00aae2309e4f9ba">RubyのGCと仲良くしたい〜WeakRefオブジェクトを削除するぞ編〜 - Qiita</a></strong></li>
<li><strong><a href="http://www.softantenna.com/wp/software/rails-4-2-5-1-released/">「Rails 5.0.0.beta1.1 / 4.2.5.1 / 4.1.14.1 / 3.2.22.1」がリリース – 重要なセキュリティ修正を含む</a></strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis-rails RailsのセッションをRedisで管理]]></title>
    <link href="http://morizyun.github.io/blog/redis-rails-session-ruby/"/>
    <updated>2016-01-24T23:55:00+09:00</updated>
    <id>http://morizyun.github.io/blog/redis-rails-session-ruby</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.co.jp/gp/product/B00ITFOFLS/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=B00ITFOFLS&linkCode=as2&tag=morizyun00-22"><img border="0" src="http://ws.assoc-amazon.jp/widgets/q?_encoding=UTF8&ASIN=B00ITFOFLS&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=morizyun00-22" width="150" style="float: left; margin: 0 20px 20px 0;" ></a><img src="http://www.assoc-amazon.jp/e/ir?t=morizyun00-22&l=as2&o=9&a=B00ITFOFLS" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
サーバーサイドでのセッション管理はセキュリティを向上させたり、通信で無用なCookieを送らない等の意味でメリットがあります。
今回は『<strong><a href="https://github.com/redis-store/redis-rails">redis-store/redis-rails - GitHub</a></strong>』を使う手順のメモです！</p>

<!-- more -->


<br style="clear:both;"/>


<h2>サーバーサイド/クライアントでのセッション管理のPros/Cons</h2>

<p>セッションに関する説明は以下のサイトがおすすめです。注意点としては次の2点と考えられます。</p>

<ul>
<li><strong><a href="http://qiita.com/jkr_2255/items/075d1d518ae7a98141b3">セッション管理の要注意点 - Qiita</a></strong></li>
<li><strong><a href="http://railsguides.jp/security.html">Rails セキュリティガイド | Rails ガイド</a></strong></li>
</ul>


<p><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script>
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- square -->
<ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-4186413323075068" data-ad-slot="5059873392"></ins>
<script>
    (adsbygoogle = window.adsbygoogle || []).push({});
</script></p>

<pre>
- セッションの基礎
  - Webアプリでは、接続ごとに固有の識別子(セッションID)を割り当て、一時的なidを割り振る
  - セッションは他のCookieと合わせて通信のたびにやり取りされる
  - Cookieのサイズは4 KBと厳密に定められている

- セッションにおけるセキュリティのリスク
  - 他人のセッションを取得すると他人に一時的になりすましてログインができてしまう
  - セッション/Cookieにデータを保持するとクライアント側でデータを復元出来てしまう

- サーバーサイドでセッションを管理するメリット
  - 通信時にやりとりされるCookieの通信量を減らす

- Rails固有の話
  - Railsではセッションidは、32バイトのMD5ハッシュ値である

- セキュリティ強度を上げるための対策
  - Cookieのsecure属性とSSL => HTTPSでの通信でのみ使い、暗号化
  - Cookieのhttponly属性 => JavaScriptから読み書きさせない
</pre>


<h2>開発環境の準備</h2>

<p>Mac等でのRedisの導入については、拙著
『<strong><a href="http://morizyun.github.io/blog/redis-mac-centos-rails/">CentOS/Mac OSXへのRedis導入手順 - memcacheライクなKey-Value方式と、永続化対応のインメモリDB</a></strong>』
がおすすめです。</p>

<h2>Gemインストール</h2>

<p>Gemfileに以下を追加して、<code>bundle install</code>を実行。</p>

<p>```ruby</p>

<h1>Gemfile</h1>

<p>gem "redis-rails"
```</p>

<h2>設定の修正</h2>

<p>まずはキャッシュの保存先をRedisに設定。</p>

<p>```ruby</p>

<h1>config/application.rb</h1>

<h1>/cache はアプリ名や、Rails．env等の環境情報をいれてもいいかも</h1>

<p>config.cache_store = :redis_store, "redis://localhost:6379/0/cache", { expires_in: 90.minutes }</p>

<h1>ちなみに環境変数に入れてしまうのもおすすめです</h1>

<h1>config.cache_store = :redis_store, ENV['REDIS_URL'], { expires_in: 90.minutes }</h1>

<p>```</p>

<p>続いてバックエンドのセッションの保存先を設定。</p>

<p>```ruby</p>

<h1>config/initializers/session_store.rb</h1>

<p>MyApplication::Application.config.session_store :redis_store, servers: "redis://localhost:6379/0/cache"</p>

<h1>環境変数で設定する場合</h1>

<h1>MyApplication::Application.config.session_store :redis_store, servers: ENV['REDIS_URL']</h1>

<p>```</p>

<h2>Special Thanks</h2>

<ul>
<li><a href="http://qiita.com/Kta-M/items/b4852c849d408e7445c6">RailsのセッションストアとしてRedisを使う(Mac/EC2:AmazonLinux) - Qiita</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
