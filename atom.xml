<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>酒と涙とRubyとRailsと</title>
  
  <subtitle>No Programming, No Life!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://morizyun.github.io/"/>
  <updated>2017-10-16T12:04:31.000Z</updated>
  <id>http://morizyun.github.io/</id>
  
  <author>
    <name>morizyun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Capistrano 3系でRails 5.1のデプロイ[rbenv][ruby2.4]</title>
    <link href="http://morizyun.github.io/blog/capistrano3-rails-deploy-multi-rbenv/"/>
    <id>http://morizyun.github.io/blog/capistrano3-rails-deploy-multi-rbenv/</id>
    <published>2017-10-16T15:00:00.000Z</published>
    <updated>2017-10-16T12:04:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>デプロイツールのデファクトスタンダードとなった『<strong><a href="http://capistranorb.com/" target="_blank" rel="noopener">Capistrano3</a></strong>』。stagingやproductionといった複数環境へのデプロイを標準で対応していたり、bundleやmigration、pumaとの連携なども抜群です。<br>かなり乗り遅れてしまいましたが、最近ようやくRails 5.1をcapistrano3系でデプロイしました。ずっとHerokuやElastic Beanstalkにばっかり頼っていたのでちょこちょことハマって苦労しました。今後忘れないための忘備録メモっす！</p><p>rbenv, rvmの両方に対応しました。オリジナルのcapコマンドの作り方も書きました！</p><a id="more"></a><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>今回の環境では次のような環境を想定しています。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* DB: PostgreSQL</span><br><span class="line">* Webサーバ: puma</span><br><span class="line">* Rubyのバージョン管理: rbenv</span><br><span class="line">* Cron DSL: whenever</span><br></pre></td></tr></table></figure><h2 id="PostgreSQL-DBの準備"><a href="#PostgreSQL-DBの準備" class="headerlink" title="PostgreSQL DBの準備"></a>PostgreSQL DBの準備</h2><p>デプロイ先のDBの接続用ユーザーとデータベースを作成するために、次のコマンドをstaging環境とproduction環境で実行します。</p><h3 id="PostgreSQLの場合"><a href="#PostgreSQLの場合" class="headerlink" title="PostgreSQLの場合"></a>PostgreSQLの場合</h3><p>こちらは、PostgreSQLを使う場合の手順です。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># postgreユーザーになる</span></span><br><span class="line">sudo su -</span><br><span class="line">su - postgres</span><br><span class="line"></span><br><span class="line"><span class="comment"># パスワード付きのユーザーを作成する</span></span><br><span class="line">createuser -s [ユーザー名] -P</span><br></pre></td></tr></table></figure><h2 id="Gemfileの追加"><a href="#Gemfileの追加" class="headerlink" title="Gemfileの追加"></a>Gemfileの追加</h2><p><code>Gemfile</code>に次のGemを追加して、<code>bundle install</code>を実行。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">group <span class="symbol">:deployment</span> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># cron management</span></span><br><span class="line">  gem <span class="string">'whenever'</span>, <span class="symbol">require:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Deploy</span></span><br><span class="line">  gem <span class="string">'capistrano'</span>, <span class="symbol">require:</span> <span class="literal">false</span></span><br><span class="line">  gem <span class="string">'capistrano-bundler'</span>, <span class="symbol">require:</span> <span class="literal">false</span></span><br><span class="line">  gem <span class="string">'capistrano-rails'</span>, <span class="symbol">require:</span> <span class="literal">false</span></span><br><span class="line">  gem <span class="string">'capistrano-rbenv'</span>, <span class="symbol">require:</span> <span class="literal">false</span></span><br><span class="line">  gem <span class="string">'capistrano3-puma'</span>, <span class="symbol">require:</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Capistranoの設定ファイルを生成"><a href="#Capistranoの設定ファイルを生成" class="headerlink" title="Capistranoの設定ファイルを生成"></a>Capistranoの設定ファイルを生成</h2><p>次のコマンドでCapistranoの設定ファイル<code>deploy.rb</code>らを生成。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bundle <span class="built_in">exec</span> <span class="built_in">cap</span> install</span><br></pre></td></tr></table></figure><h2 id="Capfileの設定"><a href="#Capfileの設定" class="headerlink" title="Capfileの設定"></a>Capfileの設定</h2><p><code>Capfile</code>を次のように変更します。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Load DSL and set up stages</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'capistrano/setup'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include default deployment tasks</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'capistrano/deploy'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load the SCM plugin appropriate to your project:</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'capistrano/scm/git'</span></span><br><span class="line">install_plugin Capistrano::SCM::Git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Include tasks from other gems included in your Gemfile</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'capistrano/rbenv'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'capistrano/bundler'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'capistrano/rails/assets'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'capistrano/rails/migrations'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'capistrano/puma'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'whenever/capistrano'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load custom tasks from `lib/capistrano/tasks` if you have any defined</span></span><br><span class="line">Dir.glob(<span class="string">'lib/capistrano/tasks/*.rake'</span>).each &#123; <span class="params">|r|</span> import r &#125;</span><br><span class="line">install_plugin Capistrano::Puma</span><br></pre></td></tr></table></figure><h2 id="Capistrano共通のデプロイ設定"><a href="#Capistrano共通のデプロイ設定" class="headerlink" title="Capistrano共通のデプロイ設定"></a>Capistrano共通のデプロイ設定</h2><p>まず、共通のデプロイ情報を<code>deploy.rb</code>に記入していきます。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">lock <span class="string">'3.9.1'</span></span><br><span class="line"></span><br><span class="line">set <span class="symbol">:repo_url</span>,        <span class="string">'git@xxx.git'</span></span><br><span class="line">set <span class="symbol">:application</span>,     <span class="string">'APP_NAME'</span></span><br><span class="line">set <span class="symbol">:user</span>,            <span class="string">'APP_USER'</span></span><br><span class="line">set <span class="symbol">:puma_threads</span>,    [<span class="number">4</span>, <span class="number">16</span>]</span><br><span class="line">set <span class="symbol">:puma_workers</span>,    <span class="number">0</span></span><br><span class="line">set <span class="symbol">:pty</span>,             <span class="literal">true</span></span><br><span class="line">set <span class="symbol">:use_sudo</span>,        <span class="literal">false</span></span><br><span class="line">set <span class="symbol">:stage</span>,           <span class="symbol">:production</span></span><br><span class="line">set <span class="symbol">:deploy_via</span>,      <span class="symbol">:remote_cache</span></span><br><span class="line">set <span class="symbol">:deploy_to</span>,       <span class="string">'SERVER_PATH'</span></span><br><span class="line">set <span class="symbol">:puma_bind</span>,       <span class="string">"unix://<span class="subst">#&#123;shared_path&#125;</span>/tmp/sockets/puma.sock"</span></span><br><span class="line">set <span class="symbol">:puma_state</span>,      <span class="string">"<span class="subst">#&#123;shared_path&#125;</span>/tmp/pids/puma.state"</span></span><br><span class="line">set <span class="symbol">:puma_pid</span>,        <span class="string">"<span class="subst">#&#123;shared_path&#125;</span>/tmp/pids/puma.pid"</span></span><br><span class="line">set <span class="symbol">:puma_access_log</span>, <span class="string">"<span class="subst">#&#123;release_path&#125;</span>/log/puma.access.log"</span></span><br><span class="line">set <span class="symbol">:puma_error_log</span>,  <span class="string">"<span class="subst">#&#123;release_path&#125;</span>/log/puma.error.log"</span></span><br><span class="line">set <span class="symbol">:puma_preload_app</span>, <span class="literal">true</span></span><br><span class="line">set <span class="symbol">:puma_worker_timeout</span>, <span class="literal">nil</span></span><br><span class="line">set <span class="symbol">:puma_init_active_record</span>, <span class="literal">true</span></span><br><span class="line">set <span class="symbol">:rbenv_type</span>, <span class="symbol">:system</span></span><br><span class="line">set <span class="symbol">:rbenv_path</span>, <span class="string">'/usr/local/rbenv'</span></span><br><span class="line">set <span class="symbol">:rbenv_ruby</span>, File.read(<span class="string">'.ruby-version'</span>).strip</span><br><span class="line">set <span class="symbol">:rbenv_prefix</span>, <span class="string">"RBENV_ROOT=<span class="subst">#&#123;fetch(<span class="symbol">:rbenv_path</span>)&#125;</span> RBENV_VERSION=<span class="subst">#&#123;fetch(<span class="symbol">:rbenv_ruby</span>)&#125;</span> <span class="subst">#&#123;fetch(<span class="symbol">:rbenv_path</span>)&#125;</span>/bin/rbenv exec"</span></span><br><span class="line">set <span class="symbol">:rbenv_map_bins</span>, <span class="string">%w[rake gem bundle ruby rails]</span></span><br><span class="line">set <span class="symbol">:linked_dirs</span>, fetch(<span class="symbol">:linked_dirs</span>, []).push(</span><br><span class="line">  <span class="string">'log'</span>,</span><br><span class="line">  <span class="string">'tmp/pids'</span>,</span><br><span class="line">  <span class="string">'tmp/cache'</span>,</span><br><span class="line">  <span class="string">'tmp/sockets'</span>,</span><br><span class="line">  <span class="string">'vendor/bundle'</span>,</span><br><span class="line">  <span class="string">'public/system'</span>,</span><br><span class="line">  <span class="string">'public/uploads'</span></span><br><span class="line">)</span><br><span class="line">set <span class="symbol">:linked_files</span>, fetch(<span class="symbol">:linked_files</span>, []).push(</span><br><span class="line">  <span class="string">'config/database.yml'</span>,</span><br><span class="line">  <span class="string">'config/secrets.yml'</span>,</span><br><span class="line">  <span class="string">'.env'</span></span><br><span class="line">)</span><br><span class="line">set <span class="symbol">:whenever_identifier</span>, -&gt; &#123; <span class="string">"<span class="subst">#&#123;fetch(<span class="symbol">:application</span>)&#125;</span>_<span class="subst">#&#123;fetch(<span class="symbol">:stage</span>)&#125;</span>"</span> &#125;</span><br><span class="line"></span><br><span class="line">namespace <span class="symbol">:puma</span> <span class="keyword">do</span></span><br><span class="line">  desc <span class="string">'Create Directories for Puma Pids and Socket'</span></span><br><span class="line">  task <span class="symbol">:make_dirs</span> <span class="keyword">do</span></span><br><span class="line">    on roles(<span class="symbol">:app</span>) <span class="keyword">do</span></span><br><span class="line">      execute <span class="string">"mkdir <span class="subst">#&#123;shared_path&#125;</span>/tmp/sockets -p"</span></span><br><span class="line">      execute <span class="string">"mkdir <span class="subst">#&#123;shared_path&#125;</span>/tmp/pids -p"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  before <span class="symbol">:start</span>, <span class="symbol">:make_dirs</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">namespace <span class="symbol">:deploy</span> <span class="keyword">do</span></span><br><span class="line">  desc <span class="string">'Make sure local git is in sync with remote.'</span></span><br><span class="line">  task <span class="symbol">:check_revision</span> <span class="keyword">do</span></span><br><span class="line">    on roles(<span class="symbol">:app</span>) <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">unless</span> <span class="string">`git rev-parse HEAD`</span> == <span class="string">`git rev-parse origin/master`</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">'Initial Deploy'</span></span><br><span class="line">  task <span class="symbol">:initial</span> <span class="keyword">do</span></span><br><span class="line">    on roles(<span class="symbol">:app</span>) <span class="keyword">do</span></span><br><span class="line">      before <span class="string">'deploy:restart'</span>, <span class="string">'puma:start'</span></span><br><span class="line">      invoke <span class="string">'deploy'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">'Restart application'</span></span><br><span class="line">  task <span class="symbol">:restart</span> <span class="keyword">do</span></span><br><span class="line">    on roles(<span class="symbol">:app</span>), <span class="symbol">in:</span> <span class="symbol">:sequence</span>, <span class="symbol">wait:</span> <span class="number">5</span> <span class="keyword">do</span></span><br><span class="line">      invoke <span class="string">'puma:restart'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  desc <span class="string">'reload the database with seed data'</span></span><br><span class="line">  task <span class="symbol">:seed</span> <span class="keyword">do</span></span><br><span class="line">    on roles(<span class="symbol">:db</span>) <span class="keyword">do</span></span><br><span class="line">      with <span class="symbol">rails_env:</span> fetch(<span class="symbol">:rails_env</span>) <span class="keyword">do</span></span><br><span class="line">        within release_path <span class="keyword">do</span></span><br><span class="line">          execute <span class="symbol">:bundle</span>, <span class="symbol">:exec</span>, <span class="symbol">:rake</span>, <span class="string">'db:seed'</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  after  <span class="symbol">:migrate</span>,      <span class="symbol">:seed</span></span><br><span class="line">  before <span class="symbol">:starting</span>,     <span class="symbol">:check_revision</span></span><br><span class="line">  after  <span class="symbol">:finishing</span>,    <span class="symbol">:compile_assets</span></span><br><span class="line">  after  <span class="symbol">:finishing</span>,    <span class="symbol">:cleanup</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="環境別のデプロイ設定"><a href="#環境別のデプロイ設定" class="headerlink" title="環境別のデプロイ設定"></a>環境別のデプロイ設定</h2><p>次に環境ごとに異なる設定を<code>config/deploy/staging.rb(production.rb)</code>に記述していきます。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">set <span class="symbol">:branch</span>, <span class="string">'master'</span></span><br><span class="line"></span><br><span class="line">server <span class="string">'IP_ADDRESS'</span>, <span class="symbol">user:</span> <span class="string">'USER_NAME'</span>, <span class="symbol">roles:</span> <span class="string">%w[web app db]</span></span><br><span class="line"></span><br><span class="line">set <span class="symbol">:ssh_options</span>, &#123;</span><br><span class="line">    <span class="symbol">keys:</span> [File.expand_path(<span class="string">'/PATH/TO/SSH_KEY/'</span>)],</span><br><span class="line">    <span class="symbol">forward_agent:</span> <span class="literal">true</span>,</span><br><span class="line">    fetch(<span class="symbol">:user</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="wheneverの設定"><a href="#wheneverの設定" class="headerlink" title="wheneverの設定"></a>wheneverの設定</h2><p>サーバ側のcronの設定をコードで簡単に管理できるwheneverは、『<strong><a href="http://morizyun.github.io/blog/whenever-gem-rails-ruby-capistrano/">Wheneverは導入が超簡単なcrontab管理ライブラリGemです！[Rails4.1]</a></strong>』を参考に設定！</p><h2 id="初回インストール"><a href="#初回インストール" class="headerlink" title="初回インストール"></a>初回インストール</h2><p>本番環境へのデプロイは次のように実施します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bundle <span class="built_in">exec</span> <span class="built_in">cap</span> production deploy:initial</span><br></pre></td></tr></table></figure><h2 id="デプロイ手順"><a href="#デプロイ手順" class="headerlink" title="デプロイ手順"></a>デプロイ手順</h2><p>デプロイに必要なディレクトリを生成して、デプロイを実行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># productionへのデプロイ</span></span><br><span class="line">bundle <span class="built_in">exec</span> <span class="built_in">cap</span> production deploy</span><br></pre></td></tr></table></figure><h2 id="補足：capコマンドの一覧を表示したい場合"><a href="#補足：capコマンドの一覧を表示したい場合" class="headerlink" title="補足：capコマンドの一覧を表示したい場合"></a>補足：capコマンドの一覧を表示したい場合</h2><p>capコマンドの一覧を表示したい場合は次のコマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bundle <span class="built_in">exec</span> <span class="built_in">cap</span> -T</span><br></pre></td></tr></table></figure><h2 id="補足：deploy時にブランチを選択したい場合"><a href="#補足：deploy時にブランチを選択したい場合" class="headerlink" title="補足：deploy時にブランチを選択したい場合"></a>補足：deploy時にブランチを選択したい場合</h2><p><code>set :branck, &#39;マスタ&#39;</code>の部分を次のように書き直し。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> :branch, `feature/xxx`</span><br></pre></td></tr></table></figure><h2 id="補足：サーバへのファイルのアップロードをしたい場合"><a href="#補足：サーバへのファイルのアップロードをしたい場合" class="headerlink" title="補足：サーバへのファイルのアップロードをしたい場合"></a>補足：サーバへのファイルのアップロードをしたい場合</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">namespace <span class="symbol">:devops</span> <span class="keyword">do</span></span><br><span class="line">   desc <span class="string">'Copy files'</span></span><br><span class="line">   task <span class="symbol">:copy</span> <span class="keyword">do</span></span><br><span class="line">      on roles(<span class="symbol">:all</span>) <span class="keyword">do</span> <span class="params">|host|</span></span><br><span class="line">         <span class="string">%w[file.one file.two]</span>.each <span class="keyword">do</span> <span class="params">|f|</span></span><br><span class="line">            upload! <span class="string">"/path/fo/file/<span class="subst">#&#123;f&#125;</span>"</span>, <span class="string">"/remote/path/<span class="subst">#&#123;f&#125;</span>"</span></span><br><span class="line">         <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">   <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="nginxとの連携"><a href="#nginxとの連携" class="headerlink" title="nginxとの連携"></a>nginxとの連携</h2><ul><li><a href="https://qiita.com/kappy0322/items/3d4293b964255b774769" target="_blank" rel="noopener">Rails5+Puma+Nginxな環境をCapistrano3でEC2にデプロイする(後編)</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-deploy-a-rails-app-with-puma-and-nginx-on-ubuntu-14-04" target="_blank" rel="noopener">How To Deploy a Rails App with Puma and Nginx on Ubuntu 14.04</a></li></ul><h2 id="CentOSのセキュリティ改善"><a href="#CentOSのセキュリティ改善" class="headerlink" title="CentOSのセキュリティ改善"></a>CentOSのセキュリティ改善</h2><ul><li><a href="https://qiita.com/NakashimaKeisuke_zerodaynet/items/091862834317229559f1" target="_blank" rel="noopener">CentOS 7 で最初にやってそうなことのまとめ</a></li></ul><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="http://threetreeslight.com/post/68344998681/capistrano-3-x-rails" target="_blank" rel="noopener">capistrano 3.x系を使ってrailsをデプロイ | iii ThreeTreesLight</a></li><li><a href="http://yss44.hatenablog.com/entry/2013/12/01/150215" target="_blank" rel="noopener">Capistrano3で快適デプロイ生活!! - Less is Best</a></li><li><a href="https://github.com/seuros/capistrano-puma" target="_blank" rel="noopener">seuros/capistrano-puma</a></li><li><a href="https://coderwall.com/p/wgs6gw/copy-local-files-to-remote-server-using-capistrano-3" target="_blank" rel="noopener">Copy local files to remote server using capistrano 3 (Example)</a></li><li><a href="https://github.com/javan/whenever" target="_blank" rel="noopener">javan/whenever: Cron jobs in Ruby</a></li><li><a href="https://github.com/capistrano/rbenv" target="_blank" rel="noopener">capistrano/rbenv: Idiomatic rbenv support for Capistrano 3.x</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;デプロイツールのデファクトスタンダードとなった『&lt;strong&gt;&lt;a href=&quot;http://capistranorb.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Capistrano3&lt;/a&gt;&lt;/strong&gt;』。stagingやproductionといった複数環境へのデプロイを標準で対応していたり、bundleやmigration、pumaとの連携なども抜群です。&lt;br&gt;かなり乗り遅れてしまいましたが、最近ようやくRails 5.1をcapistrano3系でデプロイしました。ずっとHerokuやElastic Beanstalkにばっかり頼っていたのでちょこちょことハマって苦労しました。今後忘れないための忘備録メモっす！&lt;/p&gt;
&lt;p&gt;rbenv, rvmの両方に対応しました。オリジナルのcapコマンドの作り方も書きました！&lt;/p&gt;
    
    </summary>
    
      <category term="Rails" scheme="http://morizyun.github.io/categories/Rails/"/>
    
    
      <category term="Rails" scheme="http://morizyun.github.io/tags/Rails/"/>
    
      <category term="Gem" scheme="http://morizyun.github.io/tags/Gem/"/>
    
      <category term="Ruby" scheme="http://morizyun.github.io/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Seleniumチートシート [Ruby]</title>
    <link href="http://morizyun.github.io/blog/selenium-cheat-seet/"/>
    <id>http://morizyun.github.io/blog/selenium-cheat-seet/</id>
    <published>2017-10-10T15:00:00.000Z</published>
    <updated>2017-10-17T13:29:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>RubyからSeleniumを操作する際に使うコードのチートシートです。<br>Seleniumを使うことでブラウザを操作した表示テストを行ったり、ブラウザをつかった操作の自動化ができます。</p><h2 id="ブラウザを開く"><a href="#ブラウザを開く" class="headerlink" title="ブラウザを開く"></a>ブラウザを開く</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">driver = Selenium::WebDriver.<span class="keyword">for</span> <span class="symbol">:chrome</span></span><br></pre></td></tr></table></figure><p>Chromeを開くなら<code>:chrome</code>、Firefoxを開くなら<code>:firefox</code>、Internet Exploreを開くなら<code>:ie</code>です。</p><h2 id="特定のURLを開く"><a href="#特定のURLを開く" class="headerlink" title="特定のURLを開く"></a>特定のURLを開く</h2><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">driver.get <span class="string">'http://www.yahoo.co.jp'</span></span><br><span class="line">driver.navigate.to <span class="string">'http://www.yahoo.co.jp'</span></span><br></pre></td></tr></table></figure><p><code>WebDriver</code>はロードが完了するのを待たないので必要に応じて待ち時間を設定してください。</p><h2 id="特定の要素を取得する"><a href="#特定の要素を取得する" class="headerlink" title="特定の要素を取得する"></a>特定の要素を取得する</h2><ul><li><code>find_element</code>：最初に見つかった要素を返す</li><li><code>find_elements</code>：見つかった要素すべてを返す</li></ul><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># IDが一致する要素を返す</span></span><br><span class="line">el = driver.find_element(<span class="symbol">:id</span>, <span class="string">'some_id'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># クラス名が一致する要素を返す</span></span><br><span class="line">el = driver.find_element(<span class="symbol">:class</span>, <span class="string">'some_class_name'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTMLタグの名前が一致する</span></span><br><span class="line">el = driver.find_element(<span class="symbol">:tag_name</span>, <span class="string">'div'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># アンカーテキスト(リンクテキスト)が一致する</span></span><br><span class="line">el = driver.find_element(<span class="symbol">:link</span>, <span class="string">'anchor_text'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># XPath形式で要素を指定する</span></span><br><span class="line">el = driver.find_element(<span class="symbol">:xpath</span>, <span class="string">"//a[@href='/login']"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># cssセレクターで要素を指定する</span></span><br><span class="line">el = driver.find_element(<span class="symbol">:css</span>, <span class="string">'#some_id'</span>)</span><br></pre></td></tr></table></figure><h2 id="要素を使った操作"><a href="#要素を使った操作" class="headerlink" title="要素を使った操作"></a>要素を使った操作</h2><h3 id="要素のテキストを取得"><a href="#要素のテキストを取得" class="headerlink" title="要素のテキストを取得"></a>要素のテキストを取得</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">driver.find_element(<span class="symbol">:id</span>, <span class="string">'some_id'</span>).text</span><br></pre></td></tr></table></figure><h3 id="要素の属性値の取得"><a href="#要素の属性値の取得" class="headerlink" title="要素の属性値の取得"></a>要素の属性値の取得</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">driver.find_element(<span class="symbol">:id</span>, <span class="string">'some_id'</span>).attribute(<span class="string">'class'</span>)</span><br></pre></td></tr></table></figure><h3 id="クリック、テキスト入力"><a href="#クリック、テキスト入力" class="headerlink" title="クリック、テキスト入力"></a>クリック、テキスト入力</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ボタンやリンクをクリックする</span></span><br><span class="line">driver.find_element(<span class="symbol">:id</span>, <span class="string">'some_id'</span>).click</span><br><span class="line"></span><br><span class="line"><span class="comment"># テキストフィールドに値を入れる</span></span><br><span class="line">driver.find_element(<span class="symbol">:id</span>, <span class="string">'some_field_id'</span>).send_keys <span class="string">'テキスト入力'</span></span><br><span class="line">driver.find_element(<span class="symbol">:id</span>, <span class="string">'some_field_id'</span>).set <span class="string">'テキスト入力'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># テキストフィールドの値を空にする</span></span><br><span class="line"><span class="comment"># ※ ただし、type=fileの場合はclearメソッドでエラーになるので注意</span></span><br><span class="line">driver.find_element(<span class="symbol">:id</span>, <span class="string">'some_field_id'</span>).clear</span><br></pre></td></tr></table></figure><h3 id="キーボードの操作"><a href="#キーボードの操作" class="headerlink" title="キーボードの操作"></a>キーボードの操作</h3><p>キーボードで<code>enter</code>を実行する場合はこちら。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">driver.find_element(<span class="symbol">:id</span>, <span class="string">'#q_name'</span>).native.send_keys(<span class="symbol">:return</span>)</span><br><span class="line">driver.find_element(<span class="symbol">:id</span>, <span class="string">'#q_name'</span>).native.send_keys(<span class="symbol">:enter</span>)</span><br></pre></td></tr></table></figure><h3 id="チェックボックス・ラジオボタン"><a href="#チェックボックス・ラジオボタン" class="headerlink" title="チェックボックス・ラジオボタン"></a>チェックボックス・ラジオボタン</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># チェックボックス/ラジオボタンを選択する</span></span><br><span class="line"><span class="comment"># ラジオボタンがセットされた場合にのみ、チェックをクリック</span></span><br><span class="line"><span class="keyword">unless</span> driver.find_element(<span class="symbol">:id</span>, <span class="string">'some_radio_id'</span>).selected?</span><br><span class="line">  driver.find_element(<span class="symbol">:id</span>, <span class="string">'some_radio_id'</span>).click</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># チェックボックス/ラジオボタンの選択を解除する</span></span><br><span class="line">driver.find_element(<span class="symbol">:id</span>, <span class="string">'some_check_box'</span>).clear</span><br></pre></td></tr></table></figure><h3 id="セレクトタグ"><a href="#セレクトタグ" class="headerlink" title="セレクトタグ"></a>セレクトタグ</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># セレクトタグの取得</span></span><br><span class="line">select = Selenium::WebDriver::Support::Select.new(driver.find_element(<span class="symbol">:id</span>, <span class="string">'some_select_id'</span>))</span><br><span class="line">select.select_by(<span class="symbol">:value</span>, <span class="string">'value1'</span>)    <span class="comment"># valueの値で選択</span></span><br><span class="line">select.select_by(<span class="symbol">:text</span>, <span class="string">'表示テキスト'</span>) <span class="comment"># 表示テキストで選択</span></span><br><span class="line">select.select_by(<span class="symbol">:index</span>, <span class="number">3</span>)           <span class="comment"># インデックス（0始まり）で選択</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># すべてのオプションを取得</span></span><br><span class="line">all_options = select.find_elements(<span class="symbol">:tag_name</span>, <span class="string">'option'</span>)</span><br></pre></td></tr></table></figure><h3 id="要素の存在確認"><a href="#要素の存在確認" class="headerlink" title="要素の存在確認"></a>要素の存在確認</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1件以上あれば要素が存在すると判定</span></span><br><span class="line">driver.find_elements(<span class="symbol">:id</span>, <span class="string">'some_id'</span>).size &gt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_some_id?</span></span></span><br><span class="line">  driver.find_element(<span class="symbol">:id</span>, <span class="string">'some_id'</span>)</span><br><span class="line">  <span class="literal">true</span></span><br><span class="line"><span class="keyword">rescue</span></span><br><span class="line">  <span class="literal">false</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="Driverに対する操作"><a href="#Driverに対する操作" class="headerlink" title="Driverに対する操作"></a>Driverに対する操作</h2><h3 id="JavaScriptの実行"><a href="#JavaScriptの実行" class="headerlink" title="JavaScriptの実行"></a>JavaScriptの実行</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">driver.execute_script(<span class="string">'return window.location.pathname'</span>)</span><br></pre></td></tr></table></figure><h3 id="要素の表示を待つ"><a href="#要素の表示を待つ" class="headerlink" title="要素の表示を待つ"></a>要素の表示を待つ</h3><p>特定の要素が表示されるまで10秒を上限にwait(待ち時間を設定)ができます。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">wait = Selenium::WebDriver::Wait.new(<span class="symbol">timeout:</span> <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要素が現れるまで待つ</span></span><br><span class="line">wait.new(<span class="symbol">timeout:</span> <span class="number">10</span>).<span class="keyword">until</span> &#123; driver.find_element(<span class="symbol">:id</span>, <span class="string">'some_id'</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要素が表示されるまで待つ</span></span><br><span class="line">wait.<span class="keyword">until</span> &#123; driver.find_element(<span class="symbol">:id</span>, <span class="string">'some_id'</span>).displayed? &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要素のテキストが期待される値になるまで待つ</span></span><br><span class="line">wait.<span class="keyword">until</span> &#123; driver.find_element(<span class="symbol">:id</span>, <span class="string">'some_id'</span>).text == <span class="string">'Ajaxで生成されたテキスト'</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="find-elementのタイムアウトを設定する"><a href="#find-elementのタイムアウトを設定する" class="headerlink" title="find_elementのタイムアウトを設定する"></a>find_elementのタイムアウトを設定する</h3><p>find_elementのタイムアウト時間は<code>implicit_wait</code>で設定できます。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">driver.manage.timeouts.implicit_wait = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">driver.get <span class="string">'http://google.com'</span></span><br><span class="line">el = driver.find_element(<span class="symbol">:id</span>, <span class="string">'some_id'</span>)</span><br></pre></td></tr></table></figure><p>Capybaraの場合はcssが表示されるまで待ってくれますが、Seleniumの場合は表示されるまでは待ってくれないので注意して使ってください。</p><h3 id="Windowを移動する"><a href="#Windowを移動する" class="headerlink" title="Windowを移動する"></a>Windowを移動する</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">window_titles = driver.window_handles.map <span class="keyword">do</span> <span class="params">|w|</span></span><br><span class="line">  driver.switch_to.window(w)</span><br><span class="line">  [w, driver.title]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">selected_id = window_titles.find &#123; <span class="params">|e1, e2|</span> e2 == <span class="string">'取得したいウィンドウのタイトル'</span> &#125;.first</span><br><span class="line">raise <span class="string">'Not found window'</span> <span class="keyword">unless</span> selected_id</span><br><span class="line"></span><br><span class="line">driver.switch_to.window(selected_id)</span><br></pre></td></tr></table></figure><h3 id="JSのダイアログの操作"><a href="#JSのダイアログの操作" class="headerlink" title="JSのダイアログの操作"></a>JSのダイアログの操作</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">a = driver.switch_to.alert</span><br><span class="line"><span class="keyword">if</span> a.text == <span class="string">'期待したテキストがある'</span></span><br><span class="line">  a.dismiss</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  a.accept</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="スクリーンショットを撮る"><a href="#スクリーンショットを撮る" class="headerlink" title="スクリーンショットを撮る"></a>スクリーンショットを撮る</h2><p>スクリーンショットの取得方法です。private APIのため動作保証はありませんのでご注意ください。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">driver.save_screenshot(<span class="string">'path/to/filename.png'</span>)</span><br></pre></td></tr></table></figure><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="https://gist.github.com/huangzhichong/3284966" target="_blank" rel="noopener">Selenium Webdriver CheatSheet</a></li><li><a href="https://goo.gl/8HRBvH" target="_blank" rel="noopener">ruby - Alternate way to switch to a window handle using Selenium Webdriver</a></li><li><a href="https://stackoverflow.com/questions/10866946/how-do-i-simulate-hitting-enter-in-an-input-field-with-capybara-and-chromedriver" target="_blank" rel="noopener">How do I simulate hitting enter in an input field with Capybara and ChromeDriver?</a></li><li><a href="https://qiita.com/sanryuu/items/030871af6281db4d8839" target="_blank" rel="noopener">Capybaraでfill_inを使わずにテキストボックスに入力する</a></li><li><a href="https://qiita.com/tomerun/items/9cb81d7a98150ff22f53" target="_blank" rel="noopener">RubyでSeleniumを使ってスクレイピング</a></li></ul><h2 id="Special-Thanks"><a href="#Special-Thanks" class="headerlink" title="Special Thanks!"></a>Special Thanks!</h2><p>職場のテストエンジニアさんに参考になる意見をたくさんいただきました。ありがとうございます！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RubyからSeleniumを操作する際に使うコードのチートシートです。&lt;br&gt;Seleniumを使うことでブラウザを操作した表示テストを行ったり、ブラウザをつかった操作の自動化ができます。&lt;/p&gt;
&lt;h2 id=&quot;ブラウザを開く&quot;&gt;&lt;a href=&quot;#ブラウザを開く&quot; c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>知っておくと役に立つCSSの便利なTips</title>
    <link href="http://morizyun.github.io/blog/css-tips-square-thumbnail/"/>
    <id>http://morizyun.github.io/blog/css-tips-square-thumbnail/</id>
    <published>2017-09-25T15:00:00.000Z</published>
    <updated>2017-10-14T00:39:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSSを使っている中で、これは便利と思えた要素をいくつか紹介します。</p><ul><li>画像から正方形のサムネイルを切り出す</li><li>複数行の文字列を省略して「<code>...</code>」を付ける</li><li>要素の幅を片方固定サイズ、別の方を可変にする</li><li>Placeholderの文字色を替える</li></ul><a id="more"></a><h2 id="画像から正方形のサムネイルを切り出す"><a href="#画像から正方形のサムネイルを切り出す" class="headerlink" title="画像から正方形のサムネイルを切り出す"></a>画像から正方形のサムネイルを切り出す</h2><p>縦横比が正方形でない画像から正方形の画像を切り出す手順です。HTML側は次のようになります。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"square-box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-box"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"thumb"</span> <span class="attr">src</span>=<span class="string">"/path/thumbnail.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS側は次のようになります。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.square-box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.square-box</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.square-box</span> <span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.thumb</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.center-box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="複数行の文字列を省略して「-」を付ける"><a href="#複数行の文字列を省略して「-」を付ける" class="headerlink" title="複数行の文字列を省略して「...」を付ける"></a>複数行の文字列を省略して「<code>...</code>」を付ける</h2><p>複数行の文字列を一定のサイズで区切ってそれ以降は「…」を付ける方法です。まずHTMLは次のようになります。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Obcaecati, voluptatibus, officiis debitis neque accusamus iure repudiandae voluptate reiciendis facere voluptates ipsum ipsam soluta ullam fugit minus harum esse corrupti aut.Lorem ipsum dolor sit amet, consectetur adipisicing elit. Obcaecati, voluptatibus, officiis debitis neque accusamus iure repudiandae voluptate reiciendis facere voluptates ipsum ipsam soluta ullam fugit minus harum esse corrupti aut.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS(SCSS)側は次のようになります。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Variables</span><br><span class="line">$font-size-base: 14px;</span><br><span class="line">$line-height-computed: 1.4;</span><br><span class="line">$lines-to-show: 3;</span><br><span class="line"></span><br><span class="line">// Reset</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Multiline text with ellipsis</span><br><span class="line">// Supported IE and Firefox</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  p &#123;</span><br><span class="line">    font-size: $font-size-base;</span><br><span class="line">    height: $font-size-base * $line-height-computed * $lines-to-show;</span><br><span class="line">    line-height: $line-height-computed;</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line">    &amp;<span class="selector-pseudo">:before</span>,</span><br><span class="line">    &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">"..."</span>;</span><br><span class="line">      <span class="attribute">top</span>: $font-size-base * $line-height-computed * ($lines-to-show - <span class="number">1</span>);</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="要素の幅を片方固定サイズ、別の方を可変にする"><a href="#要素の幅を片方固定サイズ、別の方を可変にする" class="headerlink" title="要素の幅を片方固定サイズ、別の方を可変にする"></a>要素の幅を片方固定サイズ、別の方を可変にする</h2><p>レスポンシブデザインで左右の要素がある場合に一方を固定サイズで指定して、もう一方の要素のサイズをデバイスに合わせて可変にしたい場合は次にように記述します。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">-moz-calc</span>(100% - 110px);</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">-webkit-calc</span>(100% - 110px);</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">-o-calc</span>(100% - 110px);</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 110px);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Placeholderの文字色を替える"><a href="#Placeholderの文字色を替える" class="headerlink" title="Placeholderの文字色を替える"></a>Placeholderの文字色を替える</h2><p>フォームのinputタグの中のPlaceholderの文字色を変えたい場合は次のように記述します。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123; <span class="comment">/* Chrome/Opera/Safari */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::-moz-placeholder</span> &#123; <span class="comment">/* Firefox 19+ */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:-ms-input-placeholder</span> &#123; <span class="comment">/* IE 10+ */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:-moz-placeholder</span> &#123; <span class="comment">/* Firefox 18- */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="大文字・小文字指定：text-transform"><a href="#大文字・小文字指定：text-transform" class="headerlink" title="大文字・小文字指定：text-transform"></a>大文字・小文字指定：<code>text-transform</code></h2><p>CSSでテキストの大文字、小文字等を制御するのが<code>text-transform</code>です。</p><table><thead><tr><th>オプション</th><th>説明</th></tr></thead><tbody><tr><td><code>none</code></td><td>記述したとおりに表示</td></tr><tr><td><code>capitalize</code></td><td>単語の先頭文字を大文字で表示</td></tr><tr><td><code>lowercase</code></td><td>すべてを小文字で表示</td></tr><tr><td><code>uppercase</code></td><td>すべてを大文字で表示</td></tr></tbody></table><p>出力は次の用になります。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定なし(none)の場合</span></span><br><span class="line">John due</span><br><span class="line"></span><br><span class="line"><span class="comment"># capitalizeの場合</span></span><br><span class="line">John Due</span><br><span class="line"></span><br><span class="line"><span class="comment"># lowercaseの場合</span></span><br><span class="line">john due</span><br><span class="line"></span><br><span class="line"><span class="comment"># uppercase</span></span><br><span class="line">JOHN DUE</span><br></pre></td></tr></table></figure><h2 id="横スクロールナビを組むためのCSS"><a href="#横スクロールナビを組むためのCSS" class="headerlink" title="横スクロールナビを組むためのCSS"></a>横スクロールナビを組むためのCSS</h2><p>Appleのスマートフォンサイトのような横スクロールのナビゲーションバーのサンプルです。</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"nav-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav-inner"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Grape<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Pineapple<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Pear<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.nav-container</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3em</span>; <span class="comment">/* 可視領域の高さ */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav-container</span> <span class="selector-class">.nav-inner</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">5em</span>; <span class="comment">/* 横スクロールする理屈上の高さ */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow-x</span>: auto;</span><br><span class="line">  <span class="attribute">-webkit-overflow-scrolling</span>: touch;  <span class="comment">/* 慣性スクロール */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav-container</span> <span class="selector-class">.list</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-table;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav-container</span> <span class="selector-class">.list</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="横スクロールでテキストを表示するためのCSS"><a href="#横スクロールでテキストを表示するためのCSS" class="headerlink" title="横スクロールでテキストを表示するためのCSS"></a>横スクロールでテキストを表示するためのCSS</h2><p>上記とほぼ同じですが、折り返しがあるとうまくいかないパターンがあったので念の為メモ。</p><h3 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text-inner"</span>&gt;</span></span><br><span class="line">    Apple, Banana, Grape, Pineapple, Pear</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text-container</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3em</span>; <span class="comment">/* 可視領域の高さ */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text-container</span> <span class="selector-class">.text-inner</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">5em</span>; <span class="comment">/* 横スクロールする理屈上の高さ */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow-x</span>: auto;</span><br><span class="line">  <span class="attribute">-webkit-overflow-scrolling</span>: touch;  <span class="comment">/* 慣性スクロール */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="http://chaika.hatenablog.com/entry/2016/07/15/163004" target="_blank" rel="noopener">HTML・CSS レスポンシブな正方形を作って、その中央にコンテンツを表示させたい</a></li><li><a href="https://tech.recruit-mp.co.jp/front-end/tips-ellipsis/" target="_blank" rel="noopener">【複数行にも対応】長過ぎる文字列を省略して末尾を三点リーダー（…）にする方法いろいろ – NET BIZ DIV. TECH BLOG</a></li><li><a href="http://www.htmq.com/style/text-transform.shtml" target="_blank" rel="noopener">text-transform－スタイルシートリファレンス</a></li><li><a href="https://css-tricks.com/almanac/selectors/p/placeholder/" target="_blank" rel="noopener">::placeholder</a></li><li><a href="https://qiita.com/volkuwabara/items/412a2e48d813f2f52537" target="_blank" rel="noopener">https://qiita.com/volkuwabara/items/412a2e48d813f2f52537</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSSを使っている中で、これは便利と思えた要素をいくつか紹介します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;画像から正方形のサムネイルを切り出す&lt;/li&gt;
&lt;li&gt;複数行の文字列を省略して「&lt;code&gt;...&lt;/code&gt;」を付ける&lt;/li&gt;
&lt;li&gt;要素の幅を片方固定サイズ、別の方を可変にする&lt;/li&gt;
&lt;li&gt;Placeholderの文字色を替える&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://morizyun.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://morizyun.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQLのIndex入門</title>
    <link href="http://morizyun.github.io/blog/postgresql-index-planner-optimize/"/>
    <id>http://morizyun.github.io/blog/postgresql-index-planner-optimize/</id>
    <published>2017-09-19T15:00:00.000Z</published>
    <updated>2017-09-20T23:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>PostgreSQLでのSELECTなどで対象のレコードを早く検索するための「Index(インデックス、索引)」についてのまとめです。</p><a id="more"></a><h2 id="お勧めスライド：PostgreSQLクエリ実行の基礎知識"><a href="#お勧めスライド：PostgreSQLクエリ実行の基礎知識" class="headerlink" title="お勧めスライド：PostgreSQLクエリ実行の基礎知識"></a>お勧めスライド：PostgreSQLクエリ実行の基礎知識</h2><iframe src="//www.slideshare.net/slideshow/embed_code/key/e75pW5tf1PgMSN" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe><p>PostgreSQLについて丁寧な解説がされているスライドです。PostgreSQLの実行計画を理解するのにすごく参考になりました！</p><h2 id="Index作成までの流れ"><a href="#Index作成までの流れ" class="headerlink" title="Index作成までの流れ"></a>Index作成までの流れ</h2><ul><li><strong>いつ</strong><ul><li>新規テーブルの作成時</li><li>DBのパフォーマンス・チューニングの際</li></ul></li><li><strong>どうやって</strong><ul><li>SQLの実行ログから、実行回数が多い &amp; 実行に時間がかかるSQLを探す</li><li>EXPLAINで実行計画を元に最適なindexを探す</li><li>代替案としてサマリテーブルを作ったり、キャッシュをもつことも検討</li></ul></li></ul><h2 id="Index作成"><a href="#Index作成" class="headerlink" title="Index作成"></a>Index作成</h2><p>SQLの<code>CREATE INDEX</code>でIndexを作成できます。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- レコードがユニークではないインデックスの場合</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_name</span><br><span class="line"><span class="keyword">ON</span> table_name (column1, column2, ...);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- レコードがユニークなインデックスの場合</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index_name</span><br><span class="line"><span class="keyword">ON</span> table_name (column1, column2, ...);</span><br></pre></td></tr></table></figure><h2 id="実行計画の取得：EXPLAIN"><a href="#実行計画の取得：EXPLAIN" class="headerlink" title="実行計画の取得：EXPLAIN"></a>実行計画の取得：<code>EXPLAIN</code></h2><p>DBはSQLクエリを解析して、最も効率のよい問い合わせ計画(実行計画)を作成し、エグゼキュータがデータを取得します。<br>SQLに<code>EXPLAIN</code>を付けるとDBの作成した実行計画を取得できます。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span></span><br><span class="line">  カラム名<span class="number">1</span>,</span><br><span class="line">  カラム名<span class="number">2</span>,</span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  テーブル名</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  条件...;</span><br></pre></td></tr></table></figure><p>DBのパフォーマンスを上げるためには、データの性質によって最適な実行計画を立てるようにインデックスで手助けすることが必要です。</p><h2 id="実際の行数の取得：EXPLAIN-ANALYZE"><a href="#実際の行数の取得：EXPLAIN-ANALYZE" class="headerlink" title="実際の行数の取得：EXPLAIN ANALYZE"></a>実際の行数の取得：<code>EXPLAIN ANALYZE</code></h2><p>実際の実行結果等の取得は<code>EXPLAIN ANALYZE</code>を使います。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">ANALYZE</span> <span class="keyword">SELECT</span></span><br><span class="line">  カラム名<span class="number">1</span>,</span><br><span class="line">  カラム名<span class="number">2</span>,</span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  テーブル名</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  条件...;</span><br></pre></td></tr></table></figure><p>実行時間や、検索した行数、ループの回数を取得できます。</p><h2 id="EXPLAINの概要"><a href="#EXPLAINの概要" class="headerlink" title="EXPLAINの概要"></a>EXPLAINの概要</h2><p>EXPLAINコマンドで出てくる項目の概要です。</p><h3 id="Cost"><a href="#Cost" class="headerlink" title="Cost"></a>Cost</h3><ul><li>コストは複数の実行計画から、最適な実行計画を選定をするための指標</li><li>初期コストは最初の行を返すまでの値。トータルコストは最後の行を返すまでの値。重要なのはトータルコスト</li><li>コストは推定値。値はシーケンシャルI/Oで1ページを読み込むコストを1.0とした場合の相対値</li></ul><table><thead><tr><th>オプション</th><th>説明</th><th>既定値</th></tr></thead><tbody><tr><td><code>seq_page_cost</code></td><td>シーケンシャル読み込み1回</td><td>1.00</td></tr><tr><td><code>random_page_cost</code></td><td>ランダム読み込み1回</td><td>4.00</td></tr><tr><td><code>cpu_tuple_cost</code></td><td>行の処理1回</td><td>0.01</td></tr><tr><td><code>cpu_index_tuple_cost</code></td><td>インデックスの処理1回</td><td>0.005</td></tr><tr><td><code>cpu_operator_cost</code></td><td>計算1回</td><td>0.0025</td></tr></tbody></table><h3 id="Rows"><a href="#Rows" class="headerlink" title="Rows"></a>Rows</h3><ul><li>推定された行数の表示</li><li>実際の数値とかけ離れている場合はAnalyze/Vacuumが必要</li></ul><h3 id="Width"><a href="#Width" class="headerlink" title="Width"></a>Width</h3><ul><li>このレベルでの推定された入力のサイズ。重要ではない</li></ul><h3 id="Explain演算子"><a href="#Explain演算子" class="headerlink" title="Explain演算子"></a>Explain演算子</h3><ul><li>Explain演算子とは、内部的な処理の計算タイプ</li><li>プランナーが統計情報と、<code>work_mem</code>の大きさをもとに最適なプランを推定する</li></ul><table><thead><tr><th>分類</th><th>演算子</th><th>概要</th></tr></thead><tbody><tr><td>テーブルスキャン</td><td><code>Seq scan</code></td><td>インデックスを使用せず、テーブルを最初から最後までシーケンシャルにアクセス。候補行が多い場合に有効</td></tr><tr><td></td><td><code>Index scan</code></td><td>インデックスを使用してスキャン。候補行が少ない場合に有効。ランダムアクセス</td></tr><tr><td></td><td><code>Bitmap scan</code></td><td>ビットマップを使用してスキャン。インデックスを使ってBitMapを作りORやAND演算に利用する</td></tr><tr><td></td><td><code>Index only scan</code></td><td>問い合わせがインデックスに含まれるカラムのみでのスキャン。テーブルにアクセスしないので高速だが、Visibility Mapが有効でないとだめ</td></tr><tr><td></td><td><code>Tid scan</code></td><td>検索結果がタプルID(ctid)のスキャン。ctid(行の物理的位置)を条件に設定した場合に有効</td></tr><tr><td>その他スキャン</td><td><code>Function scan</code></td><td>関数がデータを収集した結果をスキャン</td></tr><tr><td>テーブルの結合</td><td><code>Nested Loop</code></td><td>Nested Loop結合を行う(後述)</td></tr><tr><td></td><td><code>Merge Join</code></td><td>ソート・マージ結合を行う</td></tr><tr><td></td><td><code>Hash Join</code></td><td>ハッシュ結合を行う</td></tr><tr><td>検索結果に対し作用</td><td><code>Group</code></td><td><code>GROUP BY</code></td></tr><tr><td></td><td><code>limit</code></td><td><code>LIMIT</code>、<code>OFFSET</code></td></tr><tr><td></td><td><code>Uniq</code></td><td><code>DISTINCT</code></td></tr><tr><td></td><td><code>Aggregate</code></td><td><code>COUNT</code>、<code>SUM</code>、<code>MAX</code>…</td></tr><tr><td></td><td><code>Group Aggregate</code></td><td>集合関数に<code>GROUP BY</code>を適用してより大きな結果セットを得る</td></tr><tr><td></td><td><code>Result</code></td><td>非テーブルの問い合わせ</td></tr><tr><td></td><td><code>Append</code></td><td><code>UNION</code></td></tr><tr><td></td><td><code>SetOp</code></td><td><code>INTERSECT</code>(積)、<code>EXCEPT</code>(和)</td></tr><tr><td>そのほかの処理補助</td><td><code>Sort</code></td><td>明示的な<code>ORDER BY</code>、暗黙的な<code>Sort-Merge Join</code>など</td></tr></tbody></table><h3 id="プランナーの動作：問い合せ最適化インサイド"><a href="#プランナーの動作：問い合せ最適化インサイド" class="headerlink" title="プランナーの動作：問い合せ最適化インサイド"></a>プランナーの動作：問い合せ最適化インサイド</h3><p>プランナーの中身の動作がわかりやすくまとまっています。</p><iframe src="//www.slideshare.net/slideshow/embed_code/key/EJLjgYBISC02nU?startSlide=15" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe><h4 id="NestLoop：二重ループ"><a href="#NestLoop：二重ループ" class="headerlink" title="NestLoop：二重ループ"></a>NestLoop：二重ループ</h4><ul><li>外側1行毎にループを1週</li><li>外側ループ回数が少ない場合に有効</li><li>内側ループはIndexScanが望ましい</li></ul><h4 id="MergeJoin"><a href="#MergeJoin" class="headerlink" title="MergeJoin"></a>MergeJoin</h4><ul><li>ソート済の2つのテーブルを同時にスキャン</li><li>双方の行数が多い場合に有効</li><li>B−treeインデックスがあると望ましい</li></ul><h4 id="HashJoin"><a href="#HashJoin" class="headerlink" title="HashJoin"></a>HashJoin</h4><ul><li>内側ループのハッシュを作成、外側ループの行と突き合わせ</li><li>ハッシュがメモリに収まる場合に有効</li></ul><h4 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h4><ul><li>データが作業メモリ(work_mem)に含まれればクイックソート</li><li>作業メモリに収まらなければマージソート。DISK I/Oが発生するため低速</li></ul><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><ul><li>ハッシュ関数によって型値を整数化</li></ul><h4 id="Aggregate"><a href="#Aggregate" class="headerlink" title="Aggregate"></a>Aggregate</h4><ul><li>複数行を1行に集約</li><li><code>GROUP BY</code>や<code>DISTINCT</code></li></ul><h2 id="Indexを貼るコツ"><a href="#Indexを貼るコツ" class="headerlink" title="Indexを貼るコツ"></a>Indexを貼るコツ</h2><ul><li>複合INDEXを貼るときは、極力UNIQUEになるように</li><li>ある程度汎用的に作る、あまり使わない条件は含めない</li><li>複合インデックスにsort順を含める際は最後のカラムにする</li><li>INDEXを貼るときはカラム型の見直し、SQLのチューニングも合わせてやる</li><li>更新頻度が多いテーブルにはあまり貼らない(Indexの更新コストを意識する)</li><li>Indexは<code>NULL</code>値を含まないので注意</li></ul><h2 id="PostgreSQL-9-6対応ドキュメント"><a href="#PostgreSQL-9-6対応ドキュメント" class="headerlink" title="PostgreSQL 9.6対応ドキュメント"></a>PostgreSQL 9.6対応ドキュメント</h2><p>PostgreSQL 9.6対応の200ページ以上の電子書籍的なドキュメント。説明も丁寧でわかりやすいです。</p><p><strong><a href="http://h50146.www5.hpe.com/products/software/oe/linux/mainstream/support/lcc/pdf/PostgreSQL_Internals_1_for_PostgreSQL96_ja_20170211-1.pdf" target="_blank" rel="noopener">PostgreSQL_Internals_1_for_PostgreSQL96_ja_20170211-1.pdf</a></strong></p><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="http://taityo-diary.hatenablog.jp/entry/2017/09/10/091729" target="_blank" rel="noopener">PostgreSQLの実行計画を読み解くための参考資料集</a></li><li><a href="http://dbnote.web.fc2.com/note_datatype_systemcol1_oid_and_ctid.html" target="_blank" rel="noopener">PostgreSQLスキルアップノート</a></li><li><a href="http://itpro.nikkeibp.co.jp/members/ITPro/oss/20050514/160833/?ST=oss&amp;P=1" target="_blank" rel="noopener">新しい実行プラン・タイプによるPostgreSQL 8.1の性能向上</a></li><li><a href="http://www.atmarkit.co.jp/ait/articles/1307/12/news004.html" target="_blank" rel="noopener">インデックスオンリースキャンを試す</a></li><li><a href="http://qiita.com/C058/items/1c9c57f634ebf54d99bb" target="_blank" rel="noopener">MySQLでインデックスを貼る時に読みたいページまとめ(初心者向け）</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PostgreSQLでのSELECTなどで対象のレコードを早く検索するための「Index(インデックス、索引)」についてのまとめです。&lt;/p&gt;
    
    </summary>
    
      <category term="PostgreSQL" scheme="http://morizyun.github.io/categories/PostgreSQL/"/>
    
    
      <category term="PostgreSQL" scheme="http://morizyun.github.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>Immutable.jsチートシート</title>
    <link href="http://morizyun.github.io/blog/node-js-npm-library-immutable-js/"/>
    <id>http://morizyun.github.io/blog/node-js-npm-library-immutable-js/</id>
    <published>2017-09-14T15:00:00.000Z</published>
    <updated>2017-09-14T22:45:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>React.jsと一緒に使うことで、immutableなオブジェクトを扱うことができ、パフォーマンスが向上する「<a href="https://github.com/facebook/immutable-js/" target="_blank" rel="noopener">facebook/immutable-js</a>」の紹介と簡単なチートシートです。</p><a id="more"></a><h2 id="Immutable-jsとは"><a href="#Immutable-jsとは" class="headerlink" title="Immutable.jsとは"></a>Immutable.jsとは</h2><p>Immutable.jsはimmutableなデータ構造を扱うJavaScriptのライブラリです。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="built_in">Map</span> &#125; = <span class="built_in">require</span>(<span class="string">'immutable'</span>)</span><br><span class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// map1からbを変更した別のオブジェクトを生成</span></span><br><span class="line"><span class="keyword">const</span> map2 = map1.set(<span class="string">'b'</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// map1のオブジェクトはそのまま</span></span><br><span class="line">map1.get(<span class="string">'b'</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="Immutable-jsをReactに導入"><a href="#Immutable-jsをReactに導入" class="headerlink" title="Immutable.jsをReactに導入"></a>Immutable.jsをReactに導入</h2><p>ReactにImmutable.jsを導入することで変更ロジックをモデルの中にまとめ、保守性を向上できます。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;PostEditor</span><br><span class="line">  post=&#123;<span class="keyword">this</span>.props.post&#125;</span><br><span class="line">  onChange=&#123;<span class="keyword">this</span>.props.onChange&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>Immutable.jsのない通常のReact Component：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostEditor</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  addTag(tag) &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onChange(<span class="keyword">this</span>.props.post.addTag(tag));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeTag(tag) &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onChange(<span class="keyword">this</span>.props.post.removeTag(tag));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>this.props.onChange</code>のメソッドでstateの更新を行います。</p><p>Immutable.jsを含んだコード：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Record, List &#125; <span class="keyword">from</span> <span class="string">'immutable'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PostRecord = Record(&#123;<span class="attr">title</span>: <span class="string">''</span>, <span class="attr">content</span>: <span class="string">''</span>, <span class="attr">tags</span>: List() &#125;);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">PostRecord</span> </span>&#123;</span><br><span class="line">  addTag(tag) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.set(<span class="string">'tags'</span>, <span class="keyword">this</span>.tags.push(tag));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeTag(tag) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.set(<span class="string">'tags'</span>, <span class="keyword">this</span>.tags.filter(<span class="function"><span class="params">t</span> =&gt;</span> t !== tag));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新しいオブジェクトを生成して、それを返り値にします。ロジックがImmutable.jsのコード内に集約されるのでテストが見通しが良くなります。</p><h2 id="チートシート"><a href="#チートシート" class="headerlink" title="チートシート"></a>チートシート</h2><p>Immutable.jsでよく使う型のチートシートです。</p><h3 id="Record型の更新"><a href="#Record型の更新" class="headerlink" title="Record型の更新"></a>Record型の更新</h3><p><code>Record</code>型はJSのObjectにフィールドとそのデフォルト値がついたしくみです。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新規オブジェクトの生成</span></span><br><span class="line"><span class="keyword">const</span> ABRecord = Record(&#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> record1 = <span class="keyword">new</span> ABRecord(&#123; <span class="attr">b</span>: <span class="number">3</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 対象のフィールドの取得</span></span><br><span class="line">record1.get(<span class="string">'a'</span>); <span class="comment">//=&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 対象フィールドの削除</span></span><br><span class="line"><span class="keyword">const</span> record2 = record1.remove(<span class="string">'b'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 独自メソッドの追加も可能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ABRecord</span> <span class="keyword">extends</span> <span class="title">Record</span> </span>&#123;</span><br><span class="line">  getAB() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.get(<span class="string">'a'</span>) + <span class="keyword">this</span>.get(<span class="string">'b'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> record3 = <span class="keyword">new</span> ABRecord(&#123;<span class="attr">b</span>: <span class="number">3</span>&#125;)</span><br><span class="line">record3.getAB(); <span class="comment">//=&gt; 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特定の1つのカラムの更新</span></span><br><span class="line">ImmutableObj.set(<span class="string">'key'</span>, <span class="string">'value'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 複数カラムの更新</span></span><br><span class="line"><span class="keyword">const</span> newContent = oldContext.merge(&#123;</span><br><span class="line">    <span class="string">"logged"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"error"</span>: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Map型について"><a href="#Map型について" class="headerlink" title="Map型について"></a>Map型について</h3><p><code>Map</code>型はkeyとvalueのセットの構造です。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map1 = <span class="built_in">Map</span>(&#123;<span class="attr">a</span>: <span class="string">'hoge'</span>, <span class="attr">b</span>: <span class="string">'fuga'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// aの値を取得</span></span><br><span class="line">map1.get(<span class="string">'a'</span>); <span class="comment">//=&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// cの値を追加</span></span><br><span class="line"><span class="keyword">const</span> map2 = map1.set(<span class="string">'c'</span>, <span class="string">'piyo'</span>); <span class="comment">//=&gt; &#123; a: "hoge", b: "fuga", c: "piyo" &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 複数の要素の更新</span></span><br><span class="line"><span class="keyword">const</span> map3 = map2.merge(&#123; <span class="attr">d</span>: <span class="string">'tora'</span>, <span class="attr">e</span>: <span class="string">'goza'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ループ処理は entrySeq entryKey</span></span><br><span class="line">map2.entrySeq().forEach(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`key: <span class="subst">$&#123;e[<span class="number">0</span>]&#125;</span>, value: <span class="subst">$&#123;e[<span class="number">1</span>]&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="List型について"><a href="#List型について" class="headerlink" title="List型について"></a>List型について</h3><p><code>List</code>型の基本的な使い方は次のとおりです。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// List 生成</span></span><br><span class="line"><span class="keyword">const</span> list1 = Immutable.List.of(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// List の末尾への追加</span></span><br><span class="line"><span class="keyword">const</span> list2 = list1.push(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">list2.size; <span class="comment">//=&gt; 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// List の先頭への追加</span></span><br><span class="line"><span class="keyword">const</span> list3 = list2.unshift(<span class="number">0</span>);</span><br><span class="line">list3.size <span class="comment">//=&gt; 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// List 同士の結合</span></span><br><span class="line"><span class="keyword">var</span> list4 = list1.concat(list2, list3);</span><br><span class="line">list4.size <span class="comment">//=&gt; 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array への変換</span></span><br><span class="line">list1.toArray(); <span class="comment">//=&gt; [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Objectへの変換</span></span><br><span class="line">list1.map(<span class="function"><span class="params">i</span> =&gt;</span> i + <span class="number">1</span>).toObject();</span><br><span class="line"><span class="comment">// &#123; 0: 2,</span></span><br><span class="line"><span class="comment">//   1: 3 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Listの中にMapがあったり、ネストする場合は toJSを使うと良さそう</span></span><br><span class="line">list1.map(<span class="function"><span class="params">i</span> =&gt;</span> i + <span class="number">1</span>).toJS();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ネストされたマップへの追加</span></span><br><span class="line"><span class="keyword">const</span> list5 = List([ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, List([ <span class="number">3</span>, <span class="number">4</span> ])])</span><br><span class="line">list5.setIn([<span class="number">3</span>, <span class="number">0</span>], <span class="number">999</span>);</span><br></pre></td></tr></table></figure><h2 id="参照リンク"><a href="#参照リンク" class="headerlink" title="参照リンク"></a>参照リンク</h2><ul><li><a href="https://stackoverflow.com/questions/31664994/how-to-set-multiple-fields-at-once-in-immutable-js-record" target="_blank" rel="noopener">How to set multiple fields at once in Immutable.js Record?</a></li><li><a href="https://www.wantedly.com/companies/wantedly/post_articles/28935" target="_blank" rel="noopener">React使い必見！ Immutable.jsでReactはもっと良くなる</a></li><li><a href="https://stackoverflow.com/questions/40475547/how-to-loop-through-an-immutable-map-of-immutable-maps" target="_blank" rel="noopener">javascript - How to loop through an Immutable Map of Immutable Maps?</a></li><li><a href="http://kenjimorita.jp/immutable-js/" target="_blank" rel="noopener">【Immutable.jsの使い方】Immutable.js超入門~ReactでsetStateのプロパティ値に直接代入避ける~</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React.jsと一緒に使うことで、immutableなオブジェクトを扱うことができ、パフォーマンスが向上する「&lt;a href=&quot;https://github.com/facebook/immutable-js/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;facebook/immutable-js&lt;/a&gt;」の紹介と簡単なチートシートです。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://morizyun.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://morizyun.github.io/tags/JavaScript/"/>
    
      <category term="React.js" scheme="http://morizyun.github.io/tags/React-js/"/>
    
      <category term="Immutable.js" scheme="http://morizyun.github.io/tags/Immutable-js/"/>
    
  </entry>
  
  <entry>
    <title>Dockerで日本語対応のHeadless Chrome + puppeteerを立ち上げ</title>
    <link href="http://morizyun.github.io/blog/docker-compose-chrome-puppeteer-headless/"/>
    <id>http://morizyun.github.io/blog/docker-compose-chrome-puppeteer-headless/</id>
    <published>2017-09-10T15:00:00.000Z</published>
    <updated>2017-10-28T10:51:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>docker-composeで日本語対応のHeadless Chromeを「<strong><a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">puppeteer</a></strong>」で操作する手順です。</p><p><img src="/img/puppeteer-chrome-headless-node-library.png"></p><a id="more"></a><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>日本語対応のChromeの入った<code>Dockerfile</code>は次のように記述します。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:latest</span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> morizyun &lt;@zyunnosuke&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># For Japan</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i -E <span class="string">"s@http://(archive|security)\.ubuntu\.com/ubuntu/@http://ftp.jaist.ac.jp/pub/Linux/ubuntu/@g"</span> /etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Basic</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y sudo curl wget zip unzip git nodejs npm fontconfig \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get purge -y nodejs npm \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash - \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y nodejs \</span></span><br><span class="line"><span class="bash">    &amp;&amp; npm install -g yarn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Chrome</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add - \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sh -c <span class="string">'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" &gt;&gt; /etc/apt/sources.list.d/google-chrome.list'</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get install -y google-chrome-stable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove cache &amp; workfile</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /var/lib/apt/lists/* /var/cache/apt/*</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Japanese font</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /noto</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> https://noto-website.storage.googleapis.com/pkgs/NotoSansCJKjp-hinted.zip /noto</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /noto</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> unzip NotoSansCJKjp-hinted.zip &amp;&amp; \</span></span><br><span class="line"><span class="bash">    mkdir -p /usr/share/fonts/noto &amp;&amp; \</span></span><br><span class="line"><span class="bash">    cp *.otf /usr/share/fonts/noto &amp;&amp; \</span></span><br><span class="line"><span class="bash">    chmod 644 -R /usr/share/fonts/noto/ &amp;&amp; \</span></span><br><span class="line"><span class="bash">    /usr/bin/<span class="built_in">fc</span>-cache -fv</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /noto</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Work dir</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /app/</span></span><br></pre></td></tr></table></figure><h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><p><code>docker-compose.yml</code>は次のように記述します。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  app:</span></span><br><span class="line"><span class="attr">    build:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">    working_dir:</span> <span class="string">"/app"</span></span><br><span class="line"><span class="attr">    tty:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    stdin_open:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">.:/app</span></span><br><span class="line"><span class="attr">    shm_size:</span> <span class="number">512</span> <span class="comment"># 一時ファイル領域(MB)</span></span><br></pre></td></tr></table></figure><p>あとは<code>docker-compose build</code>でイメージを作成します。</p><h2 id="puppeteer"><a href="#puppeteer" class="headerlink" title="puppeteer"></a>puppeteer</h2><p><code>puppeteer</code>をインストールします。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn init</span><br><span class="line">yarn add puppeteer</span><br></pre></td></tr></table></figure><p><code>package.json</code>に以下を追加します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"puppeteer"</span>: <span class="string">"node puppeteer.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ブラウザを操作する<code>puppeteer.js</code>はこちら。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span>() =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;<span class="attr">args</span>: [<span class="string">'--no-sandbox'</span>]&#125;);</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">  <span class="keyword">await</span> page.setRequestInterceptionEnabled(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">'https://google.com'</span>, &#123;<span class="attr">waitUntil</span>: <span class="string">'networkidle'</span>&#125;);</span><br><span class="line">  <span class="comment">// Type our query into the search bar</span></span><br><span class="line">  <span class="keyword">await</span> page.type(<span class="string">'puppeteer'</span>);</span><br><span class="line">  <span class="keyword">await</span> page.click(<span class="string">'input[type="submit"]'</span>);</span><br><span class="line">  <span class="comment">// Wait for the results to show up</span></span><br><span class="line">  <span class="keyword">await</span> page.waitForNavigation();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.screenshot(&#123;<span class="attr">path</span>: <span class="string">`puppeteer_<span class="subst">$&#123;(<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()&#125;</span>.png`</span>&#125;);</span><br><span class="line"></span><br><span class="line">  browser.close();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>作成した結果を試してみます。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bashを起動</span></span><br><span class="line">docker-compose run --rm --entrypoint /bin/bash app</span><br><span class="line"></span><br><span class="line">yarn run puppeteer</span><br></pre></td></tr></table></figure><p>これでブラウザの操作結果のスクリーンショットを取得できます。</p><p><img src="/img/2018-08-26-puppeteer-google-search-sample.png"></p><h2 id="Dockerfile-1"><a href="#Dockerfile-1" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>GitHubとDocker Hubにファイルを公開しました。</p><ul><li><a href="https://github.com/morizyun/headless-chrome-puppeteer-japanese" target="_blank" rel="noopener">https://github.com/morizyun/headless-chrome-puppeteer-japanese</a></li><li><a href="https://hub.docker.com/r/morizyun/headless-chrome-puppeteer-japanese/" target="_blank" rel="noopener">https://hub.docker.com/r/morizyun/headless-chrome-puppeteer-japanese/</a></li></ul><h2 id="補足：puppeteerの使い方"><a href="#補足：puppeteerの使い方" class="headerlink" title="補足：puppeteerの使い方"></a>補足：puppeteerの使い方</h2><h3 id="セレクトタグの選択"><a href="#セレクトタグの選択" class="headerlink" title="セレクトタグの選択"></a>セレクトタグの選択</h3><p>フォームの<code>select</code>タグを選択する方法です。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> page.evaluate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">'select option:nth-child(2)'</span>).selected = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="タイムアウトを長くする"><a href="#タイムアウトを長くする" class="headerlink" title="タイムアウトを長くする"></a>タイムアウトを長くする</h3><p>タイムアウトを長くしたい場合は、<code>page.goto</code>のオプションで<code>timeout</code>を指定すると良さそうです。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> page.goto(<span class="string">'https://example.com/'</span>, &#123; <span class="attr">timeout</span>: <span class="number">3000000</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="スクリーンサイズの変更"><a href="#スクリーンサイズの変更" class="headerlink" title="スクリーンサイズの変更"></a>スクリーンサイズの変更</h3><p>スクリーンのサイズは次の設定で指定できます。できるだけメモリ消費を抑えるために小さめで設定した方が良さそうです。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">page.setViewport(&#123; <span class="attr">width</span>: <span class="number">320</span>, <span class="attr">height</span>: <span class="number">640</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="Deviceのエミュレート"><a href="#Deviceのエミュレート" class="headerlink" title="Deviceのエミュレート"></a>Deviceのエミュレート</h3><p>スマートフォンやタブレットのブラウザをエミュレートすることも比較的容易です。次のように記述します。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</span><br><span class="line"><span class="keyword">const</span> devices = <span class="built_in">require</span>(<span class="string">'puppeteer/DeviceDescriptors'</span>);</span><br><span class="line"><span class="keyword">const</span> iPhone = devices[<span class="string">'iPhone 6'</span>];</span><br><span class="line"></span><br><span class="line">puppeteer.launch().then(<span class="keyword">async</span> browser =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">  <span class="keyword">await</span> page.emulate(iPhone);</span><br><span class="line">  <span class="keyword">await</span> page.goto(<span class="string">'https://www.google.com'</span>);</span><br><span class="line">  <span class="comment">// other actions...</span></span><br><span class="line">  <span class="keyword">await</span> browser.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Page-crash対策"><a href="#Page-crash対策" class="headerlink" title="Page crash対策"></a>Page crash対策</h3><p>Dockerがデフォルトで準備する一時ファイル領域は64MBで、一般的な装飾のサイトではこの容量を超えてしまい、<code>Page crash</code>することがありました。<code>docker run</code>コマンドの場合はオプション<code>--shm-size=256m</code>、<code>docker-compose</code>ファイルの場合は<code>shm_size: 256</code>を指定すると良さそうです。</p><h3 id="Chromeエラーのダンプ"><a href="#Chromeエラーのダンプ" class="headerlink" title="Chromeエラーのダンプ"></a>Chromeエラーのダンプ</h3><p>Chromeのアウトプットを標準出力煮出す場合はこちら。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> browser = <span class="keyword">await</span> Puppeteer.launch(&#123; <span class="attr">dumpio</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="http://yamitzky.hatenablog.com/entry/2017/08/22/004448" target="_blank" rel="noopener">Puppeteer を CLI で動かす Docker イメージ作った</a></li><li><a href="http://qiita.com/dd511805/items/dfe03c5486bf1421875a" target="_blank" rel="noopener">Dockerを使ってHeadless Chromeを動かしてみる</a></li><li><a href="http://qiita.com/Quramy/items/26058e83e898ec2ec078" target="_blank" rel="noopener">–headless時代の本命？ Chrome を Node.jsから操作するライブラリ puppeteer について</a></li><li><a href="http://bufferings.hatenablog.com/entry/2017/05/03/181713" target="_blank" rel="noopener">Headless ChromeをDockerに入れてGebで遊んでみた</a></li><li><a href="http://qiita.com/daponta/items/1b03c1a18d3c2054aefc" target="_blank" rel="noopener">puppeteerとAVAでE2Eテストしてみる</a></li><li><a href="https://askubuntu.com/questions/594656/how-to-install-the-latest-versions-of-nodejs-and-npm-for-ubuntu-14-04-lts" target="_blank" rel="noopener">How to Install the Latest Versions of NodeJS and NPM for Ubuntu 14.04 LTS</a></li><li><a href="https://github.com/bufferings/sandbox-gebheadlesschrome" target="_blank" rel="noopener">bufferings/sandbox-gebheadlesschrome</a></li><li><a href="https://github.com/alekzonder/docker-puppeteer" target="_blank" rel="noopener">alekzonder/docker-puppeteer</a></li><li><a href="https://hub.docker.com/r/pastelsky/node-chrome-headless/~/dockerfile/" target="_blank" rel="noopener">pastelsky/node-chrome-headless</a></li><li><a href="https://github.com/GoogleChrome/puppeteer/issues/290" target="_blank" rel="noopener">Chrome Headless doesn’t launch on Debian · GoogleChrome/puppeteer</a></li><li><a href="https://github.com/GoogleChrome/puppeteer/issues/782" target="_blank" rel="noopener">Constantly getting Navigation Timeout Error · Issue #782</a></li><li><a href="http://qiita.com/windyakin/items/00b085902547570eebc6" target="_blank" rel="noopener">Docker上のpuppeteerがPage crashしてしまうときはshmサイズを疑う</a></li><li><a href="https://github.com/GoogleChrome/puppeteer/issues/359" target="_blank" rel="noopener">Chrome seems to have a hard limit when taking screenshots of tall pages · Issue #359</a></li><li><a href="http://qiita.com/windyakin/items/00b085902547570eebc6" target="_blank" rel="noopener">Docker上のpuppeteerがPage crashしてしまうときはshmサイズを疑う</a></li><li><a href="https://stackoverflow.com/questions/45864516/how-to-select-an-option-from-dropdown-select" target="_blank" rel="noopener">puppeteer - How to select an option from dropdown select</a></li></ul><h2 id="その他ツール"><a href="#その他ツール" class="headerlink" title="その他ツール"></a>その他ツール</h2><ul><li><a href="https://github.com/adieuadieu/serverless-chrome/tree/develop/packages/lambda/chrome" target="_blank" rel="noopener">adieuadieu/serverless-chrome</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker-composeで日本語対応のHeadless Chromeを「&lt;strong&gt;&lt;a href=&quot;https://github.com/GoogleChrome/puppeteer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;puppeteer&lt;/a&gt;&lt;/strong&gt;」で操作する手順です。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/puppeteer-chrome-headless-node-library.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://morizyun.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://morizyun.github.io/tags/JavaScript/"/>
    
      <category term="NodeJS" scheme="http://morizyun.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScriptのArray(配列)について</title>
    <link href="http://morizyun.github.io/blog/javascript-basic-array-methods/"/>
    <id>http://morizyun.github.io/blog/javascript-basic-array-methods/</id>
    <published>2017-09-04T15:00:00.000Z</published>
    <updated>2017-10-17T13:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScriptの配列(<code>Array</code>)の基本的なメソッドを知らずに詰まることがあったので、よく使うものを整理してみました！</p><a id="more"></a><h2 id="要素の追加：push"><a href="#要素の追加：push" class="headerlink" title="要素の追加：push"></a>要素の追加：<code>push</code></h2><p><code>push()</code>で配列に要素を追加できます。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sports = [<span class="string">'soccer'</span>, <span class="string">'baseball'</span>];</span><br><span class="line"><span class="keyword">var</span> totalCount = sports.push(<span class="string">'football'</span>, <span class="string">'swimming'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sports); <span class="comment">// =&gt; ['soccer', 'baseball', 'football', 'swimming']</span></span><br><span class="line"><span class="built_in">console</span>.log(totalCount); <span class="comment">// =&gt; 4</span></span><br></pre></td></tr></table></figure><h2 id="要素数分ループ：forEach"><a href="#要素数分ループ：forEach" class="headerlink" title="要素数分ループ：forEach"></a>要素数分ループ：<code>forEach</code></h2><p><code>forEach()</code>は配列の要素を順番に処理していきます。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</span><br><span class="line">array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">val, index</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(val === <span class="string">'c'</span>) &#123; result.push(index); &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//=&gt; [2]</span></span><br></pre></td></tr></table></figure><h2 id="要素数分ループ：map"><a href="#要素数分ループ：map" class="headerlink" title="要素数分ループ：map"></a>要素数分ループ：<code>map</code></h2><p><code>map()</code>を使うと各要素に対して、特定の処理を実施できます。返り値は処理を実行した結果の配列です。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</span><br><span class="line"><span class="keyword">var</span> result = array.map(<span class="function"><span class="keyword">function</span>(<span class="params">val, index</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (val === <span class="string">'c'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//=&gt; [-1, -1, 2, -1]</span></span><br></pre></td></tr></table></figure><p>配列の中の特定の要素だけ、別の要素に置き換えるのは次のように記述します。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> result = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element === <span class="number">2</span> ? <span class="string">'hoge'</span> : element;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//=&gt; [1, hoge, 3]</span></span><br></pre></td></tr></table></figure><h2 id="フィルタリング：filter"><a href="#フィルタリング：filter" class="headerlink" title="フィルタリング：filter"></a>フィルタリング：<code>filter</code></h2><p><code>filter</code>は配列で特定の条件を満たす要素を選別する(フィルタリング)を行うメソッドです。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> result = array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt;= <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//=&gt; [2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="条件を満たす要素を検索：find"><a href="#条件を満たす要素を検索：find" class="headerlink" title="条件を満たす要素を検索：find"></a>条件を満たす要素を検索：<code>find</code></h2><p><code>find</code>は配列内の要素から条件を満たす最初の要素を取り出すメソッドです。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].find(<span class="function"><span class="params">el</span> =&gt;</span> el &gt;= <span class="number">15</span>); <span class="comment">//=&gt; 130</span></span><br></pre></td></tr></table></figure><h2 id="条件を満たすインデックスを検索：findIndex"><a href="#条件を満たすインデックスを検索：findIndex" class="headerlink" title="条件を満たすインデックスを検索：findIndex"></a>条件を満たすインデックスを検索：<code>findIndex</code></h2><p><code>findIndex</code>は配列から条件を満たす要素のインデックスを取得するメソッドです。対象の要素がみつからない場合は<code>-1</code>を返します。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">12</span>].findIndex(<span class="function"><span class="params">e</span> =&gt;</span> e === <span class="number">1</span>); <span class="comment">//=&gt; -1</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>].findIndex(<span class="function"><span class="params">e</span> =&gt;</span> e === <span class="number">7</span>); <span class="comment">//=&gt; 2</span></span><br></pre></td></tr></table></figure><h2 id="隣り合う要素に対する処理：reduce"><a href="#隣り合う要素に対する処理：reduce" class="headerlink" title="隣り合う要素に対する処理：reduce"></a>隣り合う要素に対する処理：<code>reduce</code></h2><p><code>reduce</code>は配列の隣り合う要素に対して(左から右へ)同時に関数を適用して単一の値を返すメソッドです。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> result = array.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">previousVal, currentVal</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> previousVal + currentVal;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//=&gt; 10</span></span><br></pre></td></tr></table></figure><h2 id="配列の最初に要素を追加：unshift"><a href="#配列の最初に要素を追加：unshift" class="headerlink" title="配列の最初に要素を追加：unshift"></a>配列の最初に要素を追加：<code>unshift</code></h2><p><code>unshift()</code>メソッドは、配所の最初に要素を追加するメソッドです。<br>返り値は、新しい配列の長さです。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.unshift(<span class="number">0</span>); <span class="comment">// = 3</span></span><br><span class="line"><span class="comment">// arr is [0, 1, 2]</span></span><br><span class="line"></span><br><span class="line">arr.unshift(<span class="number">-2</span>, <span class="number">-1</span>); <span class="comment">// = 5</span></span><br><span class="line"><span class="comment">//arr is [-2, -1, 0, 1, 2]</span></span><br></pre></td></tr></table></figure><h2 id="配列を結合して文字列にする：join"><a href="#配列を結合して文字列にする：join" class="headerlink" title="配列を結合して文字列にする：join"></a>配列を結合して文字列にする：<code>join</code></h2><p><code>join()</code>メソッドは配列の要素を結合して文字列を返すメソッドです。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">"Banana"</span>, <span class="string">"Orange"</span>, <span class="string">"Apple"</span>, <span class="string">"Mango"</span>];</span><br><span class="line"><span class="keyword">var</span> energy = fruits.join(<span class="string">", "</span>); <span class="comment">//=&gt; Banana, Orange, Apple, Mango</span></span><br></pre></td></tr></table></figure><h2 id="配列のどれかが条件を満たすか：some"><a href="#配列のどれかが条件を満たすか：some" class="headerlink" title="配列のどれかが条件を満たすか：some"></a>配列のどれかが条件を満たすか：<code>some</code></h2><p><code>some()</code>メソッドは配列のどれかが条件を満たせば<code>true</code>を返すメソッドです。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBiggerThan10</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10);  <span class="comment">// false</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="配列の結合：concat"><a href="#配列の結合：concat" class="headerlink" title="配列の結合：concat"></a>配列の結合：<code>concat</code></h2><p><code>concat()</code>メソッドは2つ以上の配列を結合させて新しい配列を生成します。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = arr1.concat(arr2); <span class="comment">//=&gt; [ "a", "b", "c", "d", "e", "f" ]</span></span><br></pre></td></tr></table></figure><h2 id="配列の一部切り出し：slice"><a href="#配列の一部切り出し：slice" class="headerlink" title="配列の一部切り出し：slice"></a>配列の一部切り出し：<code>slice</code></h2><p><code>slice()</code>メソッドは配列から一部を切り出すことができます。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'zero'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>];</span><br><span class="line"><span class="keyword">var</span> sliced = a.slice(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sliced); <span class="comment">//=&gt; ['one', 'two']</span></span><br></pre></td></tr></table></figure><p>1つ目の引数がスタート位置で、2つ目の引数が終了位置です。終了位置の要素は含まないのを注意してください。</p><h2 id="配列の要素をユニークにする"><a href="#配列の要素をユニークにする" class="headerlink" title="配列の要素をユニークにする"></a>配列の要素をユニークにする</h2><p>配列の要素の重複を排除してユニークにするには次のように記述します。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"><span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(array)); <span class="comment">//=&gt; 1, 2, 3</span></span><br></pre></td></tr></table></figure><h2 id="配列から特定の要素を除去する"><a href="#配列から特定の要素を除去する" class="headerlink" title="配列から特定の要素を除去する"></a>配列から特定の要素を除去する</h2><p>Arrayの要素の中で特定の要素を除去(削除)するには次のように記述します。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> inArray = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配列から two を取り除く</span></span><br><span class="line">inArray.filter(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; <span class="keyword">return</span> e !== <span class="string">'two'</span> &#125;); <span class="comment">//=&gt; ["one", "three"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ECMA6形式でアロー関数を使う場合</span></span><br><span class="line">inArray.filter(<span class="function"><span class="params">e</span> =&gt;</span> e !== <span class="string">'two'</span>); <span class="comment">//=&gt; ["one", "three"]</span></span><br></pre></td></tr></table></figure><h2 id="配列が空かどうかの判定"><a href="#配列が空かどうかの判定" class="headerlink" title="配列が空かどうかの判定"></a>配列が空かどうかの判定</h2><p>配列からかどうかを判定するのは次のコードです。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [];</span><br><span class="line"><span class="built_in">console</span>.log(array.length === <span class="number">0</span>); <span class="comment">//=&gt; true</span></span><br></pre></td></tr></table></figure><h2 id="配列をフラットにする"><a href="#配列をフラットにする" class="headerlink" title="配列をフラットにする"></a>配列をフラットにする</h2><p>Arrayのメソッドではないですが、2次元配列 =&gt; 1次元配列のように配列をフラットにするコードです。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [</span><br><span class="line">  [<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">];</span><br><span class="line"><span class="built_in">Array</span>.prototype.concat.apply([], array);</span><br><span class="line"><span class="comment">// =&gt; [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="nullやundefinedを削除する"><a href="#nullやundefinedを削除する" class="headerlink" title="nullやundefinedを削除する"></a><code>null</code>や<code>undefined</code>を削除する</h2><p>配列から<code>null</code>や<code>undefined</code>を<code>filter</code>メソッドを使って削除する手順です。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,,<span class="number">3</span>,,<span class="number">3</span>,<span class="literal">null</span>,,<span class="number">0</span>,,<span class="literal">undefined</span>,<span class="number">4</span>,,<span class="number">4</span>,,<span class="number">5</span>,,<span class="number">6</span>,<span class="string">''</span>,<span class="literal">false</span>,,];</span><br><span class="line"></span><br><span class="line">arr = arr.filter(<span class="built_in">Boolean</span>); <span class="comment">//=&gt; [1, 2, 3, 3, 4, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="1からNまでの配列を生成"><a href="#1からNまでの配列を生成" class="headerlink" title="1からNまでの配列を生成"></a>1からNまでの配列を生成</h2><p><code>1</code>から<code>N</code>までの配列を生成するのは次の方法です。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: <span class="number">5</span>&#125;, (v, k) =&gt; k+<span class="number">1</span>); <span class="comment">//=&gt; [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><h2 id="最後の要素の取得"><a href="#最後の要素の取得" class="headerlink" title="最後の要素の取得"></a>最後の要素の取得</h2><p>配列の最後の要素を取得する方法です。1つ目はシンプルなgetterメソッドを作る方法です。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.last)&#123;</span><br><span class="line">    <span class="built_in">Array</span>.prototype.last = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>];</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].last() <span class="comment">//=&gt; 3</span></span><br></pre></td></tr></table></figure><p>Getterメソッドなどを作らずに<code>slice()</code>メソッドで対応する場合はこちら。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].slice(<span class="number">-1</span>)[<span class="number">0</span>] <span class="comment">//=&gt; 3</span></span><br></pre></td></tr></table></figure><h2 id="配列を途中で抜ける：break"><a href="#配列を途中で抜ける：break" class="headerlink" title="配列を途中で抜ける：break"></a>配列を途中で抜ける：<code>break</code></h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> value = arr[i];</span><br><span class="line">    <span class="keyword">if</span> (value &gt; <span class="number">5</span>) &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配列に要素が含まれているかを判定"><a href="#配列に要素が含まれているかを判定" class="headerlink" title="配列に要素が含まれているかを判定"></a>配列に要素が含まれているかを判定</h2><p>Array内に特定の要素が含まれているかどうかを判定するには<code>include()</code>メソッドを使います。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a.includes(<span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line">a.includes(<span class="number">4</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="https://goo.gl/FKktuI" target="_blank" rel="noopener">これだけ覚えるべきJSの基礎</a></li><li><a href="https://goo.gl/j8skm1" target="_blank" rel="noopener">JavaScriptでflatten</a></li><li><a href="https://stackoverflow.com/a/17903018" target="_blank" rel="noopener">How to get an array of unique values from an array containing duplicates in JavaScript?</a></li><li><a href="https://stackoverflow.com/a/3955096" target="_blank" rel="noopener">Remove item from array by value</a></li><li><a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/find" target="_blank" rel="noopener">Array.prototype.find() - JavaScript</a></li><li><a href="https://stackoverflow.com/questions/9050345/selecting-last-element-in-javascript-array" target="_blank" rel="noopener">Selecting last element in JavaScript array</a></li><li><a href="https://stackoverflow.com/questions/281264/remove-empty-elements-from-an-array-in-javascript" target="_blank" rel="noopener">Remove empty elements from an array in Javascript</a></li><li><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex" target="_blank" rel="noopener">Array.prototype.findIndex() - JavaScript</a></li><li><a href="https://stackoverflow.com/questions/31925323/how-to-filter-out-nan-null-0-false-in-an-array-js" target="_blank" rel="noopener">javascript - How to filter() out NaN, null, 0, false in an array (JS)</a></li><li><a href="https://stackoverflow.com/questions/3746725/create-a-javascript-array-containing-1-n" target="_blank" rel="noopener">Create a JavaScript array containing 1…N</a></li><li><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noopener">Array.prototype.push() - JavaScript</a></li><li><a href="http://qiita.com/phi/items/f998763d2d52bdd57a7c" target="_blank" rel="noopener">ループ途中で抜ける処理は for(in break) ではなく some を使おう♪</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">Array.prototype.slice() - JavaScript</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener">Array.prototype.includes()</a></li><li><a href="https://qiita.com/kazu56/items/557740f398e82fc881df" target="_blank" rel="noopener">https://qiita.com/kazu56/items/557740f398e82fc881df</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScriptの配列(&lt;code&gt;Array&lt;/code&gt;)の基本的なメソッドを知らずに詰まることがあったので、よく使うものを整理してみました！&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LinuxのDocker管理ツール「rancher」の紹介</title>
    <link href="http://morizyun.github.io/blog/docker-manage-rancher-itroduction/"/>
    <id>http://morizyun.github.io/blog/docker-manage-rancher-itroduction/</id>
    <published>2017-08-30T15:00:00.000Z</published>
    <updated>2017-10-14T01:58:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>「<strong><a href="http://rancher.com/" target="_blank" rel="noopener">rancher</a></strong>」はWeb UIを使ってDockerクラスタを管理するためのツールです。今回は日本リージョンのあるVPSサービス「<a href="http://www.vultr.com/?ref=6808408" target="_blank" rel="noopener">Vultr</a>」に環境構築を行う手順を紹介します。</p><p><img src="/img/vultr-rancher-landing-page.png"></p><a id="more"></a><h2 id="rancherのサーバ構成"><a href="#rancherのサーバ構成" class="headerlink" title="rancherのサーバ構成"></a>rancherのサーバ構成</h2><p>rancherの管理画面や立ち上げたDockerのインスタンスなどを管理する「rancher server」とユーザーが設定したアプリケーションが起動する「rancher agent」によって構成されます。</p><h2 id="rancher内の用語"><a href="#rancher内の用語" class="headerlink" title="rancher内の用語"></a>rancher内の用語</h2><p>Rancherで使われている単語や定義を簡単に説明します。</p><table><thead><tr><th>用語</th><th>説明</th></tr></thead><tbody><tr><td><code>Service</code></td><td>用途別のコンテナをグループ化。web, application, dbなど</td></tr><tr><td><code>Stack</code></td><td>Serviceのグループ化。一連のアプリケーションを関連付け。ひとつのサービスやシステムなど</td></tr><tr><td><code>Environment</code></td><td>環境。Production, Staging, Developmentなどの使い分け</td></tr></tbody></table><h2 id="Vultrにインスタンスを作成"><a href="#Vultrにインスタンスを作成" class="headerlink" title="Vultrにインスタンスを作成"></a>Vultrにインスタンスを作成</h2><p>「<a href="http://www.vultr.com/?ref=6808408" target="_blank" rel="noopener">Vultr</a>」にiPXEブートでRancherOSを起動します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!ipxe</span></span><br><span class="line"><span class="comment"># Boots RancherOS in Ramdisk with persistent storage on disk /dev/vda</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Location of Kernel/Initrd images</span></span><br><span class="line"><span class="built_in">set</span> base-url http://releases.rancher.com/os/latest</span><br><span class="line"></span><br><span class="line">kernel <span class="variable">$&#123;base-url&#125;</span>/vmlinuz rancher.state.formatzero=<span class="literal">true</span> rancher.state.autoformat=[/dev/vda] rancher.password=[初回ログインパスワード]</span><br><span class="line"></span><br><span class="line">initrd <span class="variable">$&#123;base-url&#125;</span>/initrd</span><br><span class="line"></span><br><span class="line">boot</span><br></pre></td></tr></table></figure><p>「<strong>[初回ログインパスワード]</strong>」にはパスワードを記入します。</p><p><img src="/img/vultr-ipxe-rancher-os.png"></p><h2 id="sshでサーバにログイン"><a href="#sshでサーバにログイン" class="headerlink" title="sshでサーバにログイン"></a>sshでサーバにログイン</h2><p>インスタンスが立ち上がったら、sshでサーバにログインします。パスワードはさきほどiPXEブートのスクリプトに記述した物を使います。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh rancher@[サーバのIPアドレス]</span><br></pre></td></tr></table></figure><p>ログインしたら<code>cloud-config.yml</code>を作成します。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cloud-config</span></span><br><span class="line"><span class="attr">ssh_authorized_keys:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ssh-rsa</span> <span class="string">AAAA......(SSH公開鍵)</span></span><br></pre></td></tr></table></figure><p>次のコマンドでRancherOSをインストールします。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ros install -c cloud-config.yml -d /dev/vda</span><br></pre></td></tr></table></figure><p>次にrancher serverをインストールします。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir ~/data</span><br><span class="line">docker run -d -v data:/var/lib/mysql --restart=always -p 8080:8080 rancher/server</span><br></pre></td></tr></table></figure><p>dockerのプロセスが立ち上がったら、ブラウザから<code>http://[サーバのIPアドレス]:8080/</code>にアクセスします。</p><h2 id="アクセス制限を行う"><a href="#アクセス制限を行う" class="headerlink" title="アクセス制限を行う"></a>アクセス制限を行う</h2><p>rancher serverのメニューの<code>ADMIN &gt; Access Control</code>からGitHubログインでのアクセス制限を行います。</p><p>まずはGitHubの「Profile &gt; Developer settings &gt; OAuth Application &gt; Register a new application」を選択します。</p><p>Client ID、Client Secretを使ってGitHubログインを行うように設定します。</p><p><img src="/img/vultr-rancher-access-control-github-register.png"></p><h2 id="Docker-Hostを選択"><a href="#Docker-Hostを選択" class="headerlink" title="Docker Hostを選択"></a>Docker Hostを選択</h2><p>Rancher severのメニューの「Infrastracture &gt; Hosts &gt; Add Host」でホストを追加します。Vultrは初期メニューには出てこないので「Manage available machine drivers」からVultrを追加します。</p><p>入力項目は次のとおりです。</p><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>Name</td><td>任意の名前を入力</td></tr><tr><td>apiKey</td><td>Vultrのコンソール &gt; Account &gt; APIかはら発行できます</td></tr><tr><td>endPoint(URL?)</td><td><a href="https://api.vultr.com/" target="_blank" rel="noopener">https://api.vultr.com/</a></td></tr><tr><td>osId</td><td>初期設定のまま、RancherOSが起動</td></tr><tr><td>planId</td><td>202 (2GBメモリプラン)などを選択。<a href="https://api.vultr.com/v1/plans/list" target="_blank" rel="noopener">https://api.vultr.com/v1/plans/list</a> に一覧</td></tr><tr><td>priavateNetWorking</td><td>「オン」Private Networkに入れるかどうか</td></tr><tr><td>pxeScript</td><td>そのまま</td></tr><tr><td>regionId</td><td>25 (Tokyo)などを選択。<a href="https://api.vultr.com/v1/regions/list" target="_blank" rel="noopener">https://api.vultr.com/v1/regions/list</a> に一覧</td></tr><tr><td>sshKeyId</td><td>本来はSSH keyのID。私が試したときにはうまくうごいてくれなかった</td></tr></tbody></table><p>入力してしばらく待つとHostが起動してくれます。</p><h2 id="Rancherのスタック画面からアプリケーションを登録"><a href="#Rancherのスタック画面からアプリケーションを登録" class="headerlink" title="Rancherのスタック画面からアプリケーションを登録"></a>Rancherのスタック画面からアプリケーションを登録</h2><p>あとは「Stacks &gt; User &gt; Add Stack」からお望みのアプリケーションのdocker-composeをstackから登録するだけです。今回はTrelloクローンのwekanを立ち上げてみます。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  wekan:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">wekanteam/wekan:meteor-1.4</span></span><br><span class="line"><span class="attr">    links:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">wekandb</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">MONGO_URL=mongodb://wekandb/wekan</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">ROOT_URL=http://localhost:80</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line"><span class="attr">  wekandb:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mongo:3.2.12</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/home/johndue/docker/data/mongodb-wekan:/data/db</span></span><br></pre></td></tr></table></figure><p><img src="/img/vultr-rancher-wekan.png"></p><h2 id="コンテナ内でコマンドを実行する"><a href="#コンテナ内でコマンドを実行する" class="headerlink" title="コンテナ内でコマンドを実行する"></a>コンテナ内でコマンドを実行する</h2><p>Dockerコンテナ内でshellコマンドを実行したり、Rakeタスク等を実行するための手順です。</p><ul><li>メニューのStack =&gt; 対象のStack(アプリケーション一式)を選択</li><li>コマンドを実行したいサービスを選択</li><li>メニューの中に「Execute shell」コマンドがあるのでクリック</li><li>コンソールでコマンドを実行できます</li></ul><h2 id="補足：Rancher-OS内でコマンドを実行する"><a href="#補足：Rancher-OS内でコマンドを実行する" class="headerlink" title="補足：Rancher OS内でコマンドを実行する"></a>補足：Rancher OS内でコマンドを実行する</h2><p>Rancher OS内でコマンドを実行する場合はdockerベースでコマンド実行するのが良さそうです。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git</span></span><br><span class="line"><span class="built_in">alias</span> git=<span class="string">"docker run -ti --rm -v <span class="variable">$(pwd)</span>:/git bwits/docker-git-alpine"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rancherコマンド</span></span><br><span class="line"><span class="built_in">alias</span> rancher=<span class="string">"docker run -ti --rm -v <span class="variable">$(pwd)</span>:/rancher rancher/cli"</span></span><br></pre></td></tr></table></figure><h2 id="補足：rancher-CLIコマンド"><a href="#補足：rancher-CLIコマンド" class="headerlink" title="補足：rancher CLIコマンド"></a>補足：rancher CLIコマンド</h2><p>Rancher CLIコマンドを追加します。まず以下を<code>~/.zshrc</code>か<code>~/.bash_profile</code>に登録します。API KeyなどはRancherの管理画面から取得できます。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> rancher=<span class="string">"docker run -ti --rm -v <span class="variable">$(pwd)</span>:/rancher rancher/cli"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> RANCHER_URL=http://&lt;server_ip&gt;:8080</span><br><span class="line"><span class="built_in">export</span> RANCHER_ACCESS_KEY=&lt;accessKey_of_account_api_key&gt;</span><br><span class="line"><span class="built_in">export</span> RANCHER_SECRET_KEY=&lt;secretKey_of_account_api_key&gt;</span><br></pre></td></tr></table></figure><p>rancherコマンドは「<strong><a href="http://rancher.com/docs/rancher/latest/en/cli/commands/" target="_blank" rel="noopener">Rancher CLI commands</a></strong>」で確認できます。</p><h2 id="補足：rancher-crontabの実行"><a href="#補足：rancher-crontabの実行" class="headerlink" title="補足：rancher crontabの実行"></a>補足：rancher crontabの実行</h2><p>Rancherのスタックでcronで一定期間毎に実行するにはまず、Rancher管理画面のCATALOGから「<a href="https://github.com/rancher/rancher/issues/2143" target="_blank" rel="noopener">Rancher Container Cron</a>」を追加します。</p><p>そしてstackの<code>docker-compose.yml</code>に次の内容を追記します。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  jobs:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">centos:7</span></span><br><span class="line"><span class="attr">    command:</span> <span class="string">date</span></span><br><span class="line"><span class="attr">    labels:</span></span><br><span class="line">      <span class="string">cron.schedule:</span> <span class="number">0</span> <span class="number">0</span> <span class="string">*/1</span> <span class="string">*</span> <span class="string">*</span> <span class="string">*</span> <span class="comment"># 1時間毎に起動</span></span><br><span class="line">      <span class="string">io.rancher.container.start_once:</span> <span class="string">'true'</span></span><br><span class="line">      <span class="string">io.rancher.container.pull_image:</span> <span class="string">'always'</span></span><br></pre></td></tr></table></figure><p><code>rancher-comose.yml</code>は次のように記述します。</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  jobs:</span></span><br><span class="line"><span class="attr">    scale:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    start_on_create:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>これで<code>rancher up -d</code>でデプロイすると定期的にスクリプトを実行できます。(動いていない間は停止します)</p><p><a href="https://godoc.org/github.com/robfig/cron#hdr-CRON_Expression_Format" target="_blank" rel="noopener">cronの設定</a>はわかりやすい設定の説明です。</p><p>Tipsですが、cronを1分、6分、11分のように少し切りの悪いタイミングで動かす場合は次のように記述します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">01-59/5 * * * * <span class="built_in">command</span></span><br></pre></td></tr></table></figure><h2 id="補足：ScalewayでRancher-Agent起動"><a href="#補足：ScalewayでRancher-Agent起動" class="headerlink" title="補足：ScalewayでRancher Agent起動"></a>補足：ScalewayでRancher Agent起動</h2><p>「<a href="https://scaleway.com" target="_blank" rel="noopener">Scaleway</a>」でサーバを借りてRancher Agentをインストールするまでの手順です。<br>ScalewayのDockerイメージは少し古いDockerが入っているので、Dockerをバージョンアップしたうえで、Rancher Agentを導入しましょう。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get autoremove --purge docker-engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nothing worked until I added this step</span></span><br><span class="line">sudo rm -rfv /var/lib/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再起動</span></span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再起動後</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dockerのインストール</span></span><br><span class="line">curl -sSL https://get.docker.com/ | sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Systemdの作成(起動用のコマンド)</span></span><br><span class="line">sudo mkdir /etc/systemd/system/docker.service.d</span><br><span class="line">sudo vi /etc/systemd/system/docker.service.d/docker.conf</span><br></pre></td></tr></table></figure><p><code>docker.conf</code>に次の内容を記述します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/bin/dockerd -H fd:// -D --tls=<span class="literal">true</span> --tlscert=/var/docker/server.pem --tlskey=/var/docker/serverkey.pem -H tcp://192.168.59.3:2376</span><br></pre></td></tr></table></figure><p>変更を反映します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 変更の反映</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 起動確認</span></span><br><span class="line">ps aux | grep docker | grep -v grep</span><br></pre></td></tr></table></figure><h2 id="補足：Cloud-GarageでRancherを導入"><a href="#補足：Cloud-GarageでRancherを導入" class="headerlink" title="補足：Cloud GarageでRancherを導入"></a>補足：Cloud GarageでRancherを導入</h2><ul><li>Web画面からインスタンスを作成</li><li>コンソール画面からrancherユーザーのパスワードを変更</li><li>ローカルで<code>ssh rancher@IPアドレス</code>でログイン</li></ul><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="http://blog.aqutras.com/entry/2017/04/22/140037" target="_blank" rel="noopener">rancherでコンテナベースのサーバ運用を始めた話</a></li><li><a href="http://tech.innovation.co.jp/2017/01/06/vultrandlaravel.html%20xyfeRHoNHATyQ8LtBkuu2qNuotXP3w" target="_blank" rel="noopener">VultrとRancherで作るLaravel環境</a></li><li><a href="http://qiita.com/TongTheDopeness/items/e469ea72bcd2aaeb6af3" target="_blank" rel="noopener">RancherでDockerクラスタを構築する-③ RancherからVULTR APIでDockerホストを追加する</a></li><li><a href="https://help.sakura.ad.jp/hc/ja/articles/206208161-SSH%E6%8E%A5%E7%B6%9A%E3%81%AE%E8%A8%AD%E5%AE%9A%E5%A4%89%E6%9B%B4%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">SSH接続の設定変更方法</a></li><li><a href="http://rancher.com/docs/rancher/latest/en/cli/" target="_blank" rel="noopener">Rancher Command Line Interface (CLI)</a></li><li><a href="http://rancher.com/docs/rancher/v1.2/en/cli/commands/#rancher-docker-reference" target="_blank" rel="noopener">Rancher CLI Commands and Options</a></li><li><a href="http://docs.docker.jp/engine/admin/configuring.html" target="_blank" rel="noopener">各システムの Docker 設定と実行 — Docker-docs-ja 17.06.Beta ドキュメント</a></li><li><a href="http://qiita.com/koji_yusa/items/4a48f35e544ad8a65571" target="_blank" rel="noopener">メモ: Docker on Scaleway</a></li><li><a href="http://qiita.com/yudoufu/items/2aecba975f9267af6f19" target="_blank" rel="noopener">cronを2分,7分,12分…みたいな半端なタイミングで動かす</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「&lt;strong&gt;&lt;a href=&quot;http://rancher.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;rancher&lt;/a&gt;&lt;/strong&gt;」はWeb UIを使ってDockerクラスタを管理するためのツールです。今回は日本リージョンのあるVPSサービス「&lt;a href=&quot;http://www.vultr.com/?ref=6808408&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vultr&lt;/a&gt;」に環境構築を行う手順を紹介します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/vultr-rancher-landing-page.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://morizyun.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://morizyun.github.io/tags/Docker/"/>
    
      <category term="Rancher" scheme="http://morizyun.github.io/tags/Rancher/"/>
    
  </entry>
  
  <entry>
    <title>Redux入門 (React.js)</title>
    <link href="http://morizyun.github.io/blog/react-js-redux-introduction/"/>
    <id>http://morizyun.github.io/blog/react-js-redux-introduction/</id>
    <published>2017-08-16T15:00:00.000Z</published>
    <updated>2018-08-13T22:50:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>React.jsでアプリケーションを開発するときに使われる「<strong><a href="http://redux.js.org/" target="_blank" rel="noopener">Redux</a></strong>」の入門記事です。</p><p><img src="/img/redux-image-introduction-outline.png"></p><a id="more"></a><h2 id="Reduxとは"><a href="#Reduxとは" class="headerlink" title="Reduxとは"></a>Reduxとは</h2><p>React.jsが扱うUIのstate(状態)を管理するためのフレームワークです。React.jsで複雑なアプリケーションを作るとstateの変更箇所が複数に分散(componetが複数箇所で保持)して、管理が困難になるのを解決するためです。</p><h2 id="Reduxの要素"><a href="#Reduxの要素" class="headerlink" title="Reduxの要素"></a>Reduxの要素</h2><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a><code>Action</code></h3><ul><li><code>Action</code>は「何をする」という情報をもつオブジェクトです</li><li><code>Action</code>は<code>store.dispatch()</code>で store を変更する Reducer へ送られます</li><li>文字列の<code>type</code>プロパティを必ず持ちます</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ADD_TODO = <span class="string">'ADD_TODO'</span></span><br><span class="line">&#123;</span><br><span class="line">  type: ADD_TODO,</span><br><span class="line">  text: <span class="string">'Input user message 1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ActionCreator"><a href="#ActionCreator" class="headerlink" title="ActionCreator"></a><code>ActionCreator</code></h3><p><code>ActionCreator</code>は<code>Action</code>を生成するメソッドです。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: ADD_TODO,</span><br><span class="line">    text</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dispatch</code>するときは<code>ActionCreator</code>で作成した<code>action</code>を渡します。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">dispatch(addTodo(text))</span><br></pre></td></tr></table></figure><p>もしくは<code>dispatch</code>までを行う<code>ActionCreator</code>を準備する方法もあります。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> boundAddTodo = <span class="function">(<span class="params">text</span>) =&gt;</span> dispatch(addTodo(text));</span><br><span class="line"><span class="keyword">const</span> boundCompleteTodo = <span class="function">(<span class="params">index</span>) =&gt;</span> dispatch(completeTodo(index));</span><br></pre></td></tr></table></figure><p>reduxの<code>bindActionCreators()</code>を使う方法もあるようです。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; bindActionCreators &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> boundActionCreators = bindActionCreators(TodoActionCreators, dispatch)</span><br></pre></td></tr></table></figure><p>同期・非同期の ActionCreator をつくるTipsを別記事に書きました。</p><p><strong><a href="/javascript/react-js-redux-action-creator-sync-async.html">Redux で同期、非同期 API 通信を行う</a></strong></p><h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a><code>Store</code></h3><p><code>Store</code>はアプリケーションの状態(state)を保持する場所です。<code>Store</code>の役割は次のとおりです。</p><ul><li>stateを保持する</li><li><code>getState()</code>メソッドでstateにアクセスを許可する</li><li><code>dispatch(action)</code>メソッドでstateを更新する</li><li><code>subscribe(listener)</code>メソッドでリスナーを登録できる</li></ul><p><code>todo</code>のサンプルのstateは次のようになります。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  visibilityFilter: <span class="string">'SHOW_ALL'</span>,</span><br><span class="line">  todos: [</span><br><span class="line">    &#123;</span><br><span class="line">      text: <span class="string">'Input user message 1'</span>,</span><br><span class="line">      completed: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      text: <span class="string">'Past user message 0'</span>,</span><br><span class="line">      completed: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Store</code>には次のルールがあります。</p><ul><li>アプリケーション内で<code>Store</code>は1つのみとし、<code>State</code>は単独のオブジェクトとしてStoreに保持する必要があります</li><li><code>state</code>を直接変更することはせず、<code>Store</code>へdispatchすることでしか<code>state</code>は変更できません</li></ul><h3 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a><code>Reducer</code></h3><ul><li><code>Reducer</code>は<code>Action</code>と<code>state</code>から「新しい<code>state</code>」を返すメソッドです</li><li><code>Action</code>の<code>type</code>プロパティに応じて処理を書く必要があります</li><li>生成された「新しい<code>state</code>」は<code>store</code>に保持されます</li><li><code>state</code>にはUIの内容を入れないようにするのが推奨されます</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todos</span>(<span class="params">state = [], action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> ADD_TODO:</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        ...state,</span><br><span class="line">        &#123;</span><br><span class="line">          text: action.text,</span><br><span class="line">          completed: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    <span class="keyword">case</span> COMPLETE_TODO:</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        ...state.slice(<span class="number">0</span>, action.index),</span><br><span class="line">        <span class="built_in">Object</span>.assign(&#123;&#125;, state[action.index], &#123;</span><br><span class="line">          completed: <span class="literal">true</span></span><br><span class="line">        &#125;),</span><br><span class="line">        ...state.slice(action.index + <span class="number">1</span>)</span><br><span class="line">      ]</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visibilityFilter</span>(<span class="params">state = SHOW_ALL, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> SET_VISIBILITY_FILTER:</span><br><span class="line">      <span class="keyword">return</span> action.filter</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">todoApp</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    visibilityFilter: visibilityFilter(state.visibilityFilter, action),</span><br><span class="line">    todos: todos(state.todos, action)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Reducer</code>には次のルールがあります。</p><ul><li><code>Reducer</code>は現在の<code>state</code>と<code>action</code>を受けて新しい<code>state</code>を返すだけの純粋なメソッドとします</li><li>引数の値を変更したり、APIを呼び出すような副作用が発生すること、毎回値が変わることはNG</li></ul><h2 id="よく使うAPI"><a href="#よく使うAPI" class="headerlink" title="よく使うAPI"></a>よく使うAPI</h2><h3 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h3><p>Providerの目的は次の2つです。</p><ul><li>Reactコンポーネント内でreact-reduxの<code>connect</code>を使えるようにすること</li><li>ラップしたコンポーネントにstore情報を渡すこと</li></ul><h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><p>ReduxのStoreがReactにアクセスするための関数。</p><h3 id="サンプルコード"><a href="#サンプルコード" class="headerlink" title="サンプルコード"></a>サンプルコード</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore, combineReducers &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider store=&#123; store &#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// App.js</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  doSomething(e) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">app</span>: &#123; count &#125; &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">"App-header"</span>&gt;</span><br><span class="line">          &lt;h2&gt;Welcome to React&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;p className=<span class="string">"App-intro"</span>&gt;</span><br><span class="line">          To <span class="keyword">get</span> started, edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload.</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.doSomething&#125;&gt;hoge&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span>  &#123; <span class="attr">app</span>: state.app &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps)(App);</span><br></pre></td></tr></table></figure><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="http://qiita.com/MegaBlackLabel/items/df868e734d199071b883" target="_blank" rel="noopener">ReactとReduxを結ぶパッケージ「react-redux」についてconnectの実装パターンを試す</a></li><li><a href="http://qiita.com/kiita312/items/49a1f03445b19cf407b7" target="_blank" rel="noopener">Redux入門【ダイジェスト版】10分で理解するReduxの基礎</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React.jsでアプリケーションを開発するときに使われる「&lt;strong&gt;&lt;a href=&quot;http://redux.js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Redux&lt;/a&gt;&lt;/strong&gt;」の入門記事です。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/redux-image-introduction-outline.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Capybara + RSpec + Chrome headlessによるE2Eテスト[Rails]</title>
    <link href="http://morizyun.github.io/blog/ruby-capybara-feature-spec-chrome-headless-rails/"/>
    <id>http://morizyun.github.io/blog/ruby-capybara-feature-spec-chrome-headless-rails/</id>
    <published>2017-08-14T15:00:00.000Z</published>
    <updated>2017-08-16T22:58:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ruby on Railsのアプリケーションで「<a href="https://github.com/teamcapybara/capybara" target="_blank" rel="noopener">Capybara</a>」 + RSpec環境でヘッドレスChromeを使ってE2E(エンドツーエンド)のブラウザテストをするための手順です。ついでにCapybaraのチートシートと、RSpec以外でCapybaraを使う手順を書いておきます。</p><p><img src="/img/ruby-library-capybara-eye-catch.png"></p><a id="more"></a><h2 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h2><p>macOSの場合はChrome WebDriverをインストールします。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install chromedriver</span><br></pre></td></tr></table></figure><p>プロジェクト直下の<code>Gemfile</code>に以下を追加して、<code>bundle install</code>を実行。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">group <span class="symbol">:test</span> <span class="keyword">do</span></span><br><span class="line">   gem <span class="string">'rspec-rails'</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># E2E TEST</span></span><br><span class="line">   gem <span class="string">'capybara'</span>, <span class="symbol">require:</span> <span class="literal">false</span></span><br><span class="line">   gem <span class="string">'selenium-webdriver'</span>, <span class="symbol">require:</span> <span class="literal">false</span></span><br><span class="line"> <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>spec/supports/capybara.rb</code>を追加して以下を記入。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'capybara/rspec'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'selenium-webdriver'</span></span><br><span class="line"></span><br><span class="line">Capybara.register_driver <span class="symbol">:chrome</span> <span class="keyword">do</span> <span class="params">|app|</span></span><br><span class="line">  Capybara::Selenium::Driver.new(app, <span class="symbol">browser:</span> <span class="symbol">:chrome</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Capybara.register_driver <span class="symbol">:headless_chrome</span> <span class="keyword">do</span> <span class="params">|app|</span></span><br><span class="line">  capabilities = Selenium::WebDriver::Remote::Capabilities.chrome(</span><br><span class="line">    <span class="symbol">chromeOptions:</span> &#123; <span class="symbol">args:</span> <span class="string">%w[headless disable-gpu]</span> &#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  Capybara::Selenium::Driver.new(</span><br><span class="line">    app,</span><br><span class="line">    <span class="symbol">browser:</span> <span class="symbol">:chrome</span>,</span><br><span class="line">    <span class="symbol">desired_capabilities:</span> capabilities</span><br><span class="line">  )</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Capybara.javascript_driver = <span class="symbol">:headless_chrome</span></span><br></pre></td></tr></table></figure><p><code>rails_helper.rb</code>に<code>spec/supports/capybara.rb</code>を読み込む設定を追加。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'supports/capybara'</span></span><br></pre></td></tr></table></figure><h2 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h2><p>テストは次のように記述します。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'rails_helper'</span></span><br><span class="line"></span><br><span class="line">RSpec.describe <span class="string">'show sell information'</span>, <span class="symbol">type:</span> <span class="symbol">:feature</span>, <span class="symbol">js:</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">  before <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># prepare data</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  let!(<span class="symbol">:article</span>) &#123; create(<span class="symbol">:article</span>) &#125;</span><br><span class="line"></span><br><span class="line">  scenario <span class="string">'Go to product pageaaa from top page '</span> <span class="keyword">do</span></span><br><span class="line">    visit <span class="string">'/'</span></span><br><span class="line">    click_on article.title</span><br><span class="line">    expect(page.current_path).to eq <span class="string">"/articles/<span class="subst">#&#123;article.id&#125;</span>"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>これだけでテストの際にヘッドレスのChromeが立ち上がってテストを実施できます。</p><h2 id="Capybaraチートシート"><a href="#Capybaraチートシート" class="headerlink" title="Capybaraチートシート"></a>Capybaraチートシート</h2><h3 id="Click系"><a href="#Click系" class="headerlink" title="Click系"></a>Click系</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Click button by id, text, title or alt of img tag</span></span><br><span class="line">click_button(<span class="string">'button text'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Click link by id, text, title or alt of img tag</span></span><br><span class="line">click_link(<span class="string">'link text'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Click button or link</span></span><br><span class="line">click_on(<span class="string">'button or link text'</span>)</span><br></pre></td></tr></table></figure><h3 id="フォームの記入"><a href="#フォームの記入" class="headerlink" title="フォームの記入"></a>フォームの記入</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set text to text tag by id, name or label text</span></span><br><span class="line">fill_in(<span class="string">'some text'</span>, <span class="symbol">with:</span> <span class="string">'text_tag_selector'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select pulldown by id, name or label text</span></span><br><span class="line">select(<span class="string">'some option'</span>, <span class="symbol">with:</span> <span class="string">'select_tag_selctor'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select checkbox by id, name or label text</span></span><br><span class="line">check(<span class="string">'checkbox_selector'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deselect checkbox by id, name or label text</span></span><br><span class="line">uncheck(<span class="string">'checkbox_selector'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Choose radio button by id, name or label text</span></span><br><span class="line">choose(<span class="string">'yes'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Attach file</span></span><br><span class="line">attach_file(<span class="string">'attach_file_selector'</span>, <span class="string">'/path/to/dog.jpg'</span>)</span><br></pre></td></tr></table></figure><h3 id="要素の検索"><a href="#要素の検索" class="headerlink" title="要素の検索"></a>要素の検索</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Find element by css</span></span><br><span class="line">find(<span class="symbol">:css</span>, <span class="string">'css selector'</span>, options)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find element by xpath</span></span><br><span class="line">find(<span class="symbol">:xpath</span>, <span class="string">'xpath value'</span>, option)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set some text to some input form</span></span><br><span class="line">find(<span class="symbol">:xpath</span>, <span class="string">'some xpath'</span>).set(<span class="string">'some text'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show text in the element</span></span><br><span class="line">find(<span class="string">'id_selector'</span>, <span class="symbol">visible:</span> <span class="literal">false</span>).text</span><br><span class="line"></span><br><span class="line"><span class="comment"># Show value in the element</span></span><br><span class="line">find_field(<span class="string">'id_selector'</span>).value</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check checkbox</span></span><br><span class="line">find(<span class="string">'checkbox_selector'</span>).checked?</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check Selectbox</span></span><br><span class="line">find(<span class="string">'select_tag_selctor'</span>).selected?</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check Visibility</span></span><br><span class="line">find(<span class="string">'a'</span>, <span class="symbol">text:</span> <span class="string">'next'</span>).visible?</span><br></pre></td></tr></table></figure><h3 id="クエリ処理"><a href="#クエリ処理" class="headerlink" title="クエリ処理"></a>クエリ処理</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Check existance of the element by css</span></span><br><span class="line">expect(page).to have_css(<span class="string">'#something'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check existance of the element by xpath</span></span><br><span class="line">expect(page).to has_xpath(<span class="string">'#something'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check existance of the element by content</span></span><br><span class="line">expect(page).to has_content(<span class="string">'#something'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check no existance of the element by content</span></span><br><span class="line">expect(page).to has_no_content(<span class="string">'#something'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check no existance of title</span></span><br><span class="line">expect(page).to has_title(<span class="string">'#something'</span>)</span><br></pre></td></tr></table></figure><h3 id="スコープの設定"><a href="#スコープの設定" class="headerlink" title="スコープの設定"></a>スコープの設定</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Scope with xpath</span></span><br><span class="line">within(<span class="string">"//li[@id='example']"</span>) <span class="keyword">do</span></span><br><span class="line">  fill_in <span class="string">'Full Name'</span>, <span class="symbol">with:</span> <span class="string">'John Due'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Scope with CSS</span></span><br><span class="line">within(<span class="symbol">:css</span>, <span class="string">"li#example"</span>) <span class="keyword">do</span></span><br><span class="line">  fill_in <span class="string">'Full Name'</span>, <span class="symbol">:with</span> =&gt; <span class="string">'John Due'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Waiting &amp; try to check the element for 30 seconds</span></span><br><span class="line">Capybara.using_wait_time(<span class="number">30</span>) <span class="keyword">do</span></span><br><span class="line">  expect(find(<span class="string">'#message'</span>)).to have_text(<span class="string">'Complete'</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Click alert</span></span><br><span class="line">accept_alert <span class="keyword">do</span></span><br><span class="line">  click_on <span class="string">'Show Alert'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dismiss confirm</span></span><br><span class="line">dismiss_confirm <span class="keyword">do</span></span><br><span class="line">  click_on <span class="string">'Delete'</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Execute JavaScript</span></span><br><span class="line">execute_script <span class="string">'window.scrollTo(0, 900)'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Capture screen</span></span><br><span class="line">save_screenshot(<span class="string">'xxx.png'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Debugging</span></span><br><span class="line">save_and_open_page</span><br></pre></td></tr></table></figure><p>英語版のCapybaraチートシートは「<strong><a href="http://blog.morizyun.com/blog/capybara-selenium-webdriver-ruby/" target="_blank" rel="noopener">Ruby Capybara with selenium Cheat Sheat</a></strong>」です。</p><h2 id="RSpec以外でのCapybaraの利用"><a href="#RSpec以外でのCapybaraの利用" class="headerlink" title="RSpec以外でのCapybaraの利用"></a>RSpec以外でのCapybaraの利用</h2><p>RSpec以外でのCapybaraの利用手順です。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'capybara'</span></span><br><span class="line"></span><br><span class="line">Capybara.register_driver <span class="symbol">:chrome</span> <span class="keyword">do</span> <span class="params">|app|</span></span><br><span class="line">  Capybara::Selenium::Driver.new(app, <span class="symbol">browser:</span> <span class="symbol">:chrome</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Capybara.register_driver <span class="symbol">:headless_chrome</span> <span class="keyword">do</span> <span class="params">|app|</span></span><br><span class="line">  capabilities = Selenium::WebDriver::Remote::Capabilities.chrome(</span><br><span class="line">      <span class="symbol">chromeOptions:</span> &#123; <span class="symbol">args:</span> <span class="string">%w(headless disable-gpu)</span> &#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  Capybara::Selenium::Driver.new(</span><br><span class="line">      app,</span><br><span class="line">      <span class="symbol">browser:</span> <span class="symbol">:chrome</span>,</span><br><span class="line">      <span class="symbol">desired_capabilities:</span> capabilities</span><br><span class="line">  )</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Capybara.javascript_driver = <span class="symbol">:headless_chrome</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CapybaraSampleClass</span></span></span><br><span class="line">  <span class="keyword">include</span> Capybara::DSL</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sample_method</span></span></span><br><span class="line">    visit <span class="string">'http://example.selenium.com/'</span></span><br><span class="line">    fill_in(<span class="string">'name'</span>, <span class="symbol">with:</span> <span class="string">'sample user'</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">sample = CapybaraSampleClass.new</span><br><span class="line">sample.sample_method</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ruby cabybara_sample.rb</span><br></pre></td></tr></table></figure><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="http://qiita.com/jnchito/items/607f956263c38a5fec24" target="_blank" rel="noopener">使えるRSpec入門・その4「どんなブラウザ操作も自由自在！逆引きCapybara大辞典」</a></li><li><a href="https://relishapp.com/rspec/rspec-rails/docs/feature-specs/feature-spec" target="_blank" rel="noopener">Feature spec - Feature specs - RSpec Rails</a></li><li><a href="https://robots.thoughtbot.com/headless-feature-specs-with-chrome" target="_blank" rel="noopener">Headless Capybara Feature Specs with Chrome</a></li><li><a href="http://tech.speee.jp/entry/2017/06/15/135636" target="_blank" rel="noopener">RSpec の feature spec でヘッドレス Chrome を使う</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ruby on Railsのアプリケーションで「&lt;a href=&quot;https://github.com/teamcapybara/capybara&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Capybara&lt;/a&gt;」 + RSpec環境でヘッドレスChromeを使ってE2E(エンドツーエンド)のブラウザテストをするための手順です。ついでにCapybaraのチートシートと、RSpec以外でCapybaraを使う手順を書いておきます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/ruby-library-capybara-eye-catch.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Webサービス開発で必要なSEO基本知識</title>
    <link href="http://morizyun.github.io/blog/seo-basic-knowledge-google/"/>
    <id>http://morizyun.github.io/blog/seo-basic-knowledge-google/</id>
    <published>2017-08-08T15:00:00.000Z</published>
    <updated>2017-08-11T00:55:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>ここではWebサービスを開発をする上で必要になるSEOの基本的な知識を紹介します。</p><h2 id="Googleの公式ドキュメントを読む"><a href="#Googleの公式ドキュメントを読む" class="headerlink" title="Googleの公式ドキュメントを読む"></a>Googleの公式ドキュメントを読む</h2><p>&lt;img src=/img/seo-google-web-master-web-starter-guide.png alt=検索エンジン最適化スターターガイド /&gt;</p><p>Googleの公式ドキュメントによって、WebサービスでSEOのために守るべきルールを正しく把握できます。</p><ul><li><strong><a href="http://static.googleusercontent.com/media/www.google.co.jp/ja/jp/intl/ja/webmasters/docs/search-engine-optimization-starter-guide-ja.pdf" target="_blank" rel="noopener">検索エンジン最適化スターターガイド</a></strong></li><li><strong><a href="https://webmaster-ja.googleblog.com/" target="_blank" rel="noopener">Google ウェブマスター向け公式ブログ</a></strong></li><li><strong><a href="https://support.google.com/webmasters/answer/6023933?hl=ja&amp;ref_topic=6001171&amp;visit_id=1-636288475519664272-4117482757&amp;rd=1" target="_blank" rel="noopener">Google ウェブマスターアカデミー</a></strong></li></ul><h2 id="作成するコンテンツについて"><a href="#作成するコンテンツについて" class="headerlink" title="作成するコンテンツについて"></a>作成するコンテンツについて</h2><h3 id="Googleが重視するコンテンツのポイント"><a href="#Googleが重視するコンテンツのポイント" class="headerlink" title="Googleが重視するコンテンツのポイント"></a>Googleが重視するコンテンツのポイント</h3><ul><li>閲覧者に有益な情報を掲載して、ほかのサイトよりも質の高い記事を提供する</li><li>独自の調査、引用、リンク、レビュー、証言などを通じて、コンテンツの信頼性を高める</li><li>スペルミス、不自然な文体、事実誤認などを防ぐ。広告の量を多くしすぎない</li><li>SPサイトの内容が重要になる。SPサイトのランク付けを重視してPCも表示される</li></ul><h3 id="モバイルフレンドリーなUI-UXのポイント"><a href="#モバイルフレンドリーなUI-UXのポイント" class="headerlink" title="モバイルフレンドリーなUI/UXのポイント"></a>モバイルフレンドリーなUI/UXのポイント</h3><ul><li>フォントサイズは適切(16px以上)か</li><li>モバイル用のviewportをmeta要素に指定しているか</li><li>リンクの幅が狭すぎないか(誤作動の防止)</li><li>コンテンツが画面に収まっているか</li><li>サイトのファーストビューを1秒以内に表示する(レスポンスは3秒以内)</li><li>スマートフォンでは画像サイズを軽量化する(PCと出し分ける)</li></ul><p>「<strong><a href="https://support.google.com/webmasters/answer/6101188" target="_blank" rel="noopener">Googleのモバイルユーザビリティレポート</a></strong>」でチェックできますので、ぜひ試してみてください。</p><h3 id="WebサイトのURL構造を最適化する"><a href="#WebサイトのURL構造を最適化する" class="headerlink" title="WebサイトのURL構造を最適化する"></a>WebサイトのURL構造を最適化する</h3><p>URL構造(ルーティング)は、検索エンジンがクローリングしやすくなるための重要な要素のひとつです。</p><ul><li>URLにコンテンツに関連した単語を入れる</li><li>1つのページのURLは1つにする(ユニークにする)</li><li>URLのディレクトリ構造はできるだけシンプルに</li><li>論理的かつ人間が理解できるURLになるようにコンテンツを整理する</li><li>できるだけ不必要なパラメータを排除する</li></ul><h3 id="ナビゲーションをわかりやすくする"><a href="#ナビゲーションをわかりやすくする" class="headerlink" title="ナビゲーションをわかりやすくする"></a>ナビゲーションをわかりやすくする</h3><p>ナビゲーションはユーザーがどのように詳細ページにたどり着くかを常に意識してサイトを構築することが大切です。</p><ul><li>パンくずリストでユーザーの利便性を向上させる</li><li>URLの一部を取り除いても、URLがきちんと意味を持ち続ける(ページが存在する)ようにする</li><li>404ページを適切に配置する(役に立つ404ページを作る)</li></ul><h3 id="正しい方法でサイトを宣伝して被リンクを獲得しよう"><a href="#正しい方法でサイトを宣伝して被リンクを獲得しよう" class="headerlink" title="正しい方法でサイトを宣伝して被リンクを獲得しよう"></a>正しい方法でサイトを宣伝して被リンクを獲得しよう</h3><p>ソーシャルメディアの特性を理解して、ユーザーが興味をもつコンテンツに絞って紹介するようにしたり、関連するコミュニティへ参加していくことで自然な被リンクの獲得を目指しましょう。</p><h3 id="リッチスニペットを表示しよう"><a href="#リッチスニペットを表示しよう" class="headerlink" title="リッチスニペットを表示しよう"></a>リッチスニペットを表示しよう</h3><p>schema.orgで公表されている構造でマークアップすることで、Googleの検索結果にリッチスニペットを表示できる可能性があります。</p><p>詳細は「<a href="http://qiita.com/ryotanatsume/items/91d16968a4677443a6e7" target="_blank" rel="noopener">最新のSEO事情！schema.orgで構造化マークアップせよ！ - Qiita</a>」がわかりやすいので御覧ください。</p><h2 id="HTMLタグの適切な使い方"><a href="#HTMLタグの適切な使い方" class="headerlink" title="HTMLタグの適切な使い方"></a>HTMLタグの適切な使い方</h2><h3 id="titleタグ"><a href="#titleタグ" class="headerlink" title="titleタグ"></a>titleタグ</h3><p><code>title</code>タグはGoogleでの検索結果にメインで表示されます。</p><ul><li>ページごとに異なるタイトルを付ける</li><li>検索エンジンで表示されるのは32文字前後</li><li>ページの内容を推測できるタイトルにする</li></ul><h3 id="descriptionタグ"><a href="#descriptionタグ" class="headerlink" title="descriptionタグ"></a>descriptionタグ</h3><p><code>description</code>タグは検索結果のtitleの下部に表示されます。</p><ul><li>ページごとに固有で、ページ内容を正確にまとめる</li><li>検索エンジンで表示されるのはPCは124文字前後、スマートフォンは80文字以内</li></ul><h3 id="見出しタグを適切に伝えよう"><a href="#見出しタグを適切に伝えよう" class="headerlink" title="見出しタグを適切に伝えよう"></a>見出しタグを適切に伝えよう</h3><p><code>h1, h2, h3, h4, h5, h6</code>はHTML内での重要性を表すために使います。目次を作るようにコンテンツの何が主要なのかを考えて、コンテンツのポイントとなる部分に見出しタグを設置するようにしましょう。</p><h3 id="画像のalt属性は必ず設定する"><a href="#画像のalt属性は必ず設定する" class="headerlink" title="画像のalt属性は必ず設定する"></a>画像のalt属性は必ず設定する</h3><p>「<strong>画像のalt属性</strong>」は画像が表示されない際にユーザーに代替情報を知らせることと、検索エンジンに画像に関する情報を知らせることの2つの意味があります。alt属性もアンカーテキストなどと同じく、簡潔で説明的なテキストを心がけましょう。</p><h3 id="適切なアンカーテキストを設置しよう"><a href="#適切なアンカーテキストを設置しよう" class="headerlink" title="適切なアンカーテキストを設置しよう"></a>適切なアンカーテキストを設置しよう</h3><p>アンカーテキストとは「<strong>リンクが設定されたテキスト</strong>」のことです。アンカーテキストでは次のことに気を付けましょう。</p><ul><li>簡潔で説明的なテキストを心がける</li><li>リンクだとすぐに分かるようなCSS/テキストスタイルを使う</li><li>内部リンクのアンカーテキストも簡潔で意味のあるテキストにする</li></ul><h3 id="ページネーションのrel属性を設定しよう"><a href="#ページネーションのrel属性を設定しよう" class="headerlink" title="ページネーションのrel属性を設定しよう"></a>ページネーションのrel属性を設定しよう</h3><p>ページネーションを設定した際はrel属性で<code>next</code>と<code>prev</code>を指定する必要があります。</p><h3 id="コメント欄や掲示板にはnofollowを設定しよう"><a href="#コメント欄や掲示板にはnofollowを設定しよう" class="headerlink" title="コメント欄や掲示板にはnofollowを設定しよう"></a>コメント欄や掲示板にはnofollowを設定しよう</h3><p>コメント欄や掲示板などユーザーが気軽に書き込める場所は、時としてスパムの標的となります。スパムサイトへのリンクがページ内に存在すると、「<strong>Googleがそのサイト自体の評価を下げてしまう可能性があります</strong>」。これを防ぐためにユーザーが自由に操作できるリンクにはrel属性の値に<code>no follow</code>をセットするようにしましょう。</p><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="https://goo.gl/EGZ6uK" target="_blank" rel="noopener">【2017年度版】Webエンジニアでも最低限押さえておきたい、SEO施策のまとめと実装 - Qiita</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ここではWebサービスを開発をする上で必要になるSEOの基本的な知識を紹介します。&lt;/p&gt;
&lt;h2 id=&quot;Googleの公式ドキュメントを読む&quot;&gt;&lt;a href=&quot;#Googleの公式ドキュメントを読む&quot; class=&quot;headerlink&quot; title=&quot;Googleの
      
    
    </summary>
    
      <category term="SEO" scheme="http://morizyun.github.io/categories/SEO/"/>
    
    
      <category term="SEO" scheme="http://morizyun.github.io/tags/SEO/"/>
    
      <category term="Marketing" scheme="http://morizyun.github.io/tags/Marketing/"/>
    
  </entry>
  
  <entry>
    <title>RSpecの便利な機能Tips</title>
    <link href="http://morizyun.github.io/blog/rspec-tips-rails-ruby/"/>
    <id>http://morizyun.github.io/blog/rspec-tips-rails-ruby/</id>
    <published>2017-08-05T15:00:00.000Z</published>
    <updated>2017-08-12T08:53:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>RSpecの中でよく使う機能をいくつか紹介します。</p><a id="more"></a><h2 id="RSpecでスタブの作成"><a href="#RSpecでスタブの作成" class="headerlink" title="RSpecでスタブの作成"></a>RSpecでスタブの作成</h2><p><code>allow</code>メソッドでスタブ(テストの際、そのモジュールの代わりに用いる代用品)を構築できます。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">RSpec.describe <span class="string">"Specifying a return value"</span> <span class="keyword">do</span></span><br><span class="line">  it <span class="string">"returns the specified return value"</span> <span class="keyword">do</span></span><br><span class="line">    dbl = double</span><br><span class="line">    allow(dbl).to receive(<span class="symbol">:foo</span>).and_return(<span class="number">14</span>)</span><br><span class="line">    expect(dbl.foo).to eq(<span class="number">14</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>allow_any_instance_of</code>を使うと生成されたインスタンスすべてに対して、スタブを設定できます。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">RSpec.describe <span class="string">"allow_any_instance_of"</span> <span class="keyword">do</span></span><br><span class="line">  it <span class="string">"returns the specified value on any instance of the class"</span> <span class="keyword">do</span></span><br><span class="line">    allow_any_instance_of(Object).to receive(<span class="symbol">:foo</span>).and_return(<span class="symbol">:return_value</span>)</span><br><span class="line"></span><br><span class="line">    o = Object.new</span><br><span class="line">    expect(o.foo).to eq(<span class="symbol">:return_value</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="例外処理のテスト"><a href="#例外処理のテスト" class="headerlink" title="例外処理のテスト"></a>例外処理のテスト</h2><p>エラーを通知するような場合のRSpecは次のように記述します。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">RSpec.describe <span class="string">"calling a missing method"</span> <span class="keyword">do</span></span><br><span class="line">  it <span class="string">"raises"</span> <span class="keyword">do</span></span><br><span class="line">    expect &#123; Object.new.foo &#125;.to raise_error(RuntimeError, <span class="string">'oops'</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="ログのテスト"><a href="#ログのテスト" class="headerlink" title="ログのテスト"></a>ログのテスト</h2><p>Railsでログのテストを行いたい場合は次のように記述します。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">it <span class="string">'writes some message in log'</span> <span class="keyword">do</span></span><br><span class="line">  expect(Rails.logger).to receive(<span class="symbol">:info</span>).with(some message)</span><br><span class="line">  do_something() <span class="comment"># 実際の動作を行う</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="FactoryGirlで連番を付ける"><a href="#FactoryGirlで連番を付ける" class="headerlink" title="FactoryGirlで連番を付ける"></a>FactoryGirlで連番を付ける</h2><p>FactoryGrilで同じ値にならないように連番をつけていくのは<code>sequence</code>です。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">sequence(<span class="symbol">:email</span>) &#123; <span class="params">|n|</span> <span class="string">"person<span class="subst">#&#123;n&#125;</span>@example.com"</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="aggregate-failures：テストをまとめて検証"><a href="#aggregate-failures：テストをまとめて検証" class="headerlink" title="aggregate_failures：テストをまとめて検証"></a><code>aggregate_failures</code>：テストをまとめて検証</h2><p>RSpec 3.3からの新機能<code>aggregate_failures</code>を使うと</p><ul><li>テストのセットアップ部分を共通化(毎回実行しないように分離)</li><li>複数テストを書いて一部が失敗してもすべて検証</li></ul><p>を実現できます。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'spec_helper'</span></span><br><span class="line"></span><br><span class="line">describe <span class="string">'Slow spec'</span> <span class="keyword">do</span></span><br><span class="line">  let(<span class="symbol">:names</span>) &#123; <span class="string">%w(John Mark Nick)</span> &#125;</span><br><span class="line">  before <span class="keyword">do</span> <span class="comment"># テストのセットアップ部分</span></span><br><span class="line">    puts <span class="string">"Waiting..."</span></span><br><span class="line">    sleep <span class="number">3</span></span><br><span class="line">    puts <span class="string">"OK."</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  it <span class="string">'has valid items'</span> <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 検証するテストの対象</span></span><br><span class="line">    aggregate_failures <span class="string">'testing items'</span> <span class="keyword">do</span></span><br><span class="line">      expect(names.size).to eq <span class="number">2</span></span><br><span class="line">      expect(names.uniq).to contain_exactly(*names)</span><br><span class="line">      expect(names).to <span class="keyword">include</span> <span class="string">'Curl'</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>これを全体に適用する場合は、<code>spec/spec_helper.rb</code>に次のように記述します。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">RSpec.configure <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">  config.define_derived_metadata <span class="keyword">do</span> <span class="params">|meta|</span></span><br><span class="line">    meta[<span class="symbol">:aggregate_failures</span>] = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="文字列・配列の後ろ側のマッチャー：end-with"><a href="#文字列・配列の後ろ側のマッチャー：end-with" class="headerlink" title="文字列・配列の後ろ側のマッチャー：end_with"></a>文字列・配列の後ろ側のマッチャー：<code>end_with</code></h2><p><code>end_with</code>は文字列・配列の後ろ側が期待どおりかをチェックするためのマッチャー(matcher)です。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">expect(<span class="string">"this string"</span>).to end_with <span class="string">"string"</span></span><br><span class="line">expect(<span class="string">"this string"</span>).not_to end_with <span class="string">"stringy"</span></span><br><span class="line">expect([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]).to end_with <span class="number">1</span>, <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="時間の掛かったSpecを表示する"><a href="#時間の掛かったSpecを表示する" class="headerlink" title="時間の掛かったSpecを表示する"></a>時間の掛かったSpecを表示する</h2><p>RSpecの実行後に、時間の掛かったSpecをn件表示する設定です。プロジェクト直下の<code>.rspec</code>に以下を追記します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--profile 任意の数</span><br></pre></td></tr></table></figure><h2 id="警告をエラーにする"><a href="#警告をエラーにする" class="headerlink" title="警告をエラーにする"></a>警告をエラーにする</h2><p>RSpecで警告が発生する場合はエラーにする設定。<code>spec/rails_helper.rb</code>に以下を追記。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">RSpec.configure <span class="keyword">do</span> <span class="params">|config|</span></span><br><span class="line">  config.raise_on_warning = <span class="literal">true</span> <span class="comment"># 警告をエラーにする</span></span><br><span class="line">  config.raise_errors_for_deprecations! <span class="comment"># 非推奨警告をエラーに変換</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="補足：itとspecifyの使い分け"><a href="#補足：itとspecifyの使い分け" class="headerlink" title="補足：itとspecifyの使い分け"></a>補足：<code>it</code>と<code>specify</code>の使い分け</h2><p>人間の読みやすい自然言語的な使い分けを心がける。</p><ul><li><code>it</code> =&gt; itを主語として使うと自然な場合に使う</li><li><code>specify</code> =&gt; 明示する、明記するなどの意味。itを主語似できないような場合に使う</li></ul><h2 id="補足：初心者向けドキュメント"><a href="#補足：初心者向けドキュメント" class="headerlink" title="補足：初心者向けドキュメント"></a>補足：初心者向けドキュメント</h2><p><a href="https://goo.gl/yWYWWT" target="_blank" rel="noopener">Everyday Rails - RSpecによるRailsテスト入門</a></p><p>RSpecの書き方をサンプルアプリケーションを例に順番に学ぶことができる電子書籍です。RSpecを書き始めた人が最初に読むのに最適な日本語ドキュメントです。</p><h2 id="補足：実践的なRSpecスタイルガイド"><a href="#補足：実践的なRSpecスタイルガイド" class="headerlink" title="補足：実践的なRSpecスタイルガイド"></a>補足：実践的なRSpecスタイルガイド</h2><p><a href="https://github.com/willnet/rspec-style-guide" target="_blank" rel="noopener">RSpec スタイルガイド</a></p><p>可読性が高く、無駄のない効率的なテストを作っていくのに適したRSpecのスタイルガイドです。RSpecを書いていく中で身についたノウハウが詰まっているので初心者〜中級者向けにオススメです。</p><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="https://relishapp.com/rspec/rspec-mocks/v/3-6/docs/configuring-responses/returning-a-value" target="_blank" rel="noopener">Returning a value - Configuring responses - RSpec Mocks - RSpec</a></li><li><a href="https://relishapp.com/rspec/rspec-mocks/docs/working-with-legacy-code/any-instance" target="_blank" rel="noopener">Any Instance - Working with legacy code - RSpec Mocks - RSpec</a></li><li><a href="http://blog.morizyun.com/blog/mock-stub-outline-rspec-ruby/" target="_blank" rel="noopener">What are mock and stub used in unit testing?</a></li><li><a href="https://goo.gl/uDO8PA" target="_blank" rel="noopener">Aggregating Failures</a></li><li><a href="http://qiita.com/Momozono/items/c27c838a594c69cba50f" target="_blank" rel="noopener">Rspecの”should”か”expect”か。”it”か”specify”か</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RSpecの中でよく使う機能をいくつか紹介します。&lt;/p&gt;
    
    </summary>
    
      <category term="RSpec" scheme="http://morizyun.github.io/categories/RSpec/"/>
    
    
  </entry>
  
  <entry>
    <title>Rails 5.1へのアップデート</title>
    <link href="http://morizyun.github.io/blog/rails-versionup-update-rails5.1/"/>
    <id>http://morizyun.github.io/blog/rails-versionup-update-rails5.1/</id>
    <published>2017-08-01T15:00:00.000Z</published>
    <updated>2017-08-12T08:38:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ruby on Rails 5.0系から5.1系へのアップデートに関するTipsです。</p><h2 id="主な変更点"><a href="#主な変更点" class="headerlink" title="主な変更点"></a>主な変更点</h2><h3 id="yarnのサポート"><a href="#yarnのサポート" class="headerlink" title="yarnのサポート"></a>yarnのサポート</h3><p>npmによるJavaScriptのライブラリを<a href="https://yarnpkg.com/lang/en/" target="_blank" rel="noopener">yarn</a>で管理できます。これにより、npmで管理されたライブラリを気軽に利用できます。</p><p><code>bin/yarn install</code>でnpmのライブラリをインストールできます。</p><h3 id="webpackのサポート-任意"><a href="#webpackのサポート-任意" class="headerlink" title="webpackのサポート(任意)"></a>webpackのサポート(任意)</h3><p><code>--webpack</code>オプションを付けると、webpackを使ってJSをコンパイルできます。<br>新規プロジェクトの場合は次のように<code>--webpack</code>をつけると有効になります。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rails new プロジェクト名 --webpack</span><br></pre></td></tr></table></figure><p>既存プロジェクトに導入する場合は<code>Gemfile</code>に次のコードを追加してください。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">em <span class="string">'webpacker'</span></span><br></pre></td></tr></table></figure><p>そして次のコマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/rails webpacker:install</span><br></pre></td></tr></table></figure><h3 id="jQueryに依存しなくなった"><a href="#jQueryに依存しなくなった" class="headerlink" title="jQueryに依存しなくなった"></a>jQueryに依存しなくなった</h3><p>RailsのJavaScript実装の<code>jquery-ujs</code>がjQueryではなく、pure JavaScriptになり「<a href="https://rubygems.org/gems/rails-ujs" target="_blank" rel="noopener">rails-ujs</a>」となるそうです。</p><h3 id="インテグレーションが容易に"><a href="#インテグレーションが容易に" class="headerlink" title="インテグレーションが容易に"></a>インテグレーションが容易に</h3><p><code>SystemTestCase</code>を使うことで、インテグレーションテストを実装しやすくなりました。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'application_system_test_case'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Users::CreateTest</span> &lt; ApplicationSystemTestCase</span></span><br><span class="line">  test <span class="string">'adding a new user'</span> <span class="keyword">do</span></span><br><span class="line">    visit users_path</span><br><span class="line">    click_on <span class="string">'New User'</span></span><br><span class="line"></span><br><span class="line">    fill_in <span class="string">'Name'</span>, <span class="symbol">with:</span> <span class="string">'Arya'</span></span><br><span class="line">      click_on <span class="string">'Create User'</span></span><br><span class="line">      assert_text <span class="string">'Arya'</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>標準で作成される<code>ApplicationSystemTestCase</code>でCapybaraのドライバやブラウザ、画面解像度を設定できます。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require</span> test_helper</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationSystemTestCase</span> &lt; ActionDispatch::SystemTestCase</span></span><br><span class="line">  driven_by <span class="symbol">:selenium</span>, <span class="symbol">using:</span> <span class="symbol">:chrome</span>, <span class="symbol">screen_size:</span> [<span class="number">1400</span>, <span class="number">1400</span>]</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="config-secrets-ymlを暗号化"><a href="#config-secrets-ymlを暗号化" class="headerlink" title="config/secrets.ymlを暗号化"></a>config/secrets.ymlを暗号化</h3><p>config/secrets.ymlを次のコマンドで暗号化します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/rails secrets:setup</span><br></pre></td></tr></table></figure><p>実行すると<code>config/secrets.yml.key</code>(鍵)と<code>config/secrets.yml.enc</code>(暗号化されたファイル)が生成されます。<br><code>config/secrets.yml.key</code>は本番環境の環境変数<code>RAILS_MASTER_KEY</code>に設定します。</p><h3 id="Action-Mailerにパラメータを渡せる"><a href="#Action-Mailerにパラメータを渡せる" class="headerlink" title="Action Mailerにパラメータを渡せる"></a>Action Mailerにパラメータを渡せる</h3><p>Action Mailerにパラメータを渡せるので、DRYに書きやすくなりました。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InvitationsMailer</span> &lt; ApplicationMailer</span></span><br><span class="line">  before_action &#123; @inviter, @invitee = params[<span class="symbol">:inviter</span>], params[<span class="symbol">:invitee</span>] &#125;</span><br><span class="line">  before_action &#123; @account = params[<span class="symbol">:inviter</span>].account &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">account_invitation</span></span></span><br><span class="line">    mail <span class="symbol">subject:</span> <span class="comment">#&#123;<span class="doctag">@inviter</span>.name&#125; invited you to their Basecamp (#&#123;<span class="doctag">@account</span>.name&#125;)</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">InvitationsMailer.with(<span class="symbol">inviter:</span> person_a, <span class="symbol">invitee:</span> person_b).account_invitation.deliver_later</span><br></pre></td></tr></table></figure><h3 id="directed-routes"><a href="#directed-routes" class="headerlink" title="directed routes"></a>directed routes</h3><p><code>routes.rb</code>に次のようなHelperを書くことができるようになりました。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">direct <span class="symbol">:commentable</span> <span class="keyword">do</span> <span class="params">|model|</span></span><br><span class="line">  [ model, <span class="symbol">anchor:</span> model.dom_id ] <span class="comment"># modelの内容で分岐することもできます</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">direct <span class="symbol">:main</span> <span class="keyword">do</span></span><br><span class="line">  &#123; <span class="symbol">controller:</span> <span class="string">'pages'</span>, <span class="symbol">action:</span> <span class="string">'index'</span>, <span class="symbol">subdomain:</span> <span class="string">'www'</span> &#125;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="resolved-routes"><a href="#resolved-routes" class="headerlink" title="resolved routes"></a>resolved routes</h3><p><code>routes.rb</code>に次のようなルーティングを記述できるようになりました。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">resource <span class="symbol">:basket</span></span><br><span class="line">direct(<span class="class"><span class="keyword">class</span>: <span class="title">Basket</span>) &#123; [:<span class="title">basket</span>] &#125;</span></span><br></pre></td></tr></table></figure><p>すると次のように<code>form</code>側を記述できます。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;%= form_for @basket <span class="keyword">do</span> <span class="params">|form|</span> %&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br></pre></td></tr></table></figure><h3 id="form-withメソッド"><a href="#form-withメソッド" class="headerlink" title="form_withメソッド"></a>form_withメソッド</h3><h4 id="URLを直接指定する"><a href="#URLを直接指定する" class="headerlink" title="URLを直接指定する"></a>URLを直接指定する</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;%= form_with <span class="symbol">url:</span> posts_path <span class="keyword">do</span> <span class="params">|form|</span> %&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br></pre></td></tr></table></figure><p>生成されるHTMLは次のようになります。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">/posts</span> <span class="attr">method</span>=<span class="string">post</span> <span class="attr">data-remote</span>=<span class="string">true</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">text</span> <span class="attr">name</span>=<span class="string">post[title]</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="モデルオブジェクトを渡す"><a href="#モデルオブジェクトを渡す" class="headerlink" title="モデルオブジェクトを渡す"></a>モデルオブジェクトを渡す</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;%= form_with <span class="symbol">model:</span> Post.first <span class="keyword">do</span> <span class="params">|form|</span> %&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;% <span class="keyword">end</span> %&gt;</span><br></pre></td></tr></table></figure><p>生成されるHTMLは次のようになります。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">/posts/1</span> <span class="attr">method</span>=<span class="string">post</span> <span class="attr">data-remote</span>=<span class="string">true</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">hidden</span> <span class="attr">name</span>=<span class="string">_method</span> <span class="attr">value</span>=<span class="string">patch</span>&gt;</span></span><br><span class="line">  &lt;input type=text name=post[title] value=&lt;the title of the post&gt;&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Time型もタイムゾーンを考慮"><a href="#Time型もタイムゾーンを考慮" class="headerlink" title="Time型もタイムゾーンを考慮"></a>Time型もタイムゾーンを考慮</h3><p>Datetime型だけでなく、Time型もタイムゾーンを考慮した実装に変わりました。</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># DatetimeとTime型の両方でTimezoneをつける</span></span><br><span class="line">config.active_record.time_zone_aware_types = %i[datetime time]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rails 5以前のようにDatetime型のみTimezoneをつける</span></span><br><span class="line">config.active_record.time_zone_aware_types = %i[datetime]</span><br></pre></td></tr></table></figure><h2 id="アップデートの手順"><a href="#アップデートの手順" class="headerlink" title="アップデートの手順"></a>アップデートの手順</h2><ul><li>Gemfileの<code>rails</code>バージョンを5.1にアップデート</li><li><code>HashWithIndifferentAccess</code>は速度の問題があるため、<code>ActiveSupport::HashWithIndifferentAccess</code>に移行</li><li><code>config/secrets.yml</code>を使っている場合は、キーをシンボルで読み込むようにする</li></ul><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="http://guides.rubyonrails.org/5_1_release_notes.html" target="_blank" rel="noopener">Ruby on Rails 5.1 Release Notes</a></li><li><a href="https://goo.gl/OkfvpN" target="_blank" rel="noopener">A Guide for Upgrading Ruby on Rails</a></li><li><a href="http://qiita.com/jnchito/items/b0b47ecfc33de4f9b72f" target="_blank" rel="noopener">Rails 5.1の変更点まとめ</a></li><li><a href="http://nomnel.hatenablog.com/entry/2016/07/18/232121" target="_blank" rel="noopener">Rails 5.1 から time 型の列もタイムゾーン考慮するようになるとのこと</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ruby on Rails 5.0系から5.1系へのアップデートに関するTipsです。&lt;/p&gt;
&lt;h2 id=&quot;主な変更点&quot;&gt;&lt;a href=&quot;#主な変更点&quot; class=&quot;headerlink&quot; title=&quot;主な変更点&quot;&gt;&lt;/a&gt;主な変更点&lt;/h2&gt;&lt;h3 id=&quot;ya
      
    
    </summary>
    
      <category term="Rails" scheme="http://morizyun.github.io/categories/Rails/"/>
    
    
      <category term="Rails" scheme="http://morizyun.github.io/tags/Rails/"/>
    
      <category term="Ruby" scheme="http://morizyun.github.io/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>Scalaのコレクション(Array/List/Map/Vector/Set)</title>
    <link href="http://morizyun.github.io/blog/scala-basic-collection-array-list-map-set/"/>
    <id>http://morizyun.github.io/blog/scala-basic-collection-array-list-map-set/</id>
    <published>2017-07-20T15:00:00.000Z</published>
    <updated>2017-08-11T00:55:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Scalaのコレクションを表す次のデータ構造の紹介です。</p><ul><li><code>Array</code> =&gt; 配列</li><li><code>List</code> =&gt; リスト構造</li><li><code>Vector</code> =&gt; 追加削除、検索の速度が一定な万能なデータ構造</li><li><code>Map</code> =&gt; キーと値のセット</li><li><code>Set</code> =&gt; 集合</li><li><code>Range</code> =&gt; 範囲</li></ul><a id="more"></a><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a><code>Array</code></h2><p><code>Array</code>は一般的なプログラミング言語の配列です。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> arr = <span class="type">Array</span>[<span class="type">Int</span>](<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">// 型を明確に指定した定義</span></span><br><span class="line"><span class="keyword">val</span> arr = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">// 型推論を行った場合の定義</span></span><br><span class="line"></span><br><span class="line">arr(<span class="number">0</span>) <span class="comment">//=&gt; 1</span></span><br></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a><code>List</code></h2><p><code>List</code>は一度作成したら中身を変更できない、<code>immutable</code>な構造をしています。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> list: <span class="type">List</span>[<span class="type">Int</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line">list.map &#123; n =&gt; <span class="comment">// 関数リテラル</span></span><br><span class="line">  n * n * n</span><br><span class="line">&#125;.filter &#123; n =&gt;</span><br><span class="line">  n % <span class="number">2</span> == <span class="number">1</span></span><br><span class="line">&#125;.sum <span class="comment">// =&gt; 1225</span></span><br></pre></td></tr></table></figure><p><code>List</code>の特徴は次のとおりです。</p><ul><li><code>List</code>は先頭へのアクセスは早い</li><li>末尾への要素の追加、ランダムな要素へのアクセスは遅い</li></ul><h3 id="Nil"><a href="#Nil" class="headerlink" title="Nil"></a><code>Nil</code></h3><p><code>Nil</code>は空のListを表すオブジェクトです。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> a1 = <span class="type">Nil</span> <span class="comment">//=&gt; List()</span></span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title="::"></a><code>::</code></h3><p><code>::</code>(コンス)はすでにある<code>List</code>に要素をつけるメソッドです。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> a1 = <span class="number">1</span>::<span class="type">Nil</span> <span class="comment">//=&gt; List(1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> a2 = <span class="number">2</span>::a1 <span class="comment">//=&gt; List(2, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> a3 = <span class="number">1</span> :: <span class="number">2</span> :: <span class="number">3</span> :: <span class="number">4</span> :: <span class="type">Nil</span> <span class="comment">//=&gt; List(1, 2, 3, 4)</span></span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title="++"></a><code>++</code></h3><p><code>++</code>は<code>List</code>どうしを連結できます。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> a1 = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>) ++ <span class="type">List</span>(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">//=&gt; List(1, 2, 3, 4)</span></span><br></pre></td></tr></table></figure><h3 id="mkString"><a href="#mkString" class="headerlink" title="mkString"></a><code>mkString</code></h3><p><code>mkString</code>メソッドはListを結合して文字列にします。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).mkString <span class="comment">//=&gt; 1234</span></span><br><span class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).mkString(<span class="string">", "</span>) <span class="comment">//=&gt; 1, 2, 3, 4</span></span><br><span class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).mkString(<span class="string">"["</span>, <span class="string">"-"</span>, <span class="string">"]"</span>) <span class="comment">// =&gt; [1-2-3-4]</span></span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a><code>map</code></h3><p><code>map</code>メソッドは各要素を加工して新しい<code>List</code>を返します。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).map(x =&gt; x * <span class="number">2</span>) <span class="comment">//=&gt; List(2, 4, 6, 8)</span></span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a><code>filter</code></h3><p><code>filter</code>メソッドは条件にあった要素を抽出した新しい<code>List</code>を返します。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).filter(x =&gt; x % <span class="number">2</span> == <span class="number">0</span>) <span class="comment">//=&gt; List(2, 4)</span></span><br></pre></td></tr></table></figure><h3 id="find"><a href="#find" class="headerlink" title="find"></a><code>find</code></h3><p><code>find</code>メソッドは条件にあった最初の要素を返します。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).find(x =&gt; x % <span class="number">2</span> == <span class="number">0</span>) <span class="comment">//=&gt; Some(2)</span></span><br></pre></td></tr></table></figure><h3 id="count"><a href="#count" class="headerlink" title="count"></a><code>count</code></h3><p><code>count</code>メソッドは条件にマッチする要素の件数を返します。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).count(x =&gt; x % <span class="number">2</span> == <span class="number">0</span>) <span class="comment">//=&gt; 2</span></span><br></pre></td></tr></table></figure><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><p><code>Vector</code>は要素の追加・削除、ランダムなアクセスで一定の速度で処理を行える<code>immutable</code>なデータ構造です。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// データの追加</span></span><br><span class="line"><span class="type">Vector</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>):+ <span class="number">5</span> <span class="comment">//=&gt; Vector(1, 2, 3, 4, 5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// データの更新</span></span><br><span class="line"><span class="type">Vector</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>).updated(<span class="number">1</span>, <span class="number">6</span>) <span class="comment">//=&gt; Vector(1, 6, 3, 4)</span></span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p><code>Map</code>はキーとバリューのペアのデータ構造です。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> urls = <span class="type">Map</span>(</span><br><span class="line">  <span class="string">"apple"</span>  -&gt; <span class="string">"https://www.apple.com/jp/"</span>,</span><br><span class="line">  <span class="string">"google"</span> -&gt; <span class="string">"https://www.google.co.jp/"</span></span><br><span class="line">)</span><br><span class="line">urls.get(<span class="string">"google"</span>) <span class="comment">//=&gt; Option[String] = Some(https://www.google.co.jp/)</span></span><br></pre></td></tr></table></figure><p>通常の<code>Map</code>は<code>immutable</code>なデータ構造です。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> m = <span class="type">Map</span>(<span class="string">"hoge"</span> -&gt; <span class="number">1</span>, <span class="string">"fuga"</span> -&gt; <span class="number">2</span>, <span class="string">"pugi"</span> -&gt; <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// アップデートされた新しいMapを返す</span></span><br><span class="line">m.updated(<span class="string">"hoge"</span>, <span class="number">4</span>) <span class="comment">//=&gt; Map(hoge -&gt; 4, fuga -&gt; 2, pugi -&gt; 3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元のMapはそのまま</span></span><br><span class="line">m <span class="comment">//=&gt; Map(hoge -&gt; 1, fuga -&gt; 2, pugi -&gt; 3)</span></span><br></pre></td></tr></table></figure><p><code>mutable</code>なデータ構造の<code>Map</code>も利用できます。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> m = mutable.<span class="type">Map</span>(<span class="string">"hoge"</span> -&gt; <span class="number">1</span>, <span class="string">"fuga"</span> -&gt; <span class="number">2</span>, <span class="string">"pugi"</span> -&gt; <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 値をアップデート</span></span><br><span class="line">m(<span class="string">"fuga"</span>) = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// アップデートした値が使われる</span></span><br><span class="line">m <span class="comment">//=&gt; Map(fuga -&gt; 5, pugi -&gt; 3, hoge -&gt; 1)</span></span><br></pre></td></tr></table></figure><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p><code>Set</code>は値の集合を表すデータ構造です。<code>Set</code>も通常は<code>immutable</code>なデータ構造です。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> s = <span class="type">Set</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4を削除した新しいSet</span></span><br><span class="line">s - <span class="number">4</span>　<span class="comment">//=&gt; Set(1, 2, 3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元のSetはそのまま</span></span><br><span class="line">s <span class="comment">//=&gt; Set(1, 2, 3, 4)</span></span><br></pre></td></tr></table></figure><p><code>immutable</code>なデータ構造の<code>Set</code>も利用できます。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> s = mutable.<span class="type">Set</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4を削除</span></span><br><span class="line">s -= <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元のSetも変更</span></span><br><span class="line">s <span class="comment">//=&gt; Set(1, 2, 3)</span></span><br></pre></td></tr></table></figure><h2 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h2><p><code>Range</code>は範囲を表すオブジェクトで<code>to</code>や<code>until</code>を使って生成できます。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> to <span class="number">5</span> <span class="comment">//=&gt; Range 1 to 5</span></span><br><span class="line"></span><br><span class="line">(<span class="number">1</span> to <span class="number">6</span>).toList <span class="comment">//=&gt; List(1, 2, 3, 4, 5, 6)</span></span><br><span class="line">(<span class="number">1</span> until <span class="number">5</span>).toList <span class="comment">//=&gt; List(1, 2, 3, 4)</span></span><br></pre></td></tr></table></figure><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="https://dwango.github.io/scala_text/" target="_blank" rel="noopener">Introduction · Scala研修テキスト</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Scalaのコレクションを表す次のデータ構造の紹介です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Array&lt;/code&gt; =&amp;gt; 配列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List&lt;/code&gt; =&amp;gt; リスト構造&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Vector&lt;/code&gt; =&amp;gt; 追加削除、検索の速度が一定な万能なデータ構造&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Map&lt;/code&gt; =&amp;gt; キーと値のセット&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Set&lt;/code&gt; =&amp;gt; 集合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Range&lt;/code&gt; =&amp;gt; 範囲&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Scala" scheme="http://morizyun.github.io/categories/Scala/"/>
    
    
      <category term="Scala" scheme="http://morizyun.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Scalaの基本的な文法</title>
    <link href="http://morizyun.github.io/blog/scala-basic-grammer-beginner/"/>
    <id>http://morizyun.github.io/blog/scala-basic-grammer-beginner/</id>
    <published>2017-07-18T15:00:00.000Z</published>
    <updated>2017-08-11T00:55:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Scalaの基本的な文法についての紹介です。<code>Hello World</code>の流れや型の定義、Scala特有の機能を紹介します。</p><a id="more"></a><h2 id="MacへのScalaのインストール"><a href="#MacへのScalaのインストール" class="headerlink" title="MacへのScalaのインストール"></a>MacへのScalaのインストール</h2><p>HomebrewでScalaをインストール。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install scala　sbt</span><br></pre></td></tr></table></figure><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p><code>HelloWorld.scala</code>を作成。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> &#123;</span><br><span class="line">    println(<span class="string">"Hello World!"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>build.sbt</code>を作成して以下を記入。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">scalaVersion := <span class="string">"2.12.2"</span></span><br><span class="line"></span><br><span class="line">scalacOptions ++= <span class="type">Seq</span>(<span class="string">"-deprecation"</span>, <span class="string">"-feature"</span>, <span class="string">"-unchecked"</span>, <span class="string">"-Xlint"</span>)</span><br></pre></td></tr></table></figure><p>次のコマンドでコンパイルして実行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sbt</span><br><span class="line"><span class="comment">#...</span></span><br><span class="line">&gt; run <span class="comment">#=&gt; Hello World!</span></span><br></pre></td></tr></table></figure><h2 id="コンソールを呼び出す"><a href="#コンソールを呼び出す" class="headerlink" title="コンソールを呼び出す"></a>コンソールを呼び出す</h2><p>ScalaのREPLの呼び出しは<code>sbt console</code>で呼び出せます。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sbt console</span><br></pre></td></tr></table></figure><p>REPLの終了は<code>:quit</code> or <code>:q</code>。</p><h2 id="コメント"><a href="#コメント" class="headerlink" title="コメント"></a>コメント</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// コメントA</span></span><br><span class="line"><span class="comment">/* コメントB */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * コメントC</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="変数"><a href="#変数" class="headerlink" title="変数"></a>変数</h2><p><code>var 変数:型 = 値</code>の形式。型は型推論で省略が可能。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> id:<span class="type">Int</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> str:<span class="type">String</span> = <span class="string">"abc"</span></span><br><span class="line"><span class="keyword">var</span> flag:<span class="type">Boolean</span> = _ <span class="comment">// _で初期値が設定される</span></span><br></pre></td></tr></table></figure><p><code>var</code>は再代入可能な変数(mutable)、<code>val</code>は再代入ができない変数(immutable)を示す。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> y = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span> <span class="comment">// エラーは出ない</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> x = <span class="number">3</span></span><br><span class="line">x = <span class="number">4</span> <span class="comment">// valだとエラーになる</span></span><br></pre></td></tr></table></figure><h2 id="定数"><a href="#定数" class="headerlink" title="定数"></a>定数</h2><p><code>val 変数:型 = 値</code>の形式。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> <span class="type">NUM</span>:<span class="type">Int</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="型"><a href="#型" class="headerlink" title="型"></a>型</h2><table><thead><tr><th>型</th><th>Javaでの型</th><th>説明</th><th>初期値</th></tr></thead><tbody><tr><td><code>Boolean</code></td><td>boolean</td><td><code>true</code>、<code>false</code>の真偽値</td><td><code>false</code></td></tr><tr><td><code>Char</code></td><td>char</td><td>1文字(2byte)</td><td><code>\0</code></td></tr><tr><td><code>String</code></td><td>String</td><td>文字列</td><td><code>null</code></td></tr><tr><td><code>Int</code></td><td>int</td><td>32bitの整数</td><td><code>0</code></td></tr><tr><td><code>Long</code></td><td>long</td><td>64bitの整数</td><td><code>0</code></td></tr><tr><td><code>Float</code></td><td>float</td><td>32bitの浮動小数</td><td><code>0.0</code></td></tr><tr><td><code>Double</code></td><td>double</td><td>64bitの浮動小数</td><td><code>0.0</code></td></tr></tbody></table><h2 id="文字列補完"><a href="#文字列補完" class="headerlink" title="文字列補完"></a>文字列補完</h2><p><code>s&quot;...&quot;</code>とすると<code>$xxx</code>の変数を展開して文字列置換してくれます。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> name = <span class="string">"hoge"</span></span><br><span class="line"><span class="keyword">val</span> value = <span class="number">404</span></span><br><span class="line"><span class="string">s"<span class="subst">$name</span> room number is <span class="subst">$value</span>"</span></span><br><span class="line"><span class="comment">// =&gt; hoge room number is 404</span></span><br></pre></td></tr></table></figure><h2 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h2><p>複数のデータを格納できるコンテナ型で、違う型も格納できる。22個が格納できるオブジェクトの上限。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> t = (<span class="number">1</span>, <span class="string">"hoge"</span>, <span class="number">2.2</span>)</span><br></pre></td></tr></table></figure><h2 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h2><p><code>Unit</code>は戻り値のない型。<code>void</code>と同じもの。</p><h2 id="制御文"><a href="#制御文" class="headerlink" title="制御文"></a>制御文</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// if</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) println(<span class="string">"A"</span>) <span class="keyword">else</span> println(<span class="string">"B"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// while</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) println(<span class="string">"A"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// for</span></span><br><span class="line"><span class="keyword">for</span> (i &lt;- (<span class="number">1</span> to <span class="number">9</span>)) &#123;</span><br><span class="line">  println(i)</span><br><span class="line">&#125; <span class="comment">// =&gt; 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// match (Switch文的なもの)</span></span><br><span class="line"><span class="keyword">var</span> one = <span class="number">1</span></span><br><span class="line">one <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span> =&gt; println(<span class="string">"one"</span>)</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span> =&gt; println(<span class="string">"two"</span>)</span><br><span class="line">  <span class="keyword">case</span> _ =&gt; println(<span class="string">"other"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="関数"><a href="#関数" class="headerlink" title="関数"></a>関数</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通常の書き方</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ワンライナー</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_num</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>) = a + b</span><br></pre></td></tr></table></figure><p><code>return</code>は省略可能で、省略時は最後の文が評価されます</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hoge</span></span>(): <span class="type">String</span> = &#123;</span><br><span class="line">  <span class="string">"hoge"</span> + <span class="string">"hoge"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この場合の<code>{}</code>は<code>{}式</code>です。メソッド構文に特別に<code>{}</code>が含まれているわけではないです。</p><h2 id="クラス"><a href="#クラス" class="headerlink" title="クラス"></a>クラス</h2><p>クラスのフィールドは<code>val</code>は<code>getter</code>のみ提供、<code>var</code>は<code>getter</code>と<code>setter</code>を提供。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">_name: <span class="type">String</span>, _age: <span class="type">Int</span></span>) </span>&#123; <span class="comment">// コンストラクタ</span></span><br><span class="line">  <span class="keyword">val</span> name = _name <span class="comment">// getterのみ提供</span></span><br><span class="line">  <span class="keyword">var</span> age = _age <span class="comment">// getterとsetterを提供</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">say</span></span>(msg: <span class="type">String</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    name + <span class="string">": "</span> + msg + <span class="string">"ですワン"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">println(<span class="keyword">new</span> <span class="type">Dog</span>(<span class="string">"ぽち"</span>).say(<span class="string">"ハロー"</span>)) <span class="comment">//=&gt; ぽち: ハローですワン</span></span><br></pre></td></tr></table></figure><p>継承は<code>extends</code>、メソッドオーバーライドする際は<code>override</code>修飾子を追加。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoldenRetriever</span>(<span class="params">_name: <span class="type">String</span>, _age: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Dog</span>(<span class="params">_name: <span class="type">String</span>, _age: <span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">say</span></span>(msg: <span class="type">String</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    name + <span class="string">": "</span> + msg + <span class="string">"ですゴールデン！"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">println(<span class="keyword">new</span> <span class="type">GoldenRetriever</span>(<span class="string">"ぷち"</span>, <span class="number">10</span>).say(<span class="string">"こんにちは"</span>)) <span class="comment">//=&gt; ぷち: こんにちはですゴールデン！</span></span><br></pre></td></tr></table></figure><p>そのほかにも<code>private</code>, <code>protected</code>修飾子などがあります。</p><h2 id="例外処理"><a href="#例外処理" class="headerlink" title="例外処理"></a>例外処理</h2><p><code>try</code>、<code>catch</code>は値を返すが、<code>finally</code>は値を返さないので注意。</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// do Something</span></span><br><span class="line"><span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> e: <span class="type">IOException</span> =&gt; <span class="comment">// do Something</span></span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// do Something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="https://github.com/hatena/Hatena-Textbook/blob/master/foundation-of-programming-scala.md" target="_blank" rel="noopener">Hatena-Textbook/foundation-of-programming-scala.md at master</a></li><li><a href="https://dwango.github.io/scala_text/" target="_blank" rel="noopener">Introduction · Scala研修テキスト</a></li><li><a href="http://qiita.com/kitaro_tn/items/6d5336eaf5538404ea61" target="_blank" rel="noopener">Scalaのざっくり入門 - Qiita</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Scalaの基本的な文法についての紹介です。&lt;code&gt;Hello World&lt;/code&gt;の流れや型の定義、Scala特有の機能を紹介します。&lt;/p&gt;
    
    </summary>
    
      <category term="Scala" scheme="http://morizyun.github.io/categories/Scala/"/>
    
    
      <category term="Scala" scheme="http://morizyun.github.io/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap3の無料テーマ・格安有料テーマまとめのまとめ</title>
    <link href="http://morizyun.github.io/blog/bootstrap3-twitter-free-theme-list/"/>
    <id>http://morizyun.github.io/blog/bootstrap3-twitter-free-theme-list/</id>
    <published>2017-06-21T15:00:00.000Z</published>
    <updated>2017-08-11T00:55:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Twitter Bootstrap3がスタンダードになってきて、今までのBootstrapだけだとうまくカバーできなくなってきたので、新しくBootstrap3の無料テーマと有料だけど格安でクオリティの高いテーマのまとめを厳選してみました！俺得記事です。</p><a id="more"></a><h2 id="無料テーマまとめ"><a href="#無料テーマまとめ" class="headerlink" title="無料テーマまとめ"></a>無料テーマまとめ</h2><p><strong><a href="http://photoshopvip.net/102391" target="_blank" rel="noopener">【Bootstrap製】90ページ超えの無料HTML5／CSS3テンプレート素材 Titan</a></strong><br>無料のテーマが整理されてまとまっています。特に90ページ以上の大量のサンプルHTMLは、一部パーツを探して使うのに便利そうです！</p><h2 id="無料テーマ"><a href="#無料テーマ" class="headerlink" title="無料テーマ"></a>無料テーマ</h2><p><strong><a href="http://bootswatch.com/" target="_blank" rel="noopener">Bootswatch: Free themes for Bootstrap</a></strong><br><br>15種類のBootstrap3対応のテーマがまとまっている。着実にテーマが増えていったり、クオリティが改善し続けているのがすばらしい！</p><p><strong><a href="http://liginc.co.jp/web/tool/other-tool/68811" target="_blank" rel="noopener">フラットデザインの参考にも！Bootstrap3対応のかっこよすぎる無料テーマまとめ</a></strong><br><br>LIGさん渾身の記事。クオリティが高めのテーマばかり、きれいにまとまっています。</p><p><strong><a href="http://photoshopvip.net/archives/58440" target="_blank" rel="noopener">Bootstrap利用、高品質＆クリエイティブな無料HTMLテンプレート素材まとめ</a></strong><br><br>Photoshop VIPが提供しているだけあってクオリティが中〜上のテーマが集まっています。すばらしい！</p><p><strong><a href="http://www.flatstrap.org/" target="_blank" rel="noopener">Flatstrap by Littlesparkvt.com</a></strong><br><br>Bootstrap3に対応したフラットデザインのテーマ。かなりきれい！</p><p><strong><a href="http://todc.github.io/todc-bootstrap/" target="_blank" rel="noopener">TODC Bootstrap</a></strong><br><br>Bootstrap3に対応したGoogleスタイルのテーマ。</p><p><strong><a href="http://almsaeedstudio.com/" target="_blank" rel="noopener">AdminLTE</a></strong><br><br>Bootstrap3対応の管理画面のテーマ。ハイセンス！</p><p><strong><a href="http://www.flathemes.com/index.html" target="_blank" rel="noopener">Bootflat</a></strong><br><br>Flat UI KITというオープンソースをベースにしたBootstrap3のテーマ。</p><p><strong><a href="http://fezvrasta.github.io/bootstrap-material-design/" target="_blank" rel="noopener">Bootstrap Material</a></strong><br><br>マテリアルデザイン風のBootstrapテーマ！</p><h2 id="テンプレート"><a href="#テンプレート" class="headerlink" title="テンプレート"></a>テンプレート</h2><p><strong><a href="http://www.bootstrapzero.com/" target="_blank" rel="noopener">Free Bootstrap Templates &amp; Themes</a></strong><br><br>Bootsrap3のテンプレートがメインでマトメらているサイト。うまく使いこなせばかなり省力化できそう！</p><h2 id="格安でクオリティの高いBootstrap-Theme"><a href="#格安でクオリティの高いBootstrap-Theme" class="headerlink" title="格安でクオリティの高いBootstrap Theme"></a>格安でクオリティの高いBootstrap Theme</h2><p><strong><a href="https://wrapbootstrap.com/" target="_blank" rel="noopener">WrapBootstrap - Bootstrap Themes &amp; Templates</a></strong><br><br>約$5-20の格安の料金でかなりクオリティが高い商品が集まっています。力を入れたサイトを作る場合はだいたいここで買っちゃっています。</p><h2 id="補足：CDN"><a href="#補足：CDN" class="headerlink" title="補足：CDN"></a>補足：CDN</h2><p><strong><a href="http://www.bootstrapcdn.com/" target="_blank" rel="noopener">Bootstrap CDN</a></strong><br><br>BootstrapのCDNサイト。サイトにアップロードしなくても使えるので、いろいろ応用がききそう！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Twitter Bootstrap3がスタンダードになってきて、今までのBootstrapだけだとうまくカバーできなくなってきたので、新しくBootstrap3の無料テーマと有料だけど格安でクオリティの高いテーマのまとめを厳選してみました！俺得記事です。&lt;/p&gt;
    
    </summary>
    
      <category term="Ruby" scheme="http://morizyun.github.io/categories/Ruby/"/>
    
    
      <category term="Ruby" scheme="http://morizyun.github.io/tags/Ruby/"/>
    
      <category term="Bootstrap" scheme="http://morizyun.github.io/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Spring FrameworkのControllerの基本的なアノテーション</title>
    <link href="http://morizyun.github.io/blog/java-spring-framework-controller-annotation/"/>
    <id>http://morizyun.github.io/blog/java-spring-framework-controller-annotation/</id>
    <published>2017-06-21T15:00:00.000Z</published>
    <updated>2017-08-11T00:55:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaのSpring FrameworkのMVCのControllerでよく使う基本的なアノテーション<code>@RequestMapping</code>や、<code>@BindingResult</code>、オブジェクトの<code>Model</code>などを紹介します。</p><a id="more"></a><h2 id="Controllerの処理対象のパスを指定：-RequestMapping"><a href="#Controllerの処理対象のパスを指定：-RequestMapping" class="headerlink" title="Controllerの処理対象のパスを指定：@RequestMapping"></a>Controllerの処理対象のパスを指定：<code>@RequestMapping</code></h2><h3 id="value属性"><a href="#value属性" class="headerlink" title="value属性"></a>value属性</h3><p>Java Spring MVCのControllerの処理対象となるURLを<code>@RequestMapping</code>アノテーションの<code>value</code>オプションで指定します。(<code>value</code>は最初の<code>/</code>は省略できます)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// value で処理対象のパスを指定</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"books"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// valueだけなら省略可能</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"books"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 複数のパスを指定できる</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = &#123; <span class="string">"books"</span>, <span class="string">"magazines"</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="method属性"><a href="#method属性" class="headerlink" title="method属性"></a>method属性</h3><p>GETやPOSTなどの<code>method</code>オプションで指定します。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// methodでmethodを指定</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"books"</span>, method = RequestMethod.GET)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 複数のmethodを指定できる</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"books"</span>, method = &#123; RequestMethod.GET, RequestMethod.POST &#125;)</span><br></pre></td></tr></table></figure><p><code>GET POST, PUT, PATCH, DELETE, HEAD, OPTIONS, TRACE</code>を指定可能です。</p><h2 id="GETリクエストのアノテーション：-GetMapping"><a href="#GETリクエストのアノテーション：-GetMapping" class="headerlink" title="GETリクエストのアノテーション：@GetMapping"></a>GETリクエストのアノテーション：<code>@GetMapping</code></h2><p><code>@RequestMapping</code>のGETリクエスト用のアノテーションが<code>@GetMapping</code>です。記述の省略と可読性の向上が目的です。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"books"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">index</span><span class="params">()</span> </span>&#123; <span class="comment">/* ...*/</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="POSTリクエストのアノテーション：-PostMapping"><a href="#POSTリクエストのアノテーション：-PostMapping" class="headerlink" title="POSTリクエストのアノテーション：@PostMapping"></a>POSTリクエストのアノテーション：<code>@PostMapping</code></h2><p><code>@RequestMapping</code>のPOSTリクエスト用のアノテーションが<code>@PostMapping</code>です。記述の省略と可読性の向上が目的です。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"books/create"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">create</span><span class="params">()</span> </span>&#123; <span class="comment">/* ...*/</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="RESTパラーメータの受取：-PathVaribable"><a href="#RESTパラーメータの受取：-PathVaribable" class="headerlink" title="RESTパラーメータの受取：@PathVaribable"></a>RESTパラーメータの受取：<code>@PathVaribable</code></h2><p><code>@PathVaribable</code>は<code>/books/1</code>のようにREST形式のURLのパラメータ<code>1</code>を受け取るのに使います。value属性は省略でき、省略した場合は引数名をパラメータ名と解釈します。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/books/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(@PathVaribable(<span class="keyword">default</span> = <span class="number">1</span>)</span> Integer id, ModelMap model) </span>&#123;</span><br><span class="line">  Book book = bookService.findById(id);</span><br><span class="line">  model.addAttribute(<span class="string">"book"</span>, book);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="リクエストパラーメータの受取：-RequestParam"><a href="#リクエストパラーメータの受取：-RequestParam" class="headerlink" title="リクエストパラーメータの受取：@RequestParam"></a>リクエストパラーメータの受取：<code>@RequestParam</code></h2><p><code>@RequestParam</code>は<code>?order=price</code>のようにリクエストパラメータ<code>order</code>を受け取るのに使います。value属性は省略でき、省略した場合は引数名をパラメータ名と解釈します。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/books"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(@PathVaribable(<span class="keyword">default</span> = <span class="string">"updatedTime"</span>)</span> String order, ModelMap model) </span>&#123;</span><br><span class="line">  List&lt;Book&gt; books = bookService.findAllOrderBy(order);</span><br><span class="line">  model.addAttribute(<span class="string">"books"</span>, books);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="コントローラからビューに値を渡す：ModelMap"><a href="#コントローラからビューに値を渡す：ModelMap" class="headerlink" title="コントローラからビューに値を渡す：ModelMap"></a>コントローラからビューに値を渡す：<code>ModelMap</code></h2><p>コントローラからビューに値を渡すのに、メソッドの仮引数に<code>ModelMap</code>を指定する方法があります。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/books"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sample2</span><span class="params">(ModelMap model)</span> </span>&#123;</span><br><span class="line">    model.addAttribute(<span class="string">"message"</span>, <span class="string">"こんにちは"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Model</code>、<code>ModelMap</code>、<code>ModelAndView</code>の簡単な説明です。</p><table><thead><tr><th>オプション</th><th>説明</th></tr></thead><tbody><tr><td><code>Model</code></td><td><code>Model</code>はインターフェースで<code>addAttribute</code>メソッドなどをもつ</td></tr><tr><td><code>ModelMap</code></td><td><code>ModelMap</code>はMAPインターフェースの実装。Mapメソッドをもと</td></tr><tr><td><code>ModelAndView</code></td><td><code>ModelMap</code>とviewオブジェクトのコンテナ</td></tr></tbody></table><h2 id="RequestMappingのアクション前に実行：-ModelAttribute"><a href="#RequestMappingのアクション前に実行：-ModelAttribute" class="headerlink" title="RequestMappingのアクション前に実行：@ModelAttribute"></a>RequestMappingのアクション前に実行：<code>@ModelAttribute</code></h2><p><code>@ModelAttribute</code>をメソッドにつけると<code>RequestMapping</code>のアクションを実行する前にそのメソッドが呼び出されます。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"create"</span>)</span><br><span class="line"><span class="function">String <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 2番目に実行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ModelAttribute</span></span><br><span class="line"><span class="function">SomeForm <span class="title">setupForm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1番目に実行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@ModelAttribute</code>はアクションの引数に付与することもできます。その場合は自動的に同名のフィールドにマッピングされ、リクエストスコープにも設定されます。</p><h2 id="バリデーション結果を格納：-BindingResult"><a href="#バリデーション結果を格納：-BindingResult" class="headerlink" title="バリデーション結果を格納：@BindingResult"></a>バリデーション結果を格納：<code>@BindingResult</code></h2><p><code>@BindingResult</code>はメソッド引数として直前のフォームオブジェクトのバリデーション結果を格納します。<code>@BindingResult</code>はメソッドの引数の並び順をバリデーション対象の直後にすることが必須なので注意してください。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"create"</span>, params = <span class="string">"confirm"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">createConfirm</span><span class="params">(@Validated CommentForm form, BindingResult result, Model model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> createRedo(form, model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> VIEW_BASE + <span class="string">"createConfirm"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="リダイレクト先にオブジェクトを送る：RedirectAttributes"><a href="#リダイレクト先にオブジェクトを送る：RedirectAttributes" class="headerlink" title="リダイレクト先にオブジェクトを送る：RedirectAttributes"></a>リダイレクト先にオブジェクトを送る：<code>RedirectAttributes</code></h2><p><code>RedirectAttributes</code>はリダイレクト先にオブジェクトを送るのに使います。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"create"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">create</span><span class="params">(@Validated AbcForm form, BindingResult result, Model model, RedirectAttributes redirectAttributes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> createRedo(form, model);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// データの登録処理..</span></span><br><span class="line"></span><br><span class="line">    redirectAttributes.addFlashAttribute(<span class="string">"message"</span>, <span class="string">"新規レコードを作成しました"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:/articles"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RedirectAttributes</code>の<code>addFlashAttribute</code>と<code>addAttribute</code>メソッドを紹介します。</p><table><thead><tr><th>メソッド</th><th>説明</th></tr></thead><tbody><tr><td><code>addFlashAttribute</code></td><td>sessionでオブジェクトを送付するため、リダイレクト時に一度だけ有効なデータの受け渡し方になります</td></tr><tr><td><code>addAttribute</code></td><td>URLパラメータでオブジェクトを送付するため、その後何度でも有効な文字列となります</td></tr></tbody></table><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="https://goo.gl/bxwy0c" target="_blank" rel="noopener">【Spring MVC】@RequestMapping の基本</a></li><li><a href="https://goo.gl/BHXC9F" target="_blank" rel="noopener">java - Combine GET and POST request methods in Spring</a></li><li><a href="https://goo.gl/rQ77uH" target="_blank" rel="noopener">Spring Controllerの@PathVariableと@RequestParamの使い分け</a></li><li><a href="https://goo.gl/ydGzpw" target="_blank" rel="noopener">コントローラからビューに値を渡す</a></li><li><a href="https://stackoverflow.com/a/18487335" target="_blank" rel="noopener">spring - What are the differences between Model, ModelMap, and ModelAndView?</a></li><li><a href="http://m12i.hatenablog.com/entry/2014/11/16/173614" target="_blank" rel="noopener">Spring MVCのドキュメント「コントローラを実装する」を読む</a></li><li><a href="http://acro-engineer.hatenablog.com/entry/20121124/1353754476" target="_blank" rel="noopener">FlashScopeという考え方</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaのSpring FrameworkのMVCのControllerでよく使う基本的なアノテーション&lt;code&gt;@RequestMapping&lt;/code&gt;や、&lt;code&gt;@BindingResult&lt;/code&gt;、オブジェクトの&lt;code&gt;Model&lt;/code&gt;などを紹介します。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://morizyun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://morizyun.github.io/tags/Java/"/>
    
      <category term="Spring Framework" scheme="http://morizyun.github.io/tags/Spring-Framework/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis / Javaのオブジェクトの永続化支援</title>
    <link href="http://morizyun.github.io/blog/java-library-mybatis-or-mapper-database/"/>
    <id>http://morizyun.github.io/blog/java-library-mybatis-or-mapper-database/</id>
    <published>2017-06-16T15:00:00.000Z</published>
    <updated>2017-08-11T00:55:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>「<a href="http://www.mybatis.org/mybatis-3/java-api.html" target="_blank" rel="noopener">mybatis</a>」はJavaオブジェクトとSQLを紐付ける永続化のためのフレームワークです。SQLベースで実装できるため実行するSQLに柔軟性があり、実行SQLの見通しもよく、メンテナンスしやすさを保てるのが特徴です。</p><a id="more"></a><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p><code>build.gradle</code>に次の内容を追加して<code>gradle build</code>を実行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">repositories &#123;</span><br><span class="line">mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: &apos;java&apos;</span><br><span class="line">apply plugin: &apos;eclipse&apos;</span><br><span class="line"></span><br><span class="line">version = &apos;0.0.1-SNAPSHOT&apos;</span><br><span class="line">sourceCompatibility = 1.8</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">compile &apos;org.mybatis:mybatis:3.4.4&apos;</span><br><span class="line">compile group: &apos;postgresql&apos;, name: &apos;postgresql&apos;, version: &apos;9.0-801.jdbc4&apos;</span><br><span class="line">compileOnly &apos;org.projectlombok:lombok:1.16.16&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DBの準備"><a href="#DBの準備" class="headerlink" title="DBの準備"></a>DBの準備</h2><h3 id="PostgreSQLのインストール"><a href="#PostgreSQLのインストール" class="headerlink" title="PostgreSQLのインストール"></a>PostgreSQLのインストール</h3><p>PostgreSQLのインストールは「<a href="/database/postgresql-install-mac.html">macOS SierraへのPostgreSQLインストール</a>」を参照ください。</p><h3 id="DBとユーザーの作成"><a href="#DBとユーザーの作成" class="headerlink" title="DBとユーザーの作成"></a>DBとユーザーの作成</h3><p>DBとユーザーを作成します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">createuser -s mybatis_test -P</span><br><span class="line">createdb mybatis_test -O mybatis_test</span><br></pre></td></tr></table></figure><p>SQLを実行してテストテーブルを作成します。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_table (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>,</span><br><span class="line">  <span class="keyword">content</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_table <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'hoge'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_table <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'fuga'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_table <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'pugi'</span>);</span><br></pre></td></tr></table></figure><h2 id="SQLパラメータ-amp-結果をJavaオブジェクトで取得"><a href="#SQLパラメータ-amp-結果をJavaオブジェクトで取得" class="headerlink" title="SQLパラメータ&amp;結果をJavaオブジェクトで取得"></a>SQLパラメータ&amp;結果をJavaオブジェクトで取得</h2><p>以下を実現するコードを紹介します。</p><ul><li>SQLのパラメータを渡す</li><li>受け取った結果をJavaオブジェクトに渡す</li></ul><h3 id="フォルダ構成"><a href="#フォルダ構成" class="headerlink" title="フォルダ構成"></a>フォルダ構成</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── build.gradle</span><br><span class="line">└── src</span><br><span class="line">    └── main</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── sample</span><br><span class="line">        │       └── mybatis</span><br><span class="line">        │           ├── MybatisSample.java</span><br><span class="line">        │           ├── TestTable.java</span><br><span class="line">        │           └── TestTableMapper.java</span><br><span class="line">        └── resources</span><br><span class="line">            ├── mybatis-config.xml</span><br><span class="line">            └── sample_mapper.xml</span><br></pre></td></tr></table></figure><h3 id="設定ファイル"><a href="#設定ファイル" class="headerlink" title="設定ファイル"></a>設定ファイル</h3><p>DBとの接続情報を記述した<code>mybatis-config.xml</code>は次のとおりです。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"sample_id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"sample_id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"org.postgresql.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:postgresql://localhost:5432/mybatis_test"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"mybatis_test"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"mybatis_test"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"sample_mapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>sample_mapper.xml</code>へのSQLの定義は次のように行います。パラメータは<code>#{xxx}</code>で定義します。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"sample.mybatis.TestTableMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findBy"</span> <span class="attr">resultType</span>=<span class="string">"sample.mybatis.TestTable"</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            *</span><br><span class="line">        FROM</span><br><span class="line">            test_table</span><br><span class="line">        WHERE</span><br><span class="line">            id = #&#123;id&#125;</span><br><span class="line">            AND content = #&#123;content&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h3><p>MyBatisのMapperを使うことで直感的で読みやすく、SQLと紐付けを行うことができます。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mapper インターフェース</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestTableMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ステートメントID と同じ名前のメソッドを定義する</span></span><br><span class="line">  <span class="function">List&lt;TestTable&gt; <span class="title">findBy</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id, @<span class="title">Param</span><span class="params">(<span class="string">"content"</span>)</span> String content)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SQLの結果をマッピングするJavaオブジェクト"><a href="#SQLの結果をマッピングするJavaオブジェクト" class="headerlink" title="SQLの結果をマッピングするJavaオブジェクト"></a>SQLの結果をマッピングするJavaオブジェクト</h3><p>SQLの結果をマッピングするJavaオブジェクト<code>TestTable.java</code>を定義します。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TestTable</span><span class="params">(<span class="keyword">int</span> id, String content)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.content = content;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.content;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"TestTable [id="</span> + id + <span class="string">", content="</span> + content + <span class="string">"]"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="実行コード"><a href="#実行コード" class="headerlink" title="実行コード"></a>実行コード</h3><p>パラメータを渡して、対応するデータを取得するJavaのコードは次のとおりです。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisSample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 設定ファイルを読み込む</span></span><br><span class="line">    <span class="keyword">try</span> (InputStream in = MybatisSample.class.getResourceAsStream(<span class="string">"/mybatis-config.xml"</span>)) &#123;</span><br><span class="line">      <span class="comment">// 設定ファイルからSQL実行のためSqlSessionFactoryを生成</span></span><br><span class="line">      SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// SqlSessionFactory =&gt; SqlSessionを生成</span></span><br><span class="line">      <span class="keyword">try</span> (SqlSession session = factory.openSession()) &#123;</span><br><span class="line">        TestTableMapper mapper = session.getMapper(TestTableMapper.class);</span><br><span class="line"></span><br><span class="line">        mapper.findBy(<span class="number">1</span>, <span class="string">"hoge"</span>).forEach(System.out::println);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="実行結果"><a href="#実行結果" class="headerlink" title="実行結果"></a>実行結果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TestTable [id=1, values=hoge]</span><br></pre></td></tr></table></figure><p>SQLへの引数の受け渡しと実行結果をJavaオブジェクトにセットできていることがわかります。</p><h2 id="ifタグで動的にSQLを変更"><a href="#ifタグで動的にSQLを変更" class="headerlink" title="ifタグで動的にSQLを変更"></a>ifタグで動的にSQLを変更</h2><p>SQL内に<code>&lt;if&gt;&lt;/if&gt;</code>タグでSQLのwhere構文を値を動的に変更できます。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"sample.mybatis.TestTableMapper"</span>&gt;</span><br><span class="line">  &lt;select id=<span class="string">"findBy"</span> resultType=<span class="string">"sample.mybatis.TestTable"</span>&gt;</span><br><span class="line">    SELECT</span><br><span class="line">      *</span><br><span class="line">    FROM</span><br><span class="line">      test_table</span><br><span class="line">&lt;where&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">"id &gt; 0"</span>&gt;</span><br><span class="line">AND id = #&#123;id&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">"values_args != null"</span>&gt;</span><br><span class="line">AND values = #&#123;values_args&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/where&gt;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h2 id="trimタグでUpdate文を変更"><a href="#trimタグでUpdate文を変更" class="headerlink" title="trimタグでUpdate文を変更"></a>trimタグでUpdate文を変更</h2><p>SQL内に<code>&lt;trim&gt;&lt;/trim&gt;</code>タグを使うことでUpdate SQL文を動的に置き換えることができます。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"sample.mybatis.TestTableMapper"</span>&gt;</span><br><span class="line">&lt;update id=<span class="string">"update"</span>&gt;</span><br><span class="line">update test_table</span><br><span class="line">&lt;trim prefix=<span class="string">"set"</span> suffixOverrides=<span class="string">","</span>&gt;</span><br><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">"content != null"</span>&gt;</span><br><span class="line">content = #&#123;content&#125;,</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/trim&gt;</span><br><span class="line">where id = #&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h2 id="Sequenceを取得してidを設定"><a href="#Sequenceを取得してidを設定" class="headerlink" title="Sequenceを取得してidを設定"></a>Sequenceを取得してidを設定</h2><p>DBのSequenceからidを取得してからinsert文を実行する場合は<code>sample_mapper.xml</code>を次のように設定します。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">ample_mapper.xml</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"sample.mybatis"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"create"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"_int"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span>&gt;</span></span><br><span class="line">      select test_table_seq.nextval from dual</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into test_table (</span><br><span class="line">        id</span><br><span class="line">        ,value</span><br><span class="line">    ) values (</span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">        ,#&#123;value&#125;</span><br><span class="line">    )</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="生SQLの実行"><a href="#生SQLの実行" class="headerlink" title="生SQLの実行"></a>生SQLの実行</h2><p><code>@Select</code>などのアノテーションを使うとSQLを直接コードに埋めて実行ができます。Testなどでダミーデータを登録するのに便利です。</p><p><code>Mapper</code>側にメソッドを定義します。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestTableMapper</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Select</span>(<span class="string">"select count(*) from ($&#123;sql&#125;) as t"</span>)</span><br><span class="line">  <span class="function">Long <span class="title">count</span><span class="params">(@Param(<span class="string">"sql"</span>)</span> String sql)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapperの呼び出し側は次のようにSQLを呼び出します。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisSample</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 設定ファイルを読み込む</span></span><br><span class="line">    <span class="keyword">try</span> (InputStream in = MybatisSample.class.getResourceAsStream(<span class="string">"/mybatis-config.xml"</span>)) &#123;</span><br><span class="line">      <span class="comment">// 設定ファイルからSQL実行のためSqlSessionFactoryを生成</span></span><br><span class="line">      SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// SqlSessionFactory =&gt; SqlSessionを生成</span></span><br><span class="line">      <span class="keyword">try</span> (SqlSession session = factory.openSession()) &#123;</span><br><span class="line">        TestTableMapper mapper = session.getMapper(TestTableMapper.class);</span><br><span class="line"></span><br><span class="line">        Long count = mapper.countBySql(<span class="string">"select * from test_table"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(count);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>実行結果は次のとおりで、件数を取得できているのがわかります。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h2 id="ResultTypeの設定値"><a href="#ResultTypeの設定値" class="headerlink" title="ResultTypeの設定値"></a>ResultTypeの設定値</h2><ul><li>プリミティブ型は<code>_int</code>のように<code>_</code>を最初につける</li><li>参照型、オリジナルのクラスを設定してbindすることもできる</li></ul><h2 id="MyBatis関連オブジェクトのスコープ"><a href="#MyBatis関連オブジェクトのスコープ" class="headerlink" title="MyBatis関連オブジェクトのスコープ"></a>MyBatis関連オブジェクトのスコープ</h2><table><thead><tr><th>インスタンス</th><th>概要</th><th>スコープ</th></tr></thead><tbody><tr><td><code>SqlSessionFactoryBuilder</code></td><td><code>mybatis-config.xml</code>の設定ファイルを読み込む</td><td>メソッド内だけで使い捨て</td></tr><tr><td><code>SqlSessionFactory</code></td><td><code>SqlSession</code>を生成するメソッド。一度作ったら使いまわす</td><td>アプリケーション内で使いまわす</td></tr><tr><td><code>SqlSession</code></td><td>SQL実行で使う。1連のSQLを実行したらcloseする</td><td>リクエスト間でだけ使いまわす</td></tr></tbody></table><h2 id="実行されるSQLをログ出力"><a href="#実行されるSQLをログ出力" class="headerlink" title="実行されるSQLをログ出力"></a>実行されるSQLをログ出力</h2><p>実行するSQLをログに出力する場合は「<a href="https://logback.qos.ch/" target="_blank" rel="noopener">Logback Home</a>」を<code>build.gradle</code>に追加すればDEBUGレベルで出力できます。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile &apos;ch.qos.logback:logback-classic:1.1.3&apos;</span><br></pre></td></tr></table></figure><p>ログの出力結果は次のようになります。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">07:36:11.111 [main] DEBUG o.a.i.t.jdbc.JdbcTransaction - Setting autocommit to <span class="literal">false</span> on JDBC Connection [org.postgresql.jdbc4.Jdbc4Connection@5f9d02cb]</span><br><span class="line">07:36:11.114 [main] DEBUG sample.mybatis.selectTest - ==&gt;  Preparing: SELECT * FROM test_table WHERE id = ? AND values = ?</span><br><span class="line">07:36:11.186 [main] DEBUG sample.mybatis.selectTest - ==&gt; Parameters: 1(Integer), hoge(String)</span><br><span class="line">07:36:11.283 [main] DEBUG sample.mybatis.selectTest - &lt;==      Total: 1</span><br><span class="line">---------------</span><br><span class="line">id=1, values=hoge</span><br><span class="line">07:36:11.381 [main] DEBUG o.a.i.t.jdbc.JdbcTransaction - Resetting autocommit to <span class="literal">true</span> on JDBC Connection [org.postgresql.jdbc4.Jdbc4Connection@5f9d02cb]</span><br><span class="line">07:36:11.382 [main] DEBUG o.a.i.t.jdbc.JdbcTransaction - Closing JDBC Connection [org.postgresql.jdbc4.Jdbc4Connection@5f9d02cb]</span><br><span class="line">07:36:11.383 [main] DEBUG o.a.i.d.pooled.PooledDataSource - Returned connection 1604125387 to pool.</span><br></pre></td></tr></table></figure><h2 id="スネークケースとキャメルケースの自動マッピング"><a href="#スネークケースとキャメルケースの自動マッピング" class="headerlink" title="スネークケースとキャメルケースの自動マッピング"></a>スネークケースとキャメルケースの自動マッピング</h2><p>テーブルのスネークケースとキャメルケースの自動マッピングを行う場合は<code>mybatis-config.xml</code>に以下を追加します。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="キャッシュについて"><a href="#キャッシュについて" class="headerlink" title="キャッシュについて"></a>キャッシュについて</h2><ul><li>検索結果はキャッシュされる。(デフォルトでは1024個のオブジェクトをキャッシュ)</li><li>キャッシュはセッションごとに保持される</li><li>使われていないキャッシュから削除される</li><li><code>insert, update, delete</code>が実行されるとキャッシュがクリア</li></ul><h2 id="補足：-gt-、-lt-はCDATAで囲む"><a href="#補足：-gt-、-lt-はCDATAで囲む" class="headerlink" title="補足：&gt;、&lt;はCDATAで囲む"></a>補足：<code>&gt;</code>、<code>&lt;</code>はCDATAで囲む</h2><p><code>&gt;</code>、<code>&lt;</code>を使う場合は<code>CDATA</code>で対象のSQLを囲むことで使えます。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;![CDATA[</span><br><span class="line">  select</span><br><span class="line">    1</span><br><span class="line">  from</span><br><span class="line">    products</span><br><span class="line">where</span><br><span class="line">price &gt; 500</span><br><span class="line">]]&gt;</span><br></pre></td></tr></table></figure><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="http://qiita.com/opengl-8080/items/a9b5d4038f19d4813ee6" target="_blank" rel="noopener">MyBatis 使い方メモ - Qiita</a></li><li><a href="http://qiita.com/kumazo/items/72ecdb2923b77aaa0c94" target="_blank" rel="noopener">MyBatis で生SQLを叩きたい - Qiita</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「&lt;a href=&quot;http://www.mybatis.org/mybatis-3/java-api.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mybatis&lt;/a&gt;」はJavaオブジェクトとSQLを紐付ける永続化のためのフレームワークです。SQLベースで実装できるため実行するSQLに柔軟性があり、実行SQLの見通しもよく、メンテナンスしやすさを保てるのが特徴です。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://morizyun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://morizyun.github.io/tags/Java/"/>
    
      <category term="Database" scheme="http://morizyun.github.io/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Dockerでよく使うコマンドまとめ</title>
    <link href="http://morizyun.github.io/blog/docker-command-run-exec-start-stop-push/"/>
    <id>http://morizyun.github.io/blog/docker-command-run-exec-start-stop-push/</id>
    <published>2017-06-12T15:00:00.000Z</published>
    <updated>2017-08-11T00:55:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-run-start-stop-rm-commitの概念図"><a href="#docker-run-start-stop-rm-commitの概念図" class="headerlink" title="docker run/start/stop/rm/commitの概念図"></a>docker run/start/stop/rm/commitの概念図</h2><p><code>docker run/start/stop/rm/commit</code>の役割の概念図です。</p><p><img src="/img/docker-command-outline.jpg"><br><br>参考元：<a href="http://enakai00.hatenablog.com/entry/20140628/1403933390" target="_blank" rel="noopener">Dockerにおけるコンテナのライフサイクル</a></p><h2 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a>docker ps</h2><p><code>docker ps</code>はDockerコンテナの状態を確認するコマンドです。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps [オプション]</span><br></pre></td></tr></table></figure><table><thead><tr><th>オプション</th><th>説明</th></tr></thead><tbody><tr><td><code>-a</code></td><td>ローカルで起動されたDockerコンテナをすべて表示</td></tr></tbody></table><h2 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h2><p><code>docker pull</code>はDocker Hubやほかのレジストリからイメージを取得するコマンドです。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull [オプション] イメージ名[:タグ|@イメージのハッシュ値]</span><br></pre></td></tr></table></figure><table><thead><tr><th>オプション</th><th>説明</th></tr></thead><tbody><tr><td><code>--all-tags</code></td><td>すべてのタグ付けされたイメージを取得する</td></tr><tr><td><code>--disable-content-trust</code></td><td>イメージのチェックをスキップする</td></tr></tbody></table><h3 id="実行例"><a href="#実行例" class="headerlink" title="実行例"></a>実行例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull debian:jessie</span><br></pre></td></tr></table></figure><h2 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h2><p><code>docker images</code>はDockerイメージの一覧を表示するコマンド。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images [オプション] [レポジトリ]</span><br></pre></td></tr></table></figure><h2 id="docker-build"><a href="#docker-build" class="headerlink" title="docker build"></a>docker build</h2><p><code>docker build</code>はDockefileからDockerイメージを構築するためのコマンド。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build [オプション] パス/URL</span><br></pre></td></tr></table></figure><table><thead><tr><th>オプション</th><th>意味</th></tr></thead><tbody><tr><td><code>--build-arg</code></td><td>Dockerfile内で<code>ARG</code>で定義できる変数を指定</td></tr><tr><td><code>-f /パス/to/Dockerfile</code></td><td>Dockerfileのファイルパスを指定</td></tr><tr><td><code>--no-cache=true</code></td><td>build時にキャッシュを使わない</td></tr><tr><td><code>--pull=true</code></td><td>FROMで指定したベースイメージを最新を取得する</td></tr><tr><td><code>--rm=true</code></td><td>ビルド成功後中間コンテナを削除</td></tr><tr><td><code>--tag=xxx</code>、<code>-t xxx</code></td><td>タグの指定</td></tr></tbody></table><h2 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h2><p><code>docker run</code>はDockerコンテナを起動するためのコマンド。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run [オプション] イメージ [コマンド] [引数...]</span><br></pre></td></tr></table></figure><table><thead><tr><th>オプション</th><th>意味</th></tr></thead><tbody><tr><td><code>--add-host サーバ名:IP</code></td><td>Dockerコンテナの/etc/hostsを追記</td></tr><tr><td><code>-a</code></td><td>STDIN/STDOUT/STDERRを出力する</td></tr><tr><td><code>-e 環境変数</code></td><td>環境変数をDockerコンテナに渡す</td></tr><tr><td><code>-f 環境変数ファイル</code></td><td>環境変数をファイルに設定してDockerコンテナに渡す</td></tr><tr><td><code>-i</code></td><td>ホストの入力をコンテナの標準出力をつなげる</td></tr><tr><td><code>--log-driver=DRIVER</code></td><td>ログドライバの指定。詳細は <a href="https://goo.gl/006Ha4" target="_blank" rel="noopener">ロギング・ドライバの設定</a></td></tr><tr><td><code>-name</code></td><td>Dockerコンテナに名前をつける</td></tr><tr><td><code>-pホストのポート：コンテナのポート</code></td><td>ホストのポートとコンテナのポートをつなげる</td></tr><tr><td><code>-rm</code></td><td>コンテナの終了時にコンテナを自動で削除する</td></tr><tr><td><code>-t</code></td><td>コンテナの標準出力とホストの出力をつなげる</td></tr></tbody></table><h3 id="itオプションの概念図"><a href="#itオプションの概念図" class="headerlink" title="-itオプションの概念図"></a>-itオプションの概念図</h3><p><code>-it</code>オプションをつけるとターミナルでコンテナを実行できます。</p><p>&lt;img src=/img/docker-tty-sample.png /&gt;<br><br>出典： <a href="https://teratail.com/questions/19477" target="_blank" rel="noopener">Docker - docker runのオプションについて(19477)｜teratail</a></p><h2 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h2><p><code>docker exec</code>はDockerコンテナに追加のプロセスを実行させるコマンドです。ターミナルへのアクセスなどを行います。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> [オプション] コンテナ名 コマンド [引数...]</span><br></pre></td></tr></table></figure><h3 id="コンテナのshellに接続"><a href="#コンテナのshellに接続" class="headerlink" title="コンテナのshellに接続"></a>コンテナのshellに接続</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it コンテナ名 bash</span><br></pre></td></tr></table></figure><h2 id="docker-attach"><a href="#docker-attach" class="headerlink" title="docker attach"></a>docker attach</h2><p>Dockerコンテナに起動しているPID=1のプロセスの標準入力(STDIN)と、標準出力(STDOUT)に接続するコマンドです。<code>exit</code>するとのそのプロセスも終了します。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker attach [オプション] コンテナ名</span><br></pre></td></tr></table></figure><p>exitするとPID=1のプロセスが終了するため、コンテナが停止します。</p><h2 id="docker-stop-kill"><a href="#docker-stop-kill" class="headerlink" title="docker stop/kill"></a>docker stop/kill</h2><p><code>docker stop</code>はコンテナプロセスに<code>SIGTERM</code>を送信後、一定時間が経過したら<code>SIGKILL</code>を送信する。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop [オプション] コンテナ名 -f 待ち秒数</span><br></pre></td></tr></table></figure><p><code>docker kill</code>はコンテナプロセスに<code>SIGKILL</code>を送信する。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">kill</span> [オプション] コンテナ名</span><br></pre></td></tr></table></figure><h2 id="docker-start"><a href="#docker-start" class="headerlink" title="docker start"></a>docker start</h2><p><code>docker stop</code>は停止したコンテナを再起動するためのコマンド。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start [オプション] コンテナ名</span><br></pre></td></tr></table></figure><h2 id="docker-commit"><a href="#docker-commit" class="headerlink" title="docker commit"></a>docker commit</h2><p>Docker run &amp; stopで停止したコンテナファイルを新しいイメージにするためのコマンドです。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit [オプション] コンテナ名</span><br></pre></td></tr></table></figure><p>通常はイメージの管理にDockerfileを使うのが望ましいので、デバッグ用、作業中のデータセットを別のサーバに持っていくために利用します。</p><h2 id="docker-search"><a href="#docker-search" class="headerlink" title="docker search"></a>docker search</h2><p><code>docker search</code>はDocker Hub上のDockerイメージを検索するコマンド。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search [オプション] 検索ワード</span><br></pre></td></tr></table></figure><h2 id="docker-rmi"><a href="#docker-rmi" class="headerlink" title="docker rmi"></a>docker rmi</h2><p><code>docker rmi</code>はDockerイメージを削除するコマンド。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi [オプション] イメージ名</span><br></pre></td></tr></table></figure><h2 id="docker-login"><a href="#docker-login" class="headerlink" title="docker login"></a>docker login</h2><p><code>docker login</code>はレジストリサーバへのログインコマンド。以下は実行例です。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login</span><br><span class="line">Username: xxx</span><br><span class="line">Password:</span><br><span class="line">Email: xxx@gmail.com</span><br></pre></td></tr></table></figure><h2 id="docker-tag"><a href="#docker-tag" class="headerlink" title="docker tag"></a>docker tag</h2><p><code>docker tag</code>はイメージにタグを付けるためのコマンドです。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag ソースイメージ オーガニゼーション/イメージ:タグ</span><br></pre></td></tr></table></figure><p>タグを設定する設定例です。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># イメージIDからタグ設定</span></span><br><span class="line">docker tag イメージID(0e5574283393) オーガニゼーション/イメージ:タグ</span><br><span class="line"></span><br><span class="line"><span class="comment"># 名前とタグから別のタグを設定</span></span><br><span class="line">docker tag イメージ名:タグ(httpd:<span class="built_in">test</span>) fedora/httpd:version1.0.test</span><br></pre></td></tr></table></figure><h2 id="docker-push"><a href="#docker-push" class="headerlink" title="docker push"></a>docker push</h2><p><code>docker push</code>はイメージをレジストリ(Docker Hubなど)に登録するコマンドです。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push [オプション] イメージ名[:タグ]</span><br></pre></td></tr></table></figure><h2 id="docker-system-prune"><a href="#docker-system-prune" class="headerlink" title="docker system prune"></a>docker system prune</h2><p><code>docker system prune</code>はDocker 1.13.ゼロから追加された機能で、使っていないコンテナやイメージを削除するコマンドです。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker system prune</span><br><span class="line">WARNING! This will remove:</span><br><span class="line"> - all stopped containers</span><br><span class="line"> - all volumes not used by at least one container</span><br><span class="line"> - all networks not used by at least one container</span><br><span class="line"> - all dangling images</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] y</span><br><span class="line">Total reclaimed space: 0 B</span><br></pre></td></tr></table></figure><h2 id="docker-inspect"><a href="#docker-inspect" class="headerlink" title="docker inspect"></a>docker inspect</h2><p><code>docker inspect</code>はDockerイメージ/コンテナの詳細情報を表示するコマンドです。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect [オプション]</span><br></pre></td></tr></table></figure><h2 id="docker-history"><a href="#docker-history" class="headerlink" title="docker history"></a>docker history</h2><p><code>docker history</code>を使うとDockerイメージのレイヤを確認できます。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">history</span> repository:tag</span><br></pre></td></tr></table></figure><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="http://qiita.com/hihihiroro/items/6dda871dc2566801a6da" target="_blank" rel="noopener">Docker ハンズオン - 基本コマンド編 - Qiita</a></li><li><a href="https://teratail.com/questions/19477" target="_blank" rel="noopener">Docker - docker runのオプションについて(19477)｜teratail</a></li><li><a href="http://qiita.com/RyoMa_0923/items/9b5d2c4a97205692a560" target="_blank" rel="noopener">Dockerコンテナ内で操作 attachとexecの違い - Qiita</a></li><li><a href="https://docs.docker.com/engine/reference/commandline/tag/#tag-an-image-referenced-by-name" target="_blank" rel="noopener">docker tag - Docker Documentation</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;docker-run-start-stop-rm-commitの概念図&quot;&gt;&lt;a href=&quot;#docker-run-start-stop-rm-commitの概念図&quot; class=&quot;headerlink&quot; title=&quot;docker run/start/stop/
      
    
    </summary>
    
      <category term="Docker" scheme="http://morizyun.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://morizyun.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>「Digdag x Dockerでモダンなバッチ処理環境を構築」でLTしました！</title>
    <link href="http://morizyun.github.io/blog/digdag-docker-beginner-tutorial-start-guide/"/>
    <id>http://morizyun.github.io/blog/digdag-docker-beginner-tutorial-start-guide/</id>
    <published>2017-06-08T15:00:00.000Z</published>
    <updated>2017-08-11T00:55:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>「<strong><a href="https://www.digdag.io/" target="_blank" rel="noopener">DigDag</a></strong>」はTreasure Data製のワークフローエンジンのOSSです。ワークフローエンジンを使うことでバッチ処理の依存関係を明確に定義できたり、ジョブの管理をしやすくなります。また、Dockerと組み合わせることで、言語や環境を自由に選ぶことができます。</p><a id="more"></a><h2 id="紹介スライド"><a href="#紹介スライド" class="headerlink" title="紹介スライド"></a>紹介スライド</h2><p>2017/6/9に発表したDigdagの紹介LTのスライドです。Web画面からタスクの実行状況がわかったり、再実行ができたりするのは便利です！</p><script async class="speakerdeck-embed" data-id="7d7f0da051bc4bc08d1de93839fdb8b7" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script><h2 id="Digdagの特徴"><a href="#Digdagの特徴" class="headerlink" title="Digdagの特徴"></a>Digdagの特徴</h2><ul><li>手動で行っている操作をYAML(.dig) で「ワークフロー」に書いて定義できます</li><li>依存関係のある複数のタスクを管理・実行しやすくするためのしくみです</li><li>タスクが失敗した場合、時間内にワークフローが終了しない場合の通知を行うことができます</li><li><a href="https://twitter.com/frsyuki/status/839797866117783553" target="_blank" rel="noopener">PostgreSQLだけを維持すればDigdagサーバはいつでも立てたり落としたりできる本番環境に優しい設計</a> by @frsyuki</li><li>AWSのS3やRedshift、トレジャーデータのサービスとの連携が楽になります</li></ul><h2 id="開発者の古橋さんの紹介スライド"><a href="#開発者の古橋さんの紹介スライド" class="headerlink" title="開発者の古橋さんの紹介スライド"></a>開発者の古橋さんの紹介スライド</h2>&lt;iframe src=//<a href="http://www.slideshare.net/slideshow/embed_code/key/EhZC0sExwqXhsF" target="_blank" rel="noopener">www.slideshare.net/slideshow/embed_code/key/EhZC0sExwqXhsF</a> width=595 height=485 frameborder=0 marginwidth=0 marginheight=0 scrolling=no style=border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%; allowfullscreen&gt; <p>Tokyo Ruby会議#11で開発者の古橋さんが発表されていたスライド。どんな特徴をもっているかのイメージがつきやすいと思います。</p><h2 id="アーキテクチャとコンセプトの説明"><a href="#アーキテクチャとコンセプトの説明" class="headerlink" title="アーキテクチャとコンセプトの説明"></a>アーキテクチャとコンセプトの説明</h2><ul><li>日本語： <strong><a href="https://goo.gl/1Dp7sz" target="_blank" rel="noopener">Digdagのアーキテクチャとコンセプトを理解する</a></strong></li><li>英語： <strong><a href="https://goo.gl/W40aPA" target="_blank" rel="noopener">Architecture — Digdag documentation</a></strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「&lt;strong&gt;&lt;a href=&quot;https://www.digdag.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DigDag&lt;/a&gt;&lt;/strong&gt;」はTreasure Data製のワークフローエンジンのOSSです。ワークフローエンジンを使うことでバッチ処理の依存関係を明確に定義できたり、ジョブの管理をしやすくなります。また、Dockerと組み合わせることで、言語や環境を自由に選ぶことができます。&lt;/p&gt;
    
    </summary>
    
      <category term="Digdag" scheme="http://morizyun.github.io/categories/Digdag/"/>
    
    
      <category term="Docker" scheme="http://morizyun.github.io/tags/Docker/"/>
    
      <category term="Digdag" scheme="http://morizyun.github.io/tags/Digdag/"/>
    
  </entry>
  
</feed>
